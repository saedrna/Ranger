#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1 
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {} 
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; } 
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; } 
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr; 
  size_t sz0, sz1; 
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {} 
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T> 
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow; 
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow; 
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _154,    std::shared_ptr< monty::ndarray< long long,1 > > _155,    int _156,    int _157,    int _158,    std::shared_ptr< monty::ndarray< long long,1 > > _159) { mosek::fusion::p_Sort::argTransposeSort(_154,_155,_156,_157,_158,_159); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _154,std::shared_ptr< monty::ndarray< long long,1 > > _155,int _156,int _157,int _158,std::shared_ptr< monty::ndarray< long long,1 > > _159){
  _checked_ptr_1<long long> _ptr__154(_154 ? _154->raw() : nullptr, _154 ? _154->size(0) : 0);
  _checked_ptr_1<long long> _ptr__155(_155 ? _155->raw() : nullptr, _155 ? _155->size(0) : 0);
  _checked_ptr_1<long long> _ptr__159(_159 ? _159->raw() : nullptr, _159 ? _159->size(0) : 0);
  int _6760 = (int)0;
  int _6761 = safe_add( safe_mul( _156,_158 ),(int)1 );
  for (int _160 = _6760; _160 < _6761; ++_160)
  {
    {
      _ptr__155[_160] = (int)0;
    }
  }
  int _6762 = (int)0;
  int _6763 = (int)((_159)->size(0));
  for (int _161 = _6762; _161 < _6763; ++_161)
  {
    {
      ++ _ptr__155[safe_add( safe_add( safe_mul( (_ptr__159[_ptr__154[_161]] / safe_mul( _157,_158 )),_158 ),(_ptr__159[_ptr__154[_161]] % _158) ),(int)1 )];
    }
  }
  int _6764 = (int)0;
  int _6765 = safe_mul( _156,_158 );
  for (int _162 = _6764; _162 < _6765; ++_162)
  {
    {
      _ptr__155[safe_add( _162,(int)1 )] = safe_add( _ptr__155[safe_add( _162,(int)1 )],_ptr__155[_162] );
    }
  }
  std::vector<long long> _6766;
  for (int _164 = (int)0, _6767 = (int)((_154)->size(0)); _164 < _6767 ; ++_164)
  {
    _6766.push_back(_ptr__154[_164]);
  }
  auto _6768 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6766.size()),_6766.begin(),_6766.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _163 = _6768;
  _checked_ptr_1<long long> _ptr__163(_163 ? _163->raw() : nullptr,_163 ? _163->size(0) : 0);
  long long _6769 = (long long)0;
  long long _6770 = (long long)((_159)->size(0));
  for (long long _165 = _6769; _165 < _6770; ++_165)
  {
    {
      long long _166 = safe_add( safe_mul( (_ptr__159[_ptr__163[_165]] / safe_mul( _157,_158 )),_158 ),(_ptr__159[_ptr__163[_165]] % _158) );
      _ptr__154[_ptr__155[_166]] = _ptr__163[_165];
      ++ _ptr__155[_166];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _167,    std::shared_ptr< monty::ndarray< long long,1 > > _168) { mosek::fusion::p_Sort::argsort(_167,_168); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _167,std::shared_ptr< monty::ndarray< long long,1 > > _168){
  _checked_ptr_1<long long> _ptr__167(_167 ? _167->raw() : nullptr, _167 ? _167->size(0) : 0);
  _checked_ptr_1<long long> _ptr__168(_168 ? _168->raw() : nullptr, _168 ? _168->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_167,_168,(long long)((int)0),(long long)((int)((_167)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _169,    std::shared_ptr< monty::ndarray< int,1 > > _170) { mosek::fusion::p_Sort::argsort(_169,_170); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _169,std::shared_ptr< monty::ndarray< int,1 > > _170){
  _checked_ptr_1<long long> _ptr__169(_169 ? _169->raw() : nullptr, _169 ? _169->size(0) : 0);
  _checked_ptr_1<int> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_169,_170,(long long)((int)0),(long long)((int)((_169)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _171,    std::shared_ptr< monty::ndarray< long long,1 > > _172,    std::shared_ptr< monty::ndarray< long long,1 > > _173) { mosek::fusion::p_Sort::argsort(_171,_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _171,std::shared_ptr< monty::ndarray< long long,1 > > _172,std::shared_ptr< monty::ndarray< long long,1 > > _173){
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  _checked_ptr_1<long long> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<long long> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_171,_172,_173,(long long)((int)0),(long long)((int)((_171)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< int,1 > > _175,    std::shared_ptr< monty::ndarray< int,1 > > _176) { mosek::fusion::p_Sort::argsort(_174,_175,_176); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< int,1 > > _175,std::shared_ptr< monty::ndarray< int,1 > > _176){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<int> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  _checked_ptr_1<int> _ptr__176(_176 ? _176->raw() : nullptr, _176 ? _176->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,(long long)((int)0),(long long)((int)((_174)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _177,    std::shared_ptr< monty::ndarray< long long,1 > > _178,    long long _179,    long long _180) { mosek::fusion::p_Sort::argsort(_177,_178,_179,_180); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _177,std::shared_ptr< monty::ndarray< long long,1 > > _178,long long _179,long long _180){
  _checked_ptr_1<long long> _ptr__177(_177 ? _177->raw() : nullptr, _177 ? _177->size(0) : 0);
  _checked_ptr_1<long long> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_177,_178,_179,_180,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _181,    std::shared_ptr< monty::ndarray< int,1 > > _182,    long long _183,    long long _184) { mosek::fusion::p_Sort::argsort(_181,_182,_183,_184); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _181,std::shared_ptr< monty::ndarray< int,1 > > _182,long long _183,long long _184){
  _checked_ptr_1<long long> _ptr__181(_181 ? _181->raw() : nullptr, _181 ? _181->size(0) : 0);
  _checked_ptr_1<int> _ptr__182(_182 ? _182->raw() : nullptr, _182 ? _182->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_181,_182,_183,_184,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _185,    std::shared_ptr< monty::ndarray< long long,1 > > _186,    std::shared_ptr< monty::ndarray< long long,1 > > _187,    long long _188,    long long _189) { mosek::fusion::p_Sort::argsort(_185,_186,_187,_188,_189); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _185,std::shared_ptr< monty::ndarray< long long,1 > > _186,std::shared_ptr< monty::ndarray< long long,1 > > _187,long long _188,long long _189){
  _checked_ptr_1<long long> _ptr__185(_185 ? _185->raw() : nullptr, _185 ? _185->size(0) : 0);
  _checked_ptr_1<long long> _ptr__186(_186 ? _186->raw() : nullptr, _186 ? _186->size(0) : 0);
  _checked_ptr_1<long long> _ptr__187(_187 ? _187->raw() : nullptr, _187 ? _187->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_185,_186,_187,_188,_189,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _190,    std::shared_ptr< monty::ndarray< int,1 > > _191,    std::shared_ptr< monty::ndarray< int,1 > > _192,    long long _193,    long long _194) { mosek::fusion::p_Sort::argsort(_190,_191,_192,_193,_194); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _190,std::shared_ptr< monty::ndarray< int,1 > > _191,std::shared_ptr< monty::ndarray< int,1 > > _192,long long _193,long long _194){
  _checked_ptr_1<long long> _ptr__190(_190 ? _190->raw() : nullptr, _190 ? _190->size(0) : 0);
  _checked_ptr_1<int> _ptr__191(_191 ? _191->raw() : nullptr, _191 ? _191->size(0) : 0);
  _checked_ptr_1<int> _ptr__192(_192 ? _192->raw() : nullptr, _192 ? _192->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_190,_191,_192,_193,_194,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _195,    std::shared_ptr< monty::ndarray< long long,1 > > _196,    long long _197,    long long _198,    bool _199) { mosek::fusion::p_Sort::argsort(_195,_196,_197,_198,_199); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _195,std::shared_ptr< monty::ndarray< long long,1 > > _196,long long _197,long long _198,bool _199){
  _checked_ptr_1<long long> _ptr__195(_195 ? _195->raw() : nullptr, _195 ? _195->size(0) : 0);
  _checked_ptr_1<long long> _ptr__196(_196 ? _196->raw() : nullptr, _196 ? _196->size(0) : 0);
  if (((!_199) || ((_198 - _197) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_195,_196,_197,_198);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_195,_196,_197,_198,_199)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _200 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__200(_200 ? _200->raw() : nullptr,_200 ? _200->size(0) : 0);
      int _201 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_195,_196,nullptr,_197,_198,_200);
      if (((_ptr__200[(int)1] - _ptr__200[(int)0]) < safe_mul( _201,(_198 - _197) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_195,_196,_197,_198,_ptr__200[(int)0],_ptr__200[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_195,_196,_197,_198);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _202,    std::shared_ptr< monty::ndarray< int,1 > > _203,    long long _204,    long long _205,    bool _206) { mosek::fusion::p_Sort::argsort(_202,_203,_204,_205,_206); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _202,std::shared_ptr< monty::ndarray< int,1 > > _203,long long _204,long long _205,bool _206){
  _checked_ptr_1<long long> _ptr__202(_202 ? _202->raw() : nullptr, _202 ? _202->size(0) : 0);
  _checked_ptr_1<int> _ptr__203(_203 ? _203->raw() : nullptr, _203 ? _203->size(0) : 0);
  if (((!_206) || ((_205 - _204) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_202,_203,_204,_205);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_202,_203,_204,_205,_206)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _207 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__207(_207 ? _207->raw() : nullptr,_207 ? _207->size(0) : 0);
      int _208 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_202,_203,nullptr,_204,_205,_207);
      if (((_ptr__207[(int)1] - _ptr__207[(int)0]) < safe_mul( _208,(_205 - _204) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_202,_203,_204,_205,_ptr__207[(int)0],_ptr__207[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_202,_203,_204,_205);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _209,    std::shared_ptr< monty::ndarray< long long,1 > > _210,    std::shared_ptr< monty::ndarray< long long,1 > > _211,    long long _212,    long long _213,    bool _214) { mosek::fusion::p_Sort::argsort(_209,_210,_211,_212,_213,_214); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _209,std::shared_ptr< monty::ndarray< long long,1 > > _210,std::shared_ptr< monty::ndarray< long long,1 > > _211,long long _212,long long _213,bool _214){
  _checked_ptr_1<long long> _ptr__209(_209 ? _209->raw() : nullptr, _209 ? _209->size(0) : 0);
  _checked_ptr_1<long long> _ptr__210(_210 ? _210->raw() : nullptr, _210 ? _210->size(0) : 0);
  _checked_ptr_1<long long> _ptr__211(_211 ? _211->raw() : nullptr, _211 ? _211->size(0) : 0);
  if (((!_214) || ((_213 - _212) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_209,_210,_211,_212,_213);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_209,_210,_211,_212,_213,_214)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _215 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__215(_215 ? _215->raw() : nullptr,_215 ? _215->size(0) : 0);
      int _216 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_209,_210,_211,_212,_213,_215);
      if ((((_ptr__215[(int)1] - _ptr__215[(int)0]) < safe_mul( _216,(_213 - _212) )) && ((_ptr__215[(int)3] - _ptr__215[(int)2]) < safe_mul( _216,(_213 - _212) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_209,_211,_212,_213,_ptr__215[(int)2],_ptr__215[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_209,_210,_212,_213,_ptr__215[(int)0],_ptr__215[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_209,_210,_211,_212,_213);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _217,    std::shared_ptr< monty::ndarray< int,1 > > _218,    std::shared_ptr< monty::ndarray< int,1 > > _219,    long long _220,    long long _221,    bool _222) { mosek::fusion::p_Sort::argsort(_217,_218,_219,_220,_221,_222); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _217,std::shared_ptr< monty::ndarray< int,1 > > _218,std::shared_ptr< monty::ndarray< int,1 > > _219,long long _220,long long _221,bool _222){
  _checked_ptr_1<long long> _ptr__217(_217 ? _217->raw() : nullptr, _217 ? _217->size(0) : 0);
  _checked_ptr_1<int> _ptr__218(_218 ? _218->raw() : nullptr, _218 ? _218->size(0) : 0);
  _checked_ptr_1<int> _ptr__219(_219 ? _219->raw() : nullptr, _219 ? _219->size(0) : 0);
  if (((!_222) || ((_221 - _220) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_217,_218,_219,_220,_221);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_217,_218,_219,_220,_221,_222)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _223 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__223(_223 ? _223->raw() : nullptr,_223 ? _223->size(0) : 0);
      int _224 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_217,_218,_219,_220,_221,_223);
      if ((((_ptr__223[(int)1] - _ptr__223[(int)0]) < safe_mul( _224,(_221 - _220) )) && ((_ptr__223[(int)3] - _ptr__223[(int)2]) < safe_mul( _224,(_221 - _220) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_217,_219,_220,_221,_ptr__223[(int)2],_ptr__223[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_217,_218,_220,_221,_ptr__223[(int)0],_ptr__223[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_217,_218,_219,_220,_221);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _225,    std::shared_ptr< monty::ndarray< long long,1 > > _226,    long long _227,    long long _228,    long long _229,    long long _230) { mosek::fusion::p_Sort::argbucketsort(_225,_226,_227,_228,_229,_230); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _225,std::shared_ptr< monty::ndarray< long long,1 > > _226,long long _227,long long _228,long long _229,long long _230){
  _checked_ptr_1<long long> _ptr__225(_225 ? _225->raw() : nullptr, _225 ? _225->size(0) : 0);
  _checked_ptr_1<long long> _ptr__226(_226 ? _226->raw() : nullptr, _226 ? _226->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_225,_227,_228,_226,_229,_230);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _231,    std::shared_ptr< monty::ndarray< int,1 > > _232,    long long _233,    long long _234,    int _235,    int _236) { mosek::fusion::p_Sort::argbucketsort(_231,_232,_233,_234,_235,_236); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _231,std::shared_ptr< monty::ndarray< int,1 > > _232,long long _233,long long _234,int _235,int _236){
  _checked_ptr_1<long long> _ptr__231(_231 ? _231->raw() : nullptr, _231 ? _231->size(0) : 0);
  _checked_ptr_1<int> _ptr__232(_232 ? _232->raw() : nullptr, _232 ? _232->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_231,_233,_234,_232,_235,_236);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _237,    std::shared_ptr< monty::ndarray< long long,1 > > _238,    std::shared_ptr< monty::ndarray< long long,1 > > _239,    long long _240,    long long _241,    std::shared_ptr< monty::ndarray< long long,1 > > _242) { mosek::fusion::p_Sort::getminmax(_237,_238,_239,_240,_241,_242); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _237,std::shared_ptr< monty::ndarray< long long,1 > > _238,std::shared_ptr< monty::ndarray< long long,1 > > _239,long long _240,long long _241,std::shared_ptr< monty::ndarray< long long,1 > > _242){
  _checked_ptr_1<long long> _ptr__237(_237 ? _237->raw() : nullptr, _237 ? _237->size(0) : 0);
  _checked_ptr_1<long long> _ptr__238(_238 ? _238->raw() : nullptr, _238 ? _238->size(0) : 0);
  _checked_ptr_1<long long> _ptr__239(_239 ? _239->raw() : nullptr, _239 ? _239->size(0) : 0);
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _ptr__242[(int)0] = _ptr__238[_ptr__237[_240]];
  _ptr__242[(int)1] = _ptr__238[_ptr__237[_240]];
  long long _6771 = safe_add( _240,(int)1 );
  long long _6772 = _241;
  for (long long _243 = _6771; _243 < _6772; ++_243)
  {
    {
      if ((_ptr__242[(int)0] > _ptr__238[_ptr__237[_243]]))
      {
        {
          _ptr__242[(int)0] = _ptr__238[_ptr__237[_243]];
        }
      }
      {}
      if ((_ptr__242[(int)1] < _ptr__238[_ptr__237[_243]]))
      {
        {
          _ptr__242[(int)1] = _ptr__238[_ptr__237[_243]];
        }
      }
      {}
    }
  }
  if ((NULL != _239.get()))
  {
    {
      _ptr__242[(int)2] = _ptr__239[_ptr__237[_240]];
      _ptr__242[(int)3] = _ptr__239[_ptr__237[_240]];
      long long _6773 = safe_add( _240,(int)1 );
      long long _6774 = _241;
      for (long long _244 = _6773; _244 < _6774; ++_244)
      {
        {
          if ((_ptr__242[(int)2] > _ptr__239[_ptr__237[_244]]))
          {
            {
              _ptr__242[(int)2] = _ptr__239[_ptr__237[_244]];
            }
          }
          {}
          if ((_ptr__242[(int)3] < _ptr__239[_ptr__237[_244]]))
          {
            {
              _ptr__242[(int)3] = _ptr__239[_ptr__237[_244]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _245,    std::shared_ptr< monty::ndarray< int,1 > > _246,    std::shared_ptr< monty::ndarray< int,1 > > _247,    long long _248,    long long _249,    std::shared_ptr< monty::ndarray< int,1 > > _250) { mosek::fusion::p_Sort::getminmax(_245,_246,_247,_248,_249,_250); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _245,std::shared_ptr< monty::ndarray< int,1 > > _246,std::shared_ptr< monty::ndarray< int,1 > > _247,long long _248,long long _249,std::shared_ptr< monty::ndarray< int,1 > > _250){
  _checked_ptr_1<long long> _ptr__245(_245 ? _245->raw() : nullptr, _245 ? _245->size(0) : 0);
  _checked_ptr_1<int> _ptr__246(_246 ? _246->raw() : nullptr, _246 ? _246->size(0) : 0);
  _checked_ptr_1<int> _ptr__247(_247 ? _247->raw() : nullptr, _247 ? _247->size(0) : 0);
  _checked_ptr_1<int> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _ptr__250[(int)0] = _ptr__246[_ptr__245[_248]];
  _ptr__250[(int)1] = _ptr__246[_ptr__245[_248]];
  long long _6775 = safe_add( _248,(int)1 );
  long long _6776 = _249;
  for (long long _251 = _6775; _251 < _6776; ++_251)
  {
    {
      if ((_ptr__250[(int)0] > _ptr__246[_ptr__245[_251]]))
      {
        {
          _ptr__250[(int)0] = _ptr__246[_ptr__245[_251]];
        }
      }
      {}
      if ((_ptr__250[(int)1] < _ptr__246[_ptr__245[_251]]))
      {
        {
          _ptr__250[(int)1] = _ptr__246[_ptr__245[_251]];
        }
      }
      {}
    }
  }
  if ((NULL != _247.get()))
  {
    {
      _ptr__250[(int)2] = _ptr__247[_ptr__245[_248]];
      _ptr__250[(int)3] = _ptr__247[_ptr__245[_248]];
      long long _6777 = safe_add( _248,(int)1 );
      long long _6778 = _249;
      for (long long _252 = _6777; _252 < _6778; ++_252)
      {
        {
          if ((_ptr__250[(int)2] > _ptr__247[_ptr__245[_252]]))
          {
            {
              _ptr__250[(int)2] = _ptr__247[_ptr__245[_252]];
            }
          }
          {}
          if ((_ptr__250[(int)3] < _ptr__247[_ptr__245[_252]]))
          {
            {
              _ptr__250[(int)3] = _ptr__247[_ptr__245[_252]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _253,    std::shared_ptr< monty::ndarray< long long,1 > > _254,    long long _255,    long long _256,    bool _257) { return mosek::fusion::p_Sort::issorted(_253,_254,_255,_256,_257); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _253,std::shared_ptr< monty::ndarray< long long,1 > > _254,long long _255,long long _256,bool _257){
  _checked_ptr_1<long long> _ptr__253(_253 ? _253->raw() : nullptr, _253 ? _253->size(0) : 0);
  _checked_ptr_1<long long> _ptr__254(_254 ? _254->raw() : nullptr, _254 ? _254->size(0) : 0);
  long long _6779 = _255;
  long long _6780 = (_256 - (int)1);
  for (long long _258 = _6779; _258 < _6780; ++_258)
  {
    {
      if ((_ptr__254[_ptr__253[_258]] > _ptr__254[_ptr__253[safe_add( _258,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _259,    std::shared_ptr< monty::ndarray< int,1 > > _260,    long long _261,    long long _262,    bool _263) { return mosek::fusion::p_Sort::issorted(_259,_260,_261,_262,_263); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _259,std::shared_ptr< monty::ndarray< int,1 > > _260,long long _261,long long _262,bool _263){
  _checked_ptr_1<long long> _ptr__259(_259 ? _259->raw() : nullptr, _259 ? _259->size(0) : 0);
  _checked_ptr_1<int> _ptr__260(_260 ? _260->raw() : nullptr, _260 ? _260->size(0) : 0);
  long long _6781 = _261;
  long long _6782 = (_262 - (int)1);
  for (long long _264 = _6781; _264 < _6782; ++_264)
  {
    {
      if ((_ptr__260[_ptr__259[_264]] > _ptr__260[_ptr__259[safe_add( _264,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _265,    std::shared_ptr< monty::ndarray< long long,1 > > _266,    std::shared_ptr< monty::ndarray< long long,1 > > _267,    long long _268,    long long _269,    bool _270) { return mosek::fusion::p_Sort::issorted(_265,_266,_267,_268,_269,_270); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _265,std::shared_ptr< monty::ndarray< long long,1 > > _266,std::shared_ptr< monty::ndarray< long long,1 > > _267,long long _268,long long _269,bool _270){
  _checked_ptr_1<long long> _ptr__265(_265 ? _265->raw() : nullptr, _265 ? _265->size(0) : 0);
  _checked_ptr_1<long long> _ptr__266(_266 ? _266->raw() : nullptr, _266 ? _266->size(0) : 0);
  _checked_ptr_1<long long> _ptr__267(_267 ? _267->raw() : nullptr, _267 ? _267->size(0) : 0);
  long long _6783 = _268;
  long long _6784 = (_269 - (int)1);
  for (long long _271 = _6783; _271 < _6784; ++_271)
  {
    {
      if (((_ptr__266[_ptr__265[_271]] > _ptr__266[_ptr__265[safe_add( _271,(int)1 )]]) || ((_ptr__266[_ptr__265[safe_add( _271,(int)1 )]] == _ptr__266[_ptr__265[_271]]) && (_ptr__267[_ptr__265[_271]] > _ptr__267[_ptr__265[safe_add( _271,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _272,    std::shared_ptr< monty::ndarray< int,1 > > _273,    std::shared_ptr< monty::ndarray< int,1 > > _274,    long long _275,    long long _276,    bool _277) { return mosek::fusion::p_Sort::issorted(_272,_273,_274,_275,_276,_277); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _272,std::shared_ptr< monty::ndarray< int,1 > > _273,std::shared_ptr< monty::ndarray< int,1 > > _274,long long _275,long long _276,bool _277){
  _checked_ptr_1<long long> _ptr__272(_272 ? _272->raw() : nullptr, _272 ? _272->size(0) : 0);
  _checked_ptr_1<int> _ptr__273(_273 ? _273->raw() : nullptr, _273 ? _273->size(0) : 0);
  _checked_ptr_1<int> _ptr__274(_274 ? _274->raw() : nullptr, _274 ? _274->size(0) : 0);
  long long _6785 = _275;
  long long _6786 = (_276 - (int)1);
  for (long long _278 = _6785; _278 < _6786; ++_278)
  {
    {
      if (((_ptr__273[_ptr__272[_278]] > _ptr__273[_ptr__272[safe_add( _278,(int)1 )]]) || ((_ptr__273[_ptr__272[_278]] == _ptr__273[_ptr__272[safe_add( _278,(int)1 )]]) && (_ptr__274[_ptr__272[_278]] > _ptr__274[_ptr__272[safe_add( _278,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _279){ return new mosek::fusion::IndexCounter(_279); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _279) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_279); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _279){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__279(_279 ? _279->raw() : nullptr, _279 ? _279->size(0) : 0);
    n = (int)((_279)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_279);
    std::vector<int> _6787;
    for (int _280 = (int)0, _6788 = (int)((_279)->size(0)); _280 < _6788 ; ++_280)
    {
      _6787.push_back(_ptr__279[_280]);
    }
    auto _6789 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6787.size()),_6787.begin(),_6787.end()));
    dims = _6789;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _281,    std::shared_ptr< monty::ndarray< int,1 > > _282,    std::shared_ptr< monty::ndarray< int,1 > > _283){ return new mosek::fusion::IndexCounter(_281,_282,_283); }mosek::fusion::IndexCounter::IndexCounter  (long long _281,    std::shared_ptr< monty::ndarray< int,1 > > _282,    std::shared_ptr< monty::ndarray< int,1 > > _283) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_281,_282,_283); }void mosek::fusion::p_IndexCounter::_initialize  (long long _281,    std::shared_ptr< monty::ndarray< int,1 > > _282,    std::shared_ptr< monty::ndarray< int,1 > > _283){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__282(_282 ? _282->raw() : nullptr, _282 ? _282->size(0) : 0);
    _checked_ptr_1<int> _ptr__283(_283 ? _283->raw() : nullptr, _283 ? _283->size(0) : 0);
    int _284 = (int)((_283)->size(0));
    n = (int)((_282)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6790 = (int)0;
    int _6791 = n;
    for (int _285 = _6790; _285 < _6791; ++_285)
    {
      {
        ((*st)(_285)) = _281;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_283);
    dims = _282;
    start = _281;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _286,    std::shared_ptr< monty::ndarray< int,1 > > _287,    std::shared_ptr< monty::ndarray< long long,1 > > _288){ return new mosek::fusion::IndexCounter(_286,_287,_288); }mosek::fusion::IndexCounter::IndexCounter  (long long _286,    std::shared_ptr< monty::ndarray< int,1 > > _287,    std::shared_ptr< monty::ndarray< long long,1 > > _288) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_286,_287,_288); }void mosek::fusion::p_IndexCounter::_initialize  (long long _286,    std::shared_ptr< monty::ndarray< int,1 > > _287,    std::shared_ptr< monty::ndarray< long long,1 > > _288){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__287(_287 ? _287->raw() : nullptr, _287 ? _287->size(0) : 0);
    _checked_ptr_1<long long> _ptr__288(_288 ? _288->raw() : nullptr, _288 ? _288->size(0) : 0);
    n = (int)((_287)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6792 = (int)0;
    int _6793 = n;
    for (int _289 = _6792; _289 < _6793; ++_289)
    {
      {
        ((*st)(_289)) = _286;
      }
    }
    strides = _288;
    dims = _287;
    start = _286;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _290 = _pubthis->get();
  _pubthis->inc();
  return _290;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _291;
  {
    _291 = (int)0;
    for(;((_291 < (n - (int)1)) && (((*ii)(_291)) == ((*dims)(((n - _291) - (int)1)))));++ _291)
    {
      {
        ((*ii)(_291)) = (int)0;
        ++ ((*ii)(safe_add( _291,(int)1 )));
        ((*st)(safe_add( _291,(int)1 ))) = safe_add( ((*st)(safe_add( _291,(int)1 ))),((*strides)(((n - _291) - (int)2))) );
      }
    }
  }
  int _6794 = (int)0;
  int _6795 = _291;
  for (int _292 = _6794; _292 < _6795; ++_292)
  {
    {
      ((*st)(_292)) = ((*st)(_291));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _6796 = (int)0;
  int _6797 = n;
  for (int _293 = _6796; _293 < _6797; ++_293)
  {
    {
      ((*st)(_293)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _294,    int _295) { return mosek::fusion::p_CommonTools::resize(_294,_295); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _294,int _295){
  _checked_ptr_1<long long> _ptr__294(_294 ? _294->raw() : nullptr, _294 ? _294->size(0) : 0);
  if ((_295 == (int)((_294)->size(0))))
  {
    {
      return _294;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _296 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_295)));
      _checked_ptr_1<long long> _ptr__296(_296 ? _296->raw() : nullptr,_296 ? _296->size(0) : 0);
      if ((_295 > (int)((_294)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,(int)((_294)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,_295);
        }
      }
      return _296;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _297,int _298){
  _checked_ptr_1<int> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _299 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_298)));
      _checked_ptr_1<int> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::resize(_300,_301); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _300,int _301){
  _checked_ptr_1<double> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  if ((_301 == (int)((_300)->size(0))))
  {
    {
      return _300;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _302 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_301)));
      _checked_ptr_1<double> _ptr__302(_302 ? _302->raw() : nullptr,_302 ? _302->size(0) : 0);
      if ((_301 > (int)((_300)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,(int)((_300)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,_301);
        }
      }
      return _302;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _303,    int _304) { return mosek::fusion::p_CommonTools::binarySearch(_303,_304); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _303,int _304){
  _checked_ptr_1<int> _ptr__303(_303 ? _303->raw() : nullptr, _303 ? _303->size(0) : 0);
  int _305 = (int)0;
  int _306 = (int)((_303)->size(0));
  if ((_ptr__303[_305] == _304))
  {
    {
      return _305;
    }
  }
  else if((_ptr__303[(_306 - (int)1)] == _304))
  {
    {
      return (_306 - (int)1);
    }
  }
  {}
  while ( (_305 < (_306 - (int)1)) )
  {
    {
      int _307 = ((_306 - _305) / (int)2);
      if ((_304 < _ptr__303[_307]))
      {
        {
          _305 = safe_add( _307,(int)1 );
        }
      }
      else if((_304 > _ptr__303[_307]))
      {
        {
          _306 = _307;
        }
      }
      else
      {
        {
          return _307;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _308,    long long _309) { return mosek::fusion::p_CommonTools::binarySearch(_308,_309); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _308,long long _309){
  _checked_ptr_1<long long> _ptr__308(_308 ? _308->raw() : nullptr, _308 ? _308->size(0) : 0);
  int _310 = ::mosek::fusion::p_CommonTools::binarySearchL(_308,_309);
  if (((_310 < (int)((_308)->size(0))) && (_ptr__308[_310] == _309)))
  {
    {
      return _310;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _311,    long long _312) { return mosek::fusion::p_CommonTools::binarySearchR(_311,_312); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _311,long long _312){
  _checked_ptr_1<long long> _ptr__311(_311 ? _311->raw() : nullptr, _311 ? _311->size(0) : 0);
  int _313 = (int)0;
  int _314 = (int)((_311)->size(0));
  if ((_ptr__311[_313] > _312))
  {
    {
      return _313;
    }
  }
  {}
  while ( (_313 < (_314 - (int)1)) )
  {
    {
      int _315 = (safe_add( _314,_313 ) / (int)2);
      if ((_312 >= _ptr__311[_315]))
      {
        {
          _313 = _315;
        }
      }
      else
      {
        {
          _314 = _315;
        }
      }
    }
  }
  return _314;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _316,    long long _317) { return mosek::fusion::p_CommonTools::binarySearchL(_316,_317); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _316,long long _317){
  _checked_ptr_1<long long> _ptr__316(_316 ? _316->raw() : nullptr, _316 ? _316->size(0) : 0);
  int _318 = (int)0;
  int _319 = (int)((_316)->size(0));
  if ((_317 <= _ptr__316[_318]))
  {
    {
      return _318;
    }
  }
  {}
  while ( (_318 < (_319 - (int)1)) )
  {
    {
      int _320 = (safe_add( _319,_318 ) / (int)2);
      if ((_ptr__316[_320] < _317))
      {
        {
          _318 = _320;
        }
      }
      else
      {
        {
          _319 = _320;
        }
      }
    }
  }
  return _319;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _321,    std::shared_ptr< monty::ndarray< int,1 > > _322,    std::shared_ptr< monty::ndarray< int,1 > > _323) { mosek::fusion::p_CommonTools::ndIncr(_321,_322,_323); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _321,std::shared_ptr< monty::ndarray< int,1 > > _322,std::shared_ptr< monty::ndarray< int,1 > > _323){
  _checked_ptr_1<int> _ptr__321(_321 ? _321->raw() : nullptr, _321 ? _321->size(0) : 0);
  _checked_ptr_1<int> _ptr__322(_322 ? _322->raw() : nullptr, _322 ? _322->size(0) : 0);
  _checked_ptr_1<int> _ptr__323(_323 ? _323->raw() : nullptr, _323 ? _323->size(0) : 0);
  int _324 = ((int)((_321)->size(0)) - (int)1);
  ++ _ptr__321[_324];
  while ( ((_324 > (int)0) && (_ptr__321[_324] >= _ptr__323[_324])) )
  {
    {
      _ptr__321[_324] = _ptr__322[_324];
      ++ _ptr__321[(_324 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _325,    std::shared_ptr< monty::ndarray< int,1 > > _326,    std::shared_ptr< monty::ndarray< double,1 > > _327,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _328,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _329,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _330,    long long _331,    int _332,    int _333) { mosek::fusion::p_CommonTools::transposeTriplets(_325,_326,_327,_328,_329,_330,_331,_332,_333); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _325,std::shared_ptr< monty::ndarray< int,1 > > _326,std::shared_ptr< monty::ndarray< double,1 > > _327,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _328,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _329,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _330,long long _331,int _332,int _333){
  _checked_ptr_1<int> _ptr__325(_325 ? _325->raw() : nullptr, _325 ? _325->size(0) : 0);
  _checked_ptr_1<int> _ptr__326(_326 ? _326->raw() : nullptr, _326 ? _326->size(0) : 0);
  _checked_ptr_1<double> _ptr__327(_327 ? _327->raw() : nullptr, _327 ? _327->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _334 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _332,(int)2 ))));
  _checked_ptr_1<long long> _ptr__334(_334 ? _334->raw() : nullptr,_334 ? _334->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _335 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _333,(int)2 ))));
  _checked_ptr_1<long long> _ptr__335(_335 ? _335->raw() : nullptr,_335 ? _335->size(0) : 0);
  {
    long long _336 = (long long)0;
    for(;(_336 < _331);++ _336)
    {
      {
        _ptr__335[safe_add( _ptr__326[_336],(int)2 )] = safe_add( _ptr__335[safe_add( _ptr__326[_336],(int)2 )],(int)1 );
        _ptr__334[safe_add( _ptr__325[_336],(int)2 )] = safe_add( _ptr__334[safe_add( _ptr__325[_336],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _337 = (int)1;
    for(;(_337 < _332);++ _337)
    {
      {
        _ptr__334[safe_add( _337,(int)1 )] = safe_add( _ptr__334[safe_add( _337,(int)1 )],_ptr__334[_337] );
      }
    }
  }
  {
    int _338 = (int)1;
    for(;(_338 < _333);++ _338)
    {
      {
        _ptr__335[safe_add( _338,(int)1 )] = safe_add( _ptr__335[safe_add( _338,(int)1 )],_ptr__335[_338] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _339 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_331)));
  _checked_ptr_1<long long> _ptr__339(_339 ? _339->raw() : nullptr,_339 ? _339->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_331)));
  _checked_ptr_1<long long> _ptr__340(_340 ? _340->raw() : nullptr,_340 ? _340->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _341 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_331)));
  _checked_ptr_1<double> _ptr__341(_341 ? _341->raw() : nullptr,_341 ? _341->size(0) : 0);
  int _6798 = (int)0;
  int _6799 = _332;
  for (int _342 = _6798; _342 < _6799; ++_342)
  {
    {
      {
        long long _343 = _ptr__334[_342];
        for(;(_343 < _ptr__334[safe_add( _342,(int)1 )]);++ _343)
        {
          {
            int _344 = _ptr__326[_343];
            long long _345 = _ptr__335[_344];
            _ptr__339[_345] = _342;
            _ptr__340[_345] = _344;
            _ptr__341[_345] = _ptr__327[_343];
            _ptr__335[_344] = safe_add( _345,(int)1 );
          }
        }
      }
    }
  }
  ((*_328)((int)0)) = _340;
  ((*_329)((int)0)) = _339;
  ((*_330)((int)0)) = _341;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _346,    std::shared_ptr< monty::ndarray< int,1 > > _347,    std::shared_ptr< monty::ndarray< double,1 > > _348,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _349,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _350,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _351,    long long _352,    int _353,    int _354) { mosek::fusion::p_CommonTools::transposeTriplets(_346,_347,_348,_349,_350,_351,_352,_353,_354); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _346,std::shared_ptr< monty::ndarray< int,1 > > _347,std::shared_ptr< monty::ndarray< double,1 > > _348,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _349,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _350,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _351,long long _352,int _353,int _354){
  _checked_ptr_1<int> _ptr__346(_346 ? _346->raw() : nullptr, _346 ? _346->size(0) : 0);
  _checked_ptr_1<int> _ptr__347(_347 ? _347->raw() : nullptr, _347 ? _347->size(0) : 0);
  _checked_ptr_1<double> _ptr__348(_348 ? _348->raw() : nullptr, _348 ? _348->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _355 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _353,(int)2 ))));
  _checked_ptr_1<long long> _ptr__355(_355 ? _355->raw() : nullptr,_355 ? _355->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _356 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _354,(int)2 ))));
  _checked_ptr_1<long long> _ptr__356(_356 ? _356->raw() : nullptr,_356 ? _356->size(0) : 0);
  {
    long long _357 = (long long)0;
    for(;(_357 < _352);++ _357)
    {
      {
        _ptr__356[safe_add( _ptr__347[_357],(int)2 )] = safe_add( _ptr__356[safe_add( _ptr__347[_357],(int)2 )],(int)1 );
        _ptr__355[safe_add( _ptr__346[_357],(int)2 )] = safe_add( _ptr__355[safe_add( _ptr__346[_357],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _358 = (int)1;
    for(;(_358 < _353);++ _358)
    {
      {
        _ptr__355[safe_add( _358,(int)1 )] = safe_add( _ptr__355[safe_add( _358,(int)1 )],_ptr__355[_358] );
      }
    }
  }
  {
    int _359 = (int)1;
    for(;(_359 < _354);++ _359)
    {
      {
        _ptr__356[safe_add( _359,(int)1 )] = safe_add( _ptr__356[safe_add( _359,(int)1 )],_ptr__356[_359] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _360 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_352)));
  _checked_ptr_1<int> _ptr__360(_360 ? _360->raw() : nullptr,_360 ? _360->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _361 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_352)));
  _checked_ptr_1<int> _ptr__361(_361 ? _361->raw() : nullptr,_361 ? _361->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _362 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_352)));
  _checked_ptr_1<double> _ptr__362(_362 ? _362->raw() : nullptr,_362 ? _362->size(0) : 0);
  {
    int _363 = (int)0;
    for(;(_363 < _353);++ _363)
    {
      {
        long long _6800 = _ptr__355[_363];
        long long _6801 = _ptr__355[safe_add( _363,(int)1 )];
        for (long long _364 = _6800; _364 < _6801; ++_364)
        {
          {
            int _365 = _ptr__347[_364];
            long long _366 = _ptr__356[_365];
            _ptr__360[_366] = _363;
            _ptr__361[_366] = _365;
            _ptr__362[_366] = _ptr__348[_364];
            _ptr__356[_365] = safe_add( _366,(int)1 );
          }
        }
      }
    }
  }
  ((*_349)((int)0)) = _361;
  ((*_350)((int)0)) = _360;
  ((*_351)((int)0)) = _362;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _367,    std::shared_ptr< monty::ndarray< int,1 > > _368,    std::shared_ptr< monty::ndarray< double,1 > > _369,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _370,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _371,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _372,    long long _373,    int _374,    int _375) { mosek::fusion::p_CommonTools::tripletSort(_367,_368,_369,_370,_371,_372,_373,_374,_375); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _367,std::shared_ptr< monty::ndarray< int,1 > > _368,std::shared_ptr< monty::ndarray< double,1 > > _369,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _370,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _371,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _372,long long _373,int _374,int _375){
  _checked_ptr_1<int> _ptr__367(_367 ? _367->raw() : nullptr, _367 ? _367->size(0) : 0);
  _checked_ptr_1<int> _ptr__368(_368 ? _368->raw() : nullptr, _368 ? _368->size(0) : 0);
  _checked_ptr_1<double> _ptr__369(_369 ? _369->raw() : nullptr, _369 ? _369->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _376 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_373)));
  _checked_ptr_1<int> _ptr__376(_376 ? _376->raw() : nullptr,_376 ? _376->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _377 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _375,(int)2 ))));
  _checked_ptr_1<long long> _ptr__377(_377 ? _377->raw() : nullptr,_377 ? _377->size(0) : 0);
  long long _6802 = (long long)0;
  long long _6803 = _373;
  for (long long _378 = _6802; _378 < _6803; ++_378)
  {
    {
      _ptr__377[safe_add( _ptr__368[_378],(int)2 )] = safe_add( _ptr__377[safe_add( _ptr__368[_378],(int)2 )],(int)1 );
    }
  }
  int _6804 = (int)1;
  int _6805 = _375;
  for (int _379 = _6804; _379 < _6805; ++_379)
  {
    {
      _ptr__377[safe_add( _379,(int)1 )] = safe_add( _ptr__377[safe_add( _379,(int)1 )],_ptr__377[_379] );
    }
  }
  int _6806 = (int)0;
  int _6807 = (int)_373;
  for (int _380 = _6806; _380 < _6807; ++_380)
  {
    {
      int _381 = _ptr__368[_380];
      _ptr__376[_ptr__377[safe_add( _381,(int)1 )]] = _380;
      _ptr__377[safe_add( _381,(int)1 )] = safe_add( _ptr__377[safe_add( _381,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _382 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _374,(int)2 ))));
  _checked_ptr_1<long long> _ptr__382(_382 ? _382->raw() : nullptr,_382 ? _382->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _383 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_373)));
  _checked_ptr_1<int> _ptr__383(_383 ? _383->raw() : nullptr,_383 ? _383->size(0) : 0);
  {
    int _384 = (int)0;
    for(;(_384 < _373);++ _384)
    {
      {
        _ptr__382[safe_add( _ptr__367[_384],(int)2 )] = safe_add( _ptr__382[safe_add( _ptr__367[_384],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _385 = (int)1;
    for(;(_385 < _374);++ _385)
    {
      {
        _ptr__382[safe_add( _385,(int)1 )] = safe_add( _ptr__382[safe_add( _385,(int)1 )],_ptr__382[_385] );
      }
    }
  }
  {
    int _386 = (int)0;
    for(;(_386 < _375);++ _386)
    {
      {
        {
          long long _387 = _ptr__377[_386];
          for(;(_387 < _ptr__377[safe_add( _386,(int)1 )]);++ _387)
          {
            {
              int _388 = _ptr__367[_ptr__376[_387]];
              _ptr__383[_ptr__382[safe_add( _388,(int)1 )]] = _ptr__376[_387];
              _ptr__382[safe_add( _388,(int)1 )] = safe_add( _ptr__382[safe_add( _388,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _389 = (int)1;
  {
    int _390 = _ptr__367[_ptr__383[(int)0]];
    int _391 = _ptr__368[_ptr__383[(int)0]];
    {
      int _392 = (int)1;
      for(;(_392 < _373);++ _392)
      {
        {
          int _393 = _ptr__383[_392];
          if (((_390 != _ptr__367[_393]) || (_391 != _ptr__368[_393])))
          {
            {
              _390 = _ptr__367[_393];
              _391 = _ptr__368[_393];
              ++ _389;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _394 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_389)));
  _checked_ptr_1<int> _ptr__394(_394 ? _394->raw() : nullptr,_394 ? _394->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _395 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_389)));
  _checked_ptr_1<int> _ptr__395(_395 ? _395->raw() : nullptr,_395 ? _395->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _396 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_389)));
  _checked_ptr_1<double> _ptr__396(_396 ? _396->raw() : nullptr,_396 ? _396->size(0) : 0);
  {
    int _397 = _ptr__383[(int)0];
    _ptr__394[(int)0] = _ptr__367[_397];
    _ptr__395[(int)0] = _ptr__368[_397];
    _ptr__396[(int)0] = _ptr__369[_397];
  }
  int _398 = (int)1;
  int _6808 = (int)1;
  long long _6809 = _373;
  for (long long _399 = _6808; _399 < _6809; ++_399)
  {
    {
      int _400 = _ptr__383[_399];
      if (((_ptr__394[(_398 - (int)1)] == _ptr__367[_400]) && (_ptr__395[(_398 - (int)1)] == _ptr__368[_400])))
      {
        {
          _ptr__396[(_398 - (int)1)] = (_ptr__396[(_398 - (int)1)] + _ptr__369[_400]);
        }
      }
      else
      {
        {
          _ptr__394[_398] = _ptr__367[_400];
          _ptr__395[_398] = _ptr__368[_400];
          _ptr__396[_398] = _ptr__369[_400];
          ++ _398;
        }
      }
    }
  }
  ((*_370)((int)0)) = _394;
  ((*_371)((int)0)) = _395;
  ((*_372)((int)0)) = _396;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _401,    std::shared_ptr< monty::ndarray< int,1 > > _402) { mosek::fusion::p_CommonTools::argMSort(_401,_402); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _401,std::shared_ptr< monty::ndarray< int,1 > > _402){
  _checked_ptr_1<int> _ptr__401(_401 ? _401->raw() : nullptr, _401 ? _401->size(0) : 0);
  _checked_ptr_1<int> _ptr__402(_402 ? _402->raw() : nullptr, _402 ? _402->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _403 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_401)->size(0)))));
  _checked_ptr_1<int> _ptr__403(_403 ? _403->raw() : nullptr,_403 ? _403->size(0) : 0);
  bool _404 = false;
  {
    int _405 = (int)1;
    for(;(_405 < (int)((_401)->size(0)));_405 *= (int)2)
    {
      {
        _404 = (!_404);
        int _6810 = (int)0;
        int _6811 = (int)((_401)->size(0));
        int _6812 = safe_mul( _405,(int)2 );
        for (int _406 = _6810; _406 < _6811; _406 += _6812)
        {
          {
            if (_404)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_401,_403,_402,_406,safe_add( _406,_405 ),safe_add( _406,safe_mul( (int)2,_405 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_403,_401,_402,_406,safe_add( _406,_405 ),safe_add( _406,safe_mul( (int)2,_405 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_404)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_403,(int)0,_401,(int)0,(int)((_401)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _407,std::shared_ptr< monty::ndarray< int,1 > > _408,std::shared_ptr< monty::ndarray< int,1 > > _409,int _410,int _411,int _412){
  _checked_ptr_1<int> _ptr__407(_407 ? _407->raw() : nullptr, _407 ? _407->size(0) : 0);
  _checked_ptr_1<int> _ptr__408(_408 ? _408->raw() : nullptr, _408 ? _408->size(0) : 0);
  _checked_ptr_1<int> _ptr__409(_409 ? _409->raw() : nullptr, _409 ? _409->size(0) : 0);
  int _6813;
  bool _6814 = (_412 > (int)((_407)->size(0)));
  if (_6814)
  {
    _6813 = (int)((_407)->size(0));
  }
  else
  {
    _6813 = _412;
  }
  int _413 = _6813;
  int _6815;
  bool _6816 = (_411 > _413);
  if (_6816)
  {
    _6815 = _413;
  }
  else
  {
    _6815 = _411;
  }
  int _414 = _6815;
  if ((_414 == _413))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_407,_410,_408,_410,(_414 - _410));
    }
  }
  else
  {
    {
      int _415 = _410;
      int _416 = _414;
      int _417;
      {
        _417 = _410;
        for(;((_415 < _414) && (_416 < _413));++ _417)
        {
          {
            if ((_ptr__409[_ptr__407[_415]] < _ptr__409[_ptr__407[_416]]))
            {
              {
                _ptr__408[_417] = _ptr__407[_415];
                ++ _415;
              }
            }
            else
            {
              {
                _ptr__408[_417] = _ptr__407[_416];
                ++ _416;
              }
            }
          }
        }
      }
      while ( (_415 < _414) )
      {
        {
          _ptr__408[_417] = _ptr__407[_415];
          ++ _415;
          ++ _417;
        }
      }
      while ( (_416 < _413) )
      {
        {
          _ptr__408[_417] = _ptr__407[_416];
          ++ _416;
          ++ _417;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _418,    std::shared_ptr< monty::ndarray< long long,1 > > _419,    std::shared_ptr< monty::ndarray< long long,1 > > _420,    long long _421,    long long _422) { mosek::fusion::p_CommonTools::argQsort(_418,_419,_420,_421,_422); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _418,std::shared_ptr< monty::ndarray< long long,1 > > _419,std::shared_ptr< monty::ndarray< long long,1 > > _420,long long _421,long long _422){
  _checked_ptr_1<long long> _ptr__418(_418 ? _418->raw() : nullptr, _418 ? _418->size(0) : 0);
  _checked_ptr_1<long long> _ptr__419(_419 ? _419->raw() : nullptr, _419 ? _419->size(0) : 0);
  _checked_ptr_1<long long> _ptr__420(_420 ? _420->raw() : nullptr, _420 ? _420->size(0) : 0);
  if ((NULL == _420.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_418,_419,_421,_422);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_418,_419,_420,_421,_422);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _423,    std::shared_ptr< monty::ndarray< int,1 > > _424,    std::shared_ptr< monty::ndarray< int,1 > > _425,    long long _426,    long long _427) { mosek::fusion::p_CommonTools::argQsort(_423,_424,_425,_426,_427); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _423,std::shared_ptr< monty::ndarray< int,1 > > _424,std::shared_ptr< monty::ndarray< int,1 > > _425,long long _426,long long _427){
  _checked_ptr_1<long long> _ptr__423(_423 ? _423->raw() : nullptr, _423 ? _423->size(0) : 0);
  _checked_ptr_1<int> _ptr__424(_424 ? _424->raw() : nullptr, _424 ? _424->size(0) : 0);
  _checked_ptr_1<int> _ptr__425(_425 ? _425->raw() : nullptr, _425 ? _425->size(0) : 0);
  if ((NULL == _425.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_423,_424,_426,_427);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_423,_424,_425,_426,_427);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _428,    int _429,    int _430,    int _431){ return new mosek::fusion::SolutionStruct(_428,_429,_430,_431); }mosek::fusion::SolutionStruct::SolutionStruct  (int _428,    int _429,    int _430,    int _431) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_428,_429,_430,_431); }void mosek::fusion::p_SolutionStruct::_initialize  (int _428,    int _429,    int _430,    int _431){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _428;
    sol_numcon = _429;
    sol_numcone = _430;
    sol_numbarvar = _431;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_428 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
      }
    }
    {}
    if ((_431 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
    if ((_429 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_429)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_429)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_429)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_429)));
      }
    }
    {}
    if ((_430 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _432){ return new mosek::fusion::SolutionStruct(_432); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _432) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_432); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _432){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_432)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_432)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_432)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_432)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_432)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_432)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_432)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_432)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_432)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _6817;
    bool _6818 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->xc.get());
    if (_6818)
    {
      _6817 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->xc);
    }
    else
    {
      _6817 = nullptr;
    }
    xc = _6817;
    std::shared_ptr< monty::ndarray< double,1 > > _6819;
    bool _6820 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->xx.get());
    if (_6820)
    {
      _6819 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->xx);
    }
    else
    {
      _6819 = nullptr;
    }
    xx = _6819;
    std::shared_ptr< monty::ndarray< double,1 > > _6821;
    bool _6822 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->yx.get());
    if (_6822)
    {
      _6821 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->yx);
    }
    else
    {
      _6821 = nullptr;
    }
    yx = _6821;
    std::shared_ptr< monty::ndarray< double,1 > > _6823;
    bool _6824 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->slc.get());
    if (_6824)
    {
      _6823 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->slx);
    }
    else
    {
      _6823 = nullptr;
    }
    slc = _6823;
    std::shared_ptr< monty::ndarray< double,1 > > _6825;
    bool _6826 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->suc.get());
    if (_6826)
    {
      _6825 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->sux);
    }
    else
    {
      _6825 = nullptr;
    }
    suc = _6825;
    std::shared_ptr< monty::ndarray< double,1 > > _6827;
    bool _6828 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->y.get());
    if (_6828)
    {
      _6827 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->y);
    }
    else
    {
      _6827 = nullptr;
    }
    y = _6827;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _6829;
    bool _6830 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->slx.get());
    if (_6830)
    {
      _6829 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->slx);
    }
    else
    {
      _6829 = nullptr;
    }
    slx = _6829;
    std::shared_ptr< monty::ndarray< double,1 > > _6831;
    bool _6832 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->sux.get());
    if (_6832)
    {
      _6831 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->sux);
    }
    else
    {
      _6831 = nullptr;
    }
    sux = _6831;
    std::shared_ptr< monty::ndarray< double,1 > > _6833;
    bool _6834 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_432)->snx.get());
    if (_6834)
    {
      _6833 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_432)->snx);
    }
    else
    {
      _6833 = nullptr;
    }
    snx = _6833;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _433,int _434,int _435,int _436) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_433,_434,_435,_436); }void mosek::fusion::p_SolutionStruct::resize(int _433,int _434,int _435,int _436){
  if ((_436 < (int)0))
  {
    {
    }
  }
  else if((_436 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _436;
    }
  }
  else if((_436 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _437;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _436,(int)100 )))
      {
        {
          _437 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _437 = safe_add( _436,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_437);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_437);
      sol_numbarvar = _437;
    }
  }
  if ((_433 < (int)0))
  {
    {
    }
  }
  else if((_433 <= sol_numvar))
  {
    {
      sol_numvar = _433;
    }
  }
  else if((_433 <= (int)((xx)->size(0))))
  {
    {
      int _6835 = sol_numvar;
      int _6836 = _433;
      for (int _438 = _6835; _438 < _6836; ++_438)
      {
        {
          ((*slx)(_438)) = 0.0;
          ((*sux)(_438)) = 0.0;
          ((*xx)(_438)) = 0.0;
          ((*yx)(_438)) = 0.0;
        }
      }
      sol_numvar = _433;
    }
  }
  else
  {
    {
      int _439;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _433,(int)100 )))
      {
        {
          _439 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _439 = safe_add( _433,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _440 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_439)));
      _checked_ptr_1<double> _ptr__440(_440 ? _440->raw() : nullptr,_440 ? _440->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_440,(int)0,(int)((slx)->size(0)));
      slx = _440;
      std::shared_ptr< monty::ndarray< double,1 > > _441 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_439)));
      _checked_ptr_1<double> _ptr__441(_441 ? _441->raw() : nullptr,_441 ? _441->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_441,(int)0,(int)((sux)->size(0)));
      sux = _441;
      std::shared_ptr< monty::ndarray< double,1 > > _442 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_439)));
      _checked_ptr_1<double> _ptr__442(_442 ? _442->raw() : nullptr,_442 ? _442->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_442,(int)0,(int)((xx)->size(0)));
      xx = _442;
      std::shared_ptr< monty::ndarray< double,1 > > _443 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_439)));
      _checked_ptr_1<double> _ptr__443(_443 ? _443->raw() : nullptr,_443 ? _443->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_443,(int)0,(int)((yx)->size(0)));
      yx = _443;
      {
        int _444 = sol_numvar;
        for(;(_444 < _433);++ _444)
        {
          {
            ((*slx)(_444)) = 0.0;
            ((*sux)(_444)) = 0.0;
            ((*xx)(_444)) = 0.0;
          }
        }
      }
      sol_numvar = _433;
    }
  }
  if ((_434 < (int)0))
  {
    {
    }
  }
  else if((_434 <= sol_numcon))
  {
    {
      sol_numcon = _434;
    }
  }
  else if((_434 <= (int)((xx)->size(0))))
  {
    {
      int _6837 = sol_numcon;
      int _6838 = _434;
      for (int _445 = _6837; _445 < _6838; ++_445)
      {
        {
          ((*slc)(_445)) = 0.0;
          ((*suc)(_445)) = 0.0;
          ((*xc)(_445)) = 0.0;
          ((*y)(_445)) = 0.0;
        }
      }
      sol_numcon = _434;
    }
  }
  else
  {
    {
      int _446;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _434,(int)100 )))
      {
        {
          _446 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _446 = safe_add( _434,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _447 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_446)));
      _checked_ptr_1<double> _ptr__447(_447 ? _447->raw() : nullptr,_447 ? _447->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_447,(int)0,(int)((slc)->size(0)));
      slc = _447;
      std::shared_ptr< monty::ndarray< double,1 > > _448 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_446)));
      _checked_ptr_1<double> _ptr__448(_448 ? _448->raw() : nullptr,_448 ? _448->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_448,(int)0,(int)((suc)->size(0)));
      suc = _448;
      std::shared_ptr< monty::ndarray< double,1 > > _449 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_446)));
      _checked_ptr_1<double> _ptr__449(_449 ? _449->raw() : nullptr,_449 ? _449->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_449,(int)0,(int)((xc)->size(0)));
      xc = _449;
      std::shared_ptr< monty::ndarray< double,1 > > _450 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_446)));
      _checked_ptr_1<double> _ptr__450(_450 ? _450->raw() : nullptr,_450 ? _450->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_450,(int)0,(int)((y)->size(0)));
      y = _450;
      int _6839 = sol_numcon;
      int _6840 = _434;
      for (int _451 = _6839; _451 < _6840; ++_451)
      {
        {
          ((*slc)(_451)) = 0.0;
          ((*suc)(_451)) = 0.0;
          ((*xc)(_451)) = 0.0;
          ((*y)(_451)) = 0.0;
        }
      }
      sol_numcon = _434;
    }
  }
  if ((_435 < (int)0))
  {
    {
    }
  }
  else if((_435 <= sol_numcone))
  {
    {
      sol_numcone = _435;
    }
  }
  else if((_435 <= (int)((xx)->size(0))))
  {
    {
      int _6841 = sol_numcone;
      int _6842 = _435;
      for (int _452 = _6841; _452 < _6842; ++_452)
      {
        {
          ((*snx)(_452)) = 0.0;
        }
      }
      sol_numcone = _435;
    }
  }
  else
  {
    {
      int _453;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _435,(int)100 )))
      {
        {
          _453 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _453 = safe_add( _435,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _454 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_453)));
      _checked_ptr_1<double> _ptr__454(_454 ? _454->raw() : nullptr,_454 ? _454->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_454,(int)0,(int)((snx)->size(0)));
      snx = _454;
      {
        int _455 = sol_numcone;
        for(;(_455 < _435);++ _455)
        {
          {
            ((*snx)(_455)) = 0.0;
          }
        }
      }
      sol_numcone = _435;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _456) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_456); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _456){
  return isAcceptable(dstatus,_456);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _457) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_457); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _457){
  return isAcceptable(pstatus,_457);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _458,mosek::fusion::AccSolutionStatus _459){
  if ((_459 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_459 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_458 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_459 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_458 == ::mosek::fusion::SolutionStatus::Optimal) || (_458 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_459 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_458 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< double,1 > > _462,    std::shared_ptr< monty::ndarray< double,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< int,1 > > _465,    std::shared_ptr< monty::ndarray< int,1 > > _466){ return new mosek::fusion::ConNZStruct(_460,_461,_462,_463,_464,_465,_466); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< double,1 > > _462,    std::shared_ptr< monty::ndarray< double,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< int,1 > > _465,    std::shared_ptr< monty::ndarray< int,1 > > _466) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_460,_461,_462,_463,_464,_465,_466); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< double,1 > > _462,    std::shared_ptr< monty::ndarray< double,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< int,1 > > _465,    std::shared_ptr< monty::ndarray< int,1 > > _466){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__460(_460 ? _460->raw() : nullptr, _460 ? _460->size(0) : 0);
    _checked_ptr_1<int> _ptr__461(_461 ? _461->raw() : nullptr, _461 ? _461->size(0) : 0);
    _checked_ptr_1<double> _ptr__462(_462 ? _462->raw() : nullptr, _462 ? _462->size(0) : 0);
    _checked_ptr_1<double> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    _checked_ptr_1<int> _ptr__464(_464 ? _464->raw() : nullptr, _464 ? _464->size(0) : 0);
    _checked_ptr_1<int> _ptr__465(_465 ? _465->raw() : nullptr, _465 ? _465->size(0) : 0);
    _checked_ptr_1<int> _ptr__466(_466 ? _466->raw() : nullptr, _466 ? _466->size(0) : 0);
    ptrb = _460;
    subj = _461;
    cof = _462;
    bfix = _463;
    barsubi = _464;
    barsubj = _465;
    barmidx = _466;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _467){ return new mosek::fusion::Model(_467); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _467) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_467); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _467){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_467);
    monty::rc_ptr< ::mosek::fusion::Model > _468 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_467)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_467)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_467)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_467)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6843;
    for (int _469 = (int)0, _6844 = (int)((mosek::fusion::p_Model::_get_impl(_467)->vars)->size(0)); _469 < _6844 ; ++_469)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6845;
      bool _6846 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_467)->vars)(_469)).get());
      if (_6846)
      {
        _6845 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_467)->vars)(_469)).get())->__mosek_2fusion_2ModelVariable__clone(_468);
      }
      else
      {
        _6845 = nullptr;
      }
      _6843.push_back(_6845);
    }
    auto _6847 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6843.size()),_6843.begin(),_6843.end()));
    vars = _6847;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_467)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_467)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_467)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6848;
    for (int _470 = (int)0, _6849 = (int)((mosek::fusion::p_Model::_get_impl(_467)->barvars)->size(0)); _470 < _6849 ; ++_470)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6850;
      bool _6851 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_467)->barvars)(_470)).get());
      if (_6851)
      {
        _6850 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_467)->barvars)(_470)).get())->__mosek_2fusion_2ModelVariable__clone(_468);
      }
      else
      {
        _6850 = nullptr;
      }
      _6848.push_back(_6850);
    }
    auto _6852 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6848.size()),_6848.begin(),_6848.end()));
    barvars = _6852;
    var_map = mosek::fusion::p_Model::_get_impl(_467)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_type);
    natconmap_efix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_efix);
    natconmap_lb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_lb);
    natconmap_ub = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_467)->natconmap_ub);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_467)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6853;
    for (int _471 = (int)0, _6854 = (int)((mosek::fusion::p_Model::_get_impl(_467)->cons)->size(0)); _471 < _6854 ; ++_471)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _6855;
      bool _6856 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_467)->cons)(_471)).get());
      if (_6856)
      {
        _6855 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_467)->cons)(_471)).get())->__mosek_2fusion_2ModelConstraint__clone(_468);
      }
      else
      {
        _6855 = nullptr;
      }
      _6853.push_back(_6855);
    }
    auto _6857 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6853.size()),_6853.begin(),_6853.end()));
    cons = _6857;
    con_map = mosek::fusion::p_Model::_get_impl(_467)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_467)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _472){ return new mosek::fusion::Model(_472); }mosek::fusion::Model::Model  (const std::string &  _472) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_472); }void mosek::fusion::p_Model::_initialize  (const std::string &  _472){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_472,std::string (""));
    model_name = _472;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6858;
    for (int _473 = (int)0, _6859 = (int)1024; _473 < _6859 ; ++_473)
    {
      _6858.push_back(nullptr);
    }
    auto _6860 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6858.size()),_6858.begin(),_6858.end()));
    vars = _6860;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_efix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_lb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_ub = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6861;
    for (int _474 = (int)0, _6862 = (int)1024; _474 < _6862 ; ++_474)
    {
      _6861.push_back(nullptr);
    }
    auto _6863 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6861.size()),_6861.begin(),_6861.end()));
    cons = _6863;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _475,std::shared_ptr< monty::ndarray< int,1 > > _476,std::shared_ptr< monty::ndarray< int,1 > > _477){
  _checked_ptr_1<int> _ptr__476(_476 ? _476->raw() : nullptr, _476 ? _476->size(0) : 0);
  _checked_ptr_1<int> _ptr__477(_477 ? _477->raw() : nullptr, _477 ? _477->size(0) : 0);
  return _475;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _478,const std::string & _479,std::shared_ptr< monty::ndarray< int,1 > > _480,std::shared_ptr< monty::ndarray< long long,1 > > _481){
  _checked_ptr_1<int> _ptr__478(_478 ? _478->raw() : nullptr, _478 ? _478->size(0) : 0);
  _checked_ptr_1<int> _ptr__480(_480 ? _480->raw() : nullptr, _480 ? _480->size(0) : 0);
  _checked_ptr_1<long long> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  task_format_con_names(_478,_479,_480,_481);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _482,const std::string & _483,std::shared_ptr< monty::ndarray< int,1 > > _484,std::shared_ptr< monty::ndarray< long long,1 > > _485){
  _checked_ptr_1<int> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  _checked_ptr_1<int> _ptr__484(_484 ? _484->raw() : nullptr, _484 ? _484->size(0) : 0);
  _checked_ptr_1<long long> _ptr__485(_485 ? _485->raw() : nullptr, _485 ? _485->size(0) : 0);
  task_format_var_names(_482,_483,_484,_485);
}
void mosek::fusion::p_Model::varname(int _486,const std::string & _487){
  task_var_name(_486,_487);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _488,std::shared_ptr< monty::ndarray< int,1 > > _489){
  _checked_ptr_1<int> _ptr__489(_489 ? _489->raw() : nullptr, _489 ? _489->size(0) : 0);
  int _490 = ((*natbarvarmap_ptr)(_488));
  int _491 = ((*natbarvarmap_num)(_488));
  int _6864 = (int)0;
  int _6865 = _491;
  for (int _492 = _6864; _492 < _6865; ++_492)
  {
    {
      _ptr__489[_492] = safe_add( _490,_492 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _493,std::shared_ptr< monty::ndarray< long long,1 > > _494){
  _checked_ptr_1<long long> _ptr__494(_494 ? _494->raw() : nullptr, _494 ? _494->size(0) : 0);
  int _495 = ((*natbarvarmap_ptr)(_493));
  int _496 = ((*natbarvarmap_num)(_493));
  int _497 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_493))));
  int _498 = (safe_mul( safe_mul( _496,_497 ),safe_add( _497,(int)1 ) ) / (int)2);
  long long _499 = ((*natbarvar_ptr)(_495));
  int _6866 = (int)0;
  int _6867 = _498;
  for (int _500 = _6866; _500 < _6867; ++_500)
  {
    {
      _ptr__494[_500] = safe_add( _499,_500 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _501,int _502){
  int _503 = (int)((natbarvar_idx)->size(0));
  int _504 = task_numbarvar();
  int _505 = (safe_mul( _502,safe_add( _502,(int)1 ) ) / (int)2);
  int _506 = safe_mul( _501,_505 );
  if ((safe_add( natbarvar_numbarvarelm,_506 ) >= _503))
  {
    {
      if ((_506 < _503))
      {
        {
          _506 = _503;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _503,_506 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _503,_506 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _503,_506 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _6868;
      bool _6869 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_6869)
      {
        _6868 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _6868 = (int)32;
      }
      int _507 = _6868;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_507);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _507,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _508 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_507)));
      int _6870 = (int)0;
      int _6871 = (int)((barvars)->size(0));
      for (int _509 = _6870; _509 < _6871; ++_509)
      {
        {
          ((*_508)(_509)) = ((*barvars)(_509));
        }
      }
      barvars = _508;
    }
  }
  {}
  if ((safe_add( _504,_501 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _6872;
      bool _6873 = (safe_add( _504,_501 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_6873)
      {
        _6872 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _6872 = safe_add( _504,_501 );
      }
      int _510 = _6872;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_510);
    }
  }
  {}
  if ((safe_add( _504,_501 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _6874;
      bool _6875 = (_501 > (int)((natbarvar_ptr)->size(0)));
      if (_6875)
      {
        _6874 = _501;
      }
      else
      {
        _6874 = (int)((natbarvar_ptr)->size(0));
      }
      int _511 = _6874;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_511 ),(int)1 ));
    }
  }
  {}
  int _6876 = (int)0;
  int _6877 = _501;
  for (int _512 = _6876; _512 < _6877; ++_512)
  {
    {
      ((*natbarvar_dim)(safe_add( _504,_512 ))) = _502;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _501;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_501 );
  int _513 = task_append_barvar(_502,_501);
  int _514 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _515 = ((*natbarvar_ptr)(_504));
    int _6878 = (int)0;
    int _6879 = _502;
    for (int _516 = _6878; _516 < _6879; ++_516)
    {
      {
        int _6880 = _516;
        int _6881 = _502;
        for (int _517 = _6880; _517 < _6881; ++_517)
        {
          {
            int _6882 = (int)0;
            int _6883 = _501;
            for (int _518 = _6882; _518 < _6883; ++_518)
            {
              {
                ((*natbarvar_idx)(safe_add( _515,safe_mul( _518,_505 ) ))) = safe_add( _514,_518 );
                ((*natbarvar_i)(safe_add( _515,safe_mul( _518,_505 ) ))) = _517;
                ((*natbarvar_j)(safe_add( _515,safe_mul( _518,_505 ) ))) = _516;
              }
            }
            ++ _515;
          }
        }
      }
    }
    int _6884 = (int)0;
    int _6885 = _501;
    for (int _519 = _6884; _519 < _6885; ++_519)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _514,_519 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _514,_519 ))),_505 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _501,_505 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _520){
  int _521 = natvarmap->alloc(_520);
  int _522 = safe_add( natvarmap->maxidx(_521),(int)1 );
  int _523 = natvarmap->capacity();
  int _524 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _523))
  {
    {
      int _525 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_523);
      int _6886 = _525;
      int _6887 = _523;
      for (int _526 = _6886; _526 < _6887; ++_526)
      {
        {
          ((*natvarmap_idx)(_526)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_523);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _524))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_524);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _527 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_524)));
      int _6888 = (int)0;
      int _6889 = (int)((vars)->size(0));
      for (int _528 = _6888; _528 < _6889; ++_528)
      {
        {
          ((*_527)(_528)) = ((*vars)(_528));
        }
      }
      int _6890 = (int)((vars)->size(0));
      int _6891 = (int)((_527)->size(0));
      for (int _529 = _6890; _529 < _6891; ++_529)
      {
        {
          ((*_527)(_529)) = nullptr;
        }
      }
      vars = _527;
    }
  }
  {}
  if ((task_numvar() < _522))
  {
    {
      task_append_var((_522 - task_numvar()));
    }
  }
  {}
  return _521;
}
int mosek::fusion::p_Model::natconmap_alloc(int _530){
  int _531 = natconmap->alloc(_530);
  int _532 = safe_add( natconmap->maxidx(_531),(int)1 );
  int _533 = natconmap->capacity();
  int _534 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _533))
  {
    {
      int _535 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_533);
      int _6892 = _535;
      int _6893 = _533;
      for (int _536 = _6892; _536 < _6893; ++_536)
      {
        {
          ((*natconmap_idx)(_536)) = (-(int)1);
        }
      }
      natconmap_efix = ::mosek::fusion::p_CommonTools::resize(natconmap_efix,_533);
      natconmap_lb = ::mosek::fusion::p_CommonTools::resize(natconmap_lb,_533);
      natconmap_ub = ::mosek::fusion::p_CommonTools::resize(natconmap_ub,_533);
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_533);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_533);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _534))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_534);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _537 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_534)));
      int _6894 = (int)0;
      int _6895 = (int)((cons)->size(0));
      for (int _538 = _6894; _538 < _6895; ++_538)
      {
        {
          ((*_537)(_538)) = ((*cons)(_538));
        }
      }
      int _6896 = (int)((cons)->size(0));
      int _6897 = _534;
      for (int _539 = _6896; _539 < _6897; ++_539)
      {
        {
          ((*_537)(_539)) = nullptr;
        }
      }
      cons = _537;
    }
  }
  {}
  if ((_532 > task_numcon()))
  {
    {
      task_append_con((_532 - task_numcon()));
    }
  }
  {}
  return _531;
}
int mosek::fusion::p_Model::natconemap_alloc(int _540){
  int _541 = natconemap->alloc(_540);
  int _542 = safe_add( natconemap->maxidx(_541),(int)1 );
  if ((_542 > task_numcone()))
  {
    {
      task_append_zerocones((_542 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _541;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _543){
  _checked_ptr_1<long long> _ptr__543(_543 ? _543->raw() : nullptr, _543 ? _543->size(0) : 0);
  int _544 = (int)0;
  int _6898 = (int)0;
  int _6899 = (int)((_543)->size(0));
  for (int _545 = _6898; _545 < _6899; ++_545)
  {
    {
      if ((_ptr__543[_545] > (int)0))
      {
        {
          ++ _544;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _546 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_544)));
  _checked_ptr_1<int> _ptr__546(_546 ? _546->raw() : nullptr,_546 ? _546->size(0) : 0);
  int _547 = (int)0;
  int _6900 = (int)0;
  int _6901 = (int)((_543)->size(0));
  for (int _548 = _6900; _548 < _6901; ++_548)
  {
    {
      if ((_ptr__543[_548] > (int)0))
      {
        {
          _ptr__546[_547] = (int)(_ptr__543[_548] - (int)1);
          ++ _547;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_546);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _549){
  _checked_ptr_1<long long> _ptr__549(_549 ? _549->raw() : nullptr, _549 ? _549->size(0) : 0);
  int _550 = (int)0;
  int _6902 = (int)0;
  int _6903 = (int)((_549)->size(0));
  for (int _551 = _6902; _551 < _6903; ++_551)
  {
    {
      if ((_ptr__549[_551] > (int)0))
      {
        {
          ++ _550;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _552 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_550)));
  _checked_ptr_1<int> _ptr__552(_552 ? _552->raw() : nullptr,_552 ? _552->size(0) : 0);
  int _553 = (int)0;
  int _6904 = (int)0;
  int _6905 = (int)((_549)->size(0));
  for (int _554 = _6904; _554 < _6905; ++_554)
  {
    {
      if ((_ptr__549[_554] > (int)0))
      {
        {
          _ptr__552[_553] = (int)(_ptr__549[_554] - (int)1);
          ++ _553;
        }
      }
      {}
    }
  }
  task_var_putintlist(_552);
}
void mosek::fusion::Model::putlicensewait  ( bool _555) { mosek::fusion::p_Model::putlicensewait(_555); }void mosek::fusion::p_Model::putlicensewait(bool _555){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_555);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _556) { mosek::fusion::p_Model::putlicensepath(_556); }void mosek::fusion::p_Model::putlicensepath(const std::string & _556){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_556);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _557) { mosek::fusion::p_Model::putlicensecode(_557); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _557){
  _checked_ptr_1<int> _ptr__557(_557 ? _557->raw() : nullptr, _557 ? _557->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_557);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _6906 = (int)0;
  int _6907 = (int)((vars)->size(0));
  for (int _558 = _6906; _558 < _6907; ++_558)
  {
    {
      ((*vars)(_558)) = nullptr;
    }
  }
  int _6908 = (int)0;
  int _6909 = (int)((cons)->size(0));
  for (int _559 = _6908; _559 < _6909; ++_559)
  {
    {
      ((*cons)(_559)) = nullptr;
    }
  }
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _560,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _561){
  if (((_560 < (int)0) || ((_560 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_560)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_560))))->elementName((long long)(((*natvarmap_idx)(_560))),_561);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintValues(bool _562,std::shared_ptr< monty::ndarray< int,1 > > _563,std::shared_ptr< monty::ndarray< double,1 > > _564,int _565) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_562,_563,_564,_565); }void mosek::fusion::p_Model::getConstraintValues(bool _562,std::shared_ptr< monty::ndarray< int,1 > > _563,std::shared_ptr< monty::ndarray< double,1 > > _564,int _565){
  _checked_ptr_1<int> _ptr__563(_563 ? _563->raw() : nullptr, _563 ? _563->size(0) : 0);
  _checked_ptr_1<double> _ptr__564(_564 ? _564->raw() : nullptr, _564 ? _564->size(0) : 0);
  int _566 = (int)((_563)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6910;
  bool _6911 = _562;
  if (_6911)
  {
    _6910 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6910 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _567 = _6910;
  _checked_ptr_1<double> _ptr__567(_567 ? _567->raw() : nullptr,_567 ? _567->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6912;
  bool _6913 = _562;
  if (_6913)
  {
    _6912 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6912 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _568 = _6912;
  _checked_ptr_1<double> _ptr__568(_568 ? _568->raw() : nullptr,_568 ? _568->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6914;
  bool _6915 = _562;
  if (_6915)
  {
    _6914 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6914 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _569 = _6914;
  _checked_ptr_1<double> _ptr__569(_569 ? _569->raw() : nullptr,_569 ? _569->size(0) : 0);
  int _6916 = (int)0;
  int _6917 = _566;
  for (int _570 = _6916; _570 < _6917; ++_570)
  {
    {
      long long _571 = ((*natconmap_slackidx)(_ptr__563[_570]));
      if ((_571 < (int)0))
      {
        {
          long long _572 = (-safe_add( _571,(int)1 ));
          _ptr__564[safe_add( _565,_570 )] = _ptr__568[_572];
        }
      }
      else if((_571 > (int)0))
      {
        {
          _ptr__564[safe_add( _565,_570 )] = _ptr__567[(_571 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__564[safe_add( _565,_570 )] = _ptr__569[_ptr__563[_570]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _573,std::shared_ptr< monty::ndarray< long long,1 > > _574,std::shared_ptr< monty::ndarray< double,1 > > _575,int _576) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_573,_574,_575,_576); }void mosek::fusion::p_Model::getVariableDuals(bool _573,std::shared_ptr< monty::ndarray< long long,1 > > _574,std::shared_ptr< monty::ndarray< double,1 > > _575,int _576){
  _checked_ptr_1<long long> _ptr__574(_574 ? _574->raw() : nullptr, _574 ? _574->size(0) : 0);
  _checked_ptr_1<double> _ptr__575(_575 ? _575->raw() : nullptr, _575 ? _575->size(0) : 0);
  int _577 = (int)((_574)->size(0));
  if (_573)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _578 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__578(_578 ? _578->raw() : nullptr,_578 ? _578->size(0) : 0);
      int _6918 = (int)0;
      int _6919 = _577;
      for (int _579 = _6918; _579 < _6919; ++_579)
      {
        {
          if ((_ptr__574[_579] > (int)0))
          {
            {
              _ptr__575[safe_add( _576,_579 )] = _ptr__578[(_ptr__574[_579] - (int)1)];
            }
          }
          else
          {
            {
              _ptr__575[safe_add( _576,_579 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _580 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__580(_580 ? _580->raw() : nullptr,_580 ? _580->size(0) : 0);
      int _6920 = (int)0;
      int _6921 = _577;
      for (int _581 = _6920; _581 < _6921; ++_581)
      {
        {
          if ((_ptr__574[_581] > (int)0))
          {
            {
              _ptr__575[safe_add( _576,_581 )] = (-_ptr__580[(_ptr__574[_581] - (int)1)]);
            }
          }
          else
          {
            {
              _ptr__575[safe_add( _576,_581 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _582,std::shared_ptr< monty::ndarray< long long,1 > > _583,std::shared_ptr< monty::ndarray< double,1 > > _584,int _585) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_582,_583,_584,_585); }void mosek::fusion::p_Model::getVariableValues(bool _582,std::shared_ptr< monty::ndarray< long long,1 > > _583,std::shared_ptr< monty::ndarray< double,1 > > _584,int _585){
  _checked_ptr_1<long long> _ptr__583(_583 ? _583->raw() : nullptr, _583 ? _583->size(0) : 0);
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr, _584 ? _584->size(0) : 0);
  int _586 = (int)((_583)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6922;
  bool _6923 = _582;
  if (_6923)
  {
    _6922 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6922 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _587 = _6922;
  _checked_ptr_1<double> _ptr__587(_587 ? _587->raw() : nullptr,_587 ? _587->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6924;
  bool _6925 = (natbarvar_numbarvarelm > (int)0);
  if (_6925)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _6926;
    bool _6927 = _582;
    if (_6927)
    {
      _6926 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _6926 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _6924 = _6926;
  }
  else
  {
    _6924 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _588 = _6924;
  _checked_ptr_1<double> _ptr__588(_588 ? _588->raw() : nullptr,_588 ? _588->size(0) : 0);
  int _6928 = (int)0;
  int _6929 = _586;
  for (int _589 = _6928; _589 < _6929; ++_589)
  {
    {
      if ((_ptr__583[_589] > (int)0))
      {
        {
          _ptr__584[safe_add( _585,_589 )] = _ptr__587[(_ptr__583[_589] - (int)1)];
        }
      }
      else if((_ptr__583[_589] < (int)0))
      {
        {
          long long _590 = (-safe_add( _ptr__583[_589],(int)1 ));
          _ptr__584[safe_add( _585,_589 )] = _ptr__588[_590];
        }
      }
      else
      {
        {
          _ptr__584[safe_add( _585,_589 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _591,std::shared_ptr< monty::ndarray< long long,1 > > _592,std::shared_ptr< monty::ndarray< double,1 > > _593) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_591,_592,_593); }void mosek::fusion::p_Model::setVariableValues(bool _591,std::shared_ptr< monty::ndarray< long long,1 > > _592,std::shared_ptr< monty::ndarray< double,1 > > _593){
  _checked_ptr_1<long long> _ptr__592(_592 ? _592->raw() : nullptr, _592 ? _592->size(0) : 0);
  _checked_ptr_1<double> _ptr__593(_593 ? _593->raw() : nullptr, _593 ? _593->size(0) : 0);
  if (_591)
  {
    {
      int _594 = (int)0;
      int _6930 = (int)0;
      int _6931 = (int)((_592)->size(0));
      for (int _595 = _6930; _595 < _6931; ++_595)
      {
        {
          if ((_ptr__592[_595] >= (int)0))
          {
            {
              ++ _594;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _596 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_594)));
      _checked_ptr_1<int> _ptr__596(_596 ? _596->raw() : nullptr,_596 ? _596->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6932;
      bool _6933 = (_594 == (int)((_592)->size(0)));
      if (_6933)
      {
        _6932 = _593;
      }
      else
      {
        _6932 = _593;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _597 = _6932;
      _checked_ptr_1<double> _ptr__597(_597 ? _597->raw() : nullptr,_597 ? _597->size(0) : 0);
      int _598 = (int)0;
      int _6934 = (int)0;
      int _6935 = (int)((_592)->size(0));
      for (int _599 = _6934; _599 < _6935; ++_599)
      {
        {
          if ((_ptr__592[_599] > (int)0))
          {
            {
              _ptr__596[_598] = (int)(_ptr__592[_599] - (int)1);
              ++ _598;
            }
          }
          {}
        }
      }
      setSolution_xx(_596,_597);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _6936 = (int)0;
  int _6937 = (int)((vars)->size(0));
  for (int _600 = _6936; _600 < _6937; ++_600)
  {
    {
      if ((NULL != ((*vars)(_600)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_600)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6938 = (int)0;
  int _6939 = (int)((barvars)->size(0));
  for (int _601 = _6938; _601 < _6939; ++_601)
  {
    {
      if ((NULL != ((*barvars)(_601)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_601)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6940 = (int)0;
  int _6941 = (int)((cons)->size(0));
  for (int _602 = _6940; _602 < _6941; ++_602)
  {
    {
      if ((NULL != ((*cons)(_602)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_602)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTask(const std::string & _603) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_603); }void mosek::fusion::p_Model::writeTask(const std::string & _603){
  _pubthis->flushNames();
  task_write(_603);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _604) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_604); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _604){
  return task_get_liinf(_604);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _605) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_605); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _605){
  return task_get_iinf(_605);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _606) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_606); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _606){
  return task_get_dinf(_606);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _607) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_607); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _607){
  task_setCallbackHandler(_607);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _608) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_608); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _608){
  task_setDataCallbackHandler(_608);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _609) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_609); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _609){
  task_setLogHandler(_609);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _610,double _611) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_610,_611); }void mosek::fusion::p_Model::setSolverParam(const std::string & _610,double _611){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_610,_611);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _612,int _613) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_612,_613); }void mosek::fusion::p_Model::setSolverParam(const std::string & _612,int _613){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_612,_613);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _614,const std::string & _615) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_614,_615); }void mosek::fusion::p_Model::setSolverParam(const std::string & _614,const std::string & _615){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_614,_615);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: solve(const std::string & _616,const std::string & _617) { mosek::fusion::p_Model::_get_impl(this)->solve(_616,_617); }void mosek::fusion::p_Model::solve(const std::string & _616,const std::string & _617){
  _pubthis->flushSolutions();
  task_solve(true,_616,_617);
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  _pubthis->flushSolutions();
  task_solve(false,std::string (""),std::string (""));
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _618){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _619 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _620 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_619)));
      _checked_ptr_1<double> _ptr__620(_620 ? _620->raw() : nullptr,_620 ? _620->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _622 = __mosek_2fusion_2Model__get_sol_cache(_618,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_622)->xx.get()))
          {
            {
              int _6942;
              bool _6943 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_622)->xx)->size(0)) <= _619);
              if (_6943)
              {
                _6942 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_622)->xx)->size(0));
              }
              else
              {
                _6942 = _619;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_622)->xx,(int)0,_620,(int)0,_6942);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _621)
      {
        {
        }
      }
      int _6944;
      bool _6945 = ((int)((initsol_xx)->size(0)) <= _619);
      if (_6945)
      {
        _6944 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _6944 = _619;
      }
      int _623 = _6944;
      int _6946 = (int)0;
      int _6947 = _623;
      for (int _624 = _6946; _624 < _6947; ++_624)
      {
        {
          if (((*initsol_xx_flag)(_624)))
          {
            {
              _ptr__620[_624] = ((*initsol_xx)(_624));
            }
          }
          {}
        }
      }
      task_putxx_slice(_618,(int)0,_619,_620);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _625,bool _626,bool _627){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _628 = nullptr;
  mosek::fusion::SolutionType _629 = _625;
  if ((_629 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _629 = solutionptr;
    }
  }
  {}
  if ((_629 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _628 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _628 = sol_bas;
        }
      }
      else
      {
        {
          _628 = sol_itr;
        }
      }
    }
  }
  else if((_629 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _628 = sol_itr;
    }
  }
  else if((_629 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _628 = sol_bas;
    }
  }
  else if((_629 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _628 = sol_itg;
    }
  }
  {}
  if ((NULL == _628.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_627 || ((_626 && _628->isPrimalAcceptable(acceptable_sol)) || ((!_626) && _628->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _628;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _630 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _631 = mosek::fusion::p_SolutionStruct::_get_impl(_628)->pstatus;
          mosek::fusion::ProblemStatus _632 = mosek::fusion::p_SolutionStruct::_get_impl(_628)->probstatus;
          if ((!_626))
          {
            {
              _631 = mosek::fusion::p_SolutionStruct::_get_impl(_628)->dstatus;
            }
          }
          {}
          _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_631 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_631 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_631 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_631 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_631 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_631 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but at least "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_628 == sol_itr))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_628 == sol_bas))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_628 == sol_itg))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_632 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_632 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _630->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_630->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _633,bool _634){
  return __mosek_2fusion_2Model__get_sol_cache(_633,_634,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _635,std::shared_ptr< monty::ndarray< double,1 > > _636){
  _checked_ptr_1<int> _ptr__635(_635 ? _635->raw() : nullptr, _635 ? _635->size(0) : 0);
  _checked_ptr_1<double> _ptr__636(_636 ? _636->raw() : nullptr, _636 ? _636->size(0) : 0);
  ensure_initsol_xx();
  int _6948 = (int)0;
  int _6949 = (int)((_635)->size(0));
  for (int _637 = _6948; _637 < _6949; ++_637)
  {
    {
      ((*initsol_xx)(_ptr__635[_637])) = _ptr__636[_637];
      ((*initsol_xx_flag)(_ptr__635[_637])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _638 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_638)));
      std::vector<bool> _6950;
      for (int _639 = (int)0, _6951 = _638; _639 < _6951 ; ++_639)
      {
        _6950.push_back(false);
      }
      auto _6952 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6950.size()),_6950.begin(),_6950.end()));
      initsol_xx_flag = _6952;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _638))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _640 = initsol_xx;
      _checked_ptr_1<double> _ptr__640(_640 ? _640->raw() : nullptr,_640 ? _640->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _641 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_638)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_638)));
      ::mosek::fusion::Utils::Tools::arraycopy(_640,(int)0,initsol_xx,(int)0,_638);
      int _6953 = (int)0;
      int _6954 = _638;
      for (int _642 = _6953; _642 < _6954; ++_642)
      {
        {
          ((*initsol_xx_flag)(_642)) = ((*_641)(_642));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _643){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_643,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _644){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_644,true))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _645){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_645,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _646){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_646,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _647){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_647,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _648){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_648,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _649){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_649,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _650){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_650,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _651){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_651,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _652){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_652,false))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _653){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_653,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _654) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_654); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _654){
  solutionptr = _654;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _655) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_655); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _655){
  acceptable_sol = _655;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _656) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_656); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _656){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _657 = nullptr;
  if ((_656 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _657 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _657 = sol_bas;
        }
      }
      else
      {
        {
          _657 = sol_itr;
        }
      }
    }
  }
  else if((_656 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _657 = sol_itr;
    }
  }
  else if((_656 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _657 = sol_bas;
    }
  }
  else if((_656 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _657 = sol_itg;
    }
  }
  {}
  if ((NULL == _657.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_657)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _658) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_658); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _658){
  return getSolutionStatus(_658,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _659) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_659); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _659){
  return getSolutionStatus(_659,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _660,bool _661){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _663 = __mosek_2fusion_2Model__get_sol_cache(_660,_661,true);
      if (_661)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_663)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_663)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _662)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _664,monty::rc_ptr< ::mosek::fusion::Expression > _665){
  _checked_ptr_1<int> _ptr__664(_664 ? _664->raw() : nullptr, _664 ? _664->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_665)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _666 = ws->popi32();
  int _667 = ws->popi32(_666);
  int _668 = ws->popi32();
  int _669 = ws->popi32();
  bool _670 = ((int)0 != ws->popi32());
  int _671 = ws->popi32(safe_add( _668,(int)1 ));
  int _6955;
  bool _6956 = _670;
  if (_6956)
  {
    _6955 = ws->popi64(_668);
  }
  else
  {
    _6955 = (int)0;
  }
  int _672 = _6955;
  int _673 = ws->popi64(_669);
  int _674 = ws->popf64(_668);
  int _675 = ws->popf64(_669);
  std::shared_ptr< monty::ndarray< int,1 > > _676 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__676(_676 ? _676->raw() : nullptr,_676 ? _676->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _677 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__677(_677 ? _677->raw() : nullptr,_677 ? _677->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _678 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__678(_678 ? _678->raw() : nullptr,_678 ? _678->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _679 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _668,(int)1 ))));
  _checked_ptr_1<long long> _ptr__679(_679 ? _679->raw() : nullptr,_679 ? _679->size(0) : 0);
  int _6957 = (int)0;
  int _6958 = _668;
  for (int _680 = _6957; _680 < _6958; ++_680)
  {
    {
      int _6959 = _ptr__676[safe_add( _671,_680 )];
      int _6960 = _ptr__676[safe_add( safe_add( _671,_680 ),(int)1 )];
      for (int _681 = _6959; _681 < _6960; ++_681)
      {
        {
          if ((_ptr__677[safe_add( _673,_681 )] > (int)0))
          {
            {
              ++ _ptr__679[safe_add( _680,(int)1 )];
            }
          }
          {}
        }
      }
    }
  }
  int _6961 = (int)0;
  int _6962 = _668;
  for (int _682 = _6961; _682 < _6962; ++_682)
  {
    {
      _ptr__679[safe_add( _682,(int)1 )] += _ptr__679[_682];
    }
  }
  long long _683 = _ptr__679[_668];
  std::shared_ptr< monty::ndarray< int,1 > > _684 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_683)));
  _checked_ptr_1<int> _ptr__684(_684 ? _684->raw() : nullptr,_684 ? _684->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _685 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_683)));
  _checked_ptr_1<double> _ptr__685(_685 ? _685->raw() : nullptr,_685 ? _685->size(0) : 0);
  int _686 = (int)0;
  int _6963 = (int)0;
  int _6964 = _668;
  for (int _687 = _6963; _687 < _6964; ++_687)
  {
    {
      int _6965 = _ptr__676[safe_add( _671,_687 )];
      int _6966 = _ptr__676[safe_add( safe_add( _671,_687 ),(int)1 )];
      for (int _688 = _6965; _688 < _6966; ++_688)
      {
        {
          if ((_ptr__677[safe_add( _673,_688 )] > (int)0))
          {
            {
              _ptr__684[_686] = (int)(_ptr__677[safe_add( _673,_688 )] - (int)1);
              _ptr__685[_686] = _ptr__678[safe_add( _675,_688 )];
              ++ _686;
            }
          }
          {}
        }
      }
    }
  }
  task_putarowlist(_664,_679,_684,_685);
  std::vector<int> _6967;
  for (int _689 = (int)0, _6968 = _668; _689 < _6968 ; ++_689)
  {
    _6967.push_back(bfixidx);
  }
  auto _6969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6967.size()),_6967.begin(),_6967.end()));
  std::vector<double> _6970;
  for (int _690 = (int)0, _6971 = _668; _690 < _6971 ; ++_690)
  {
    _6970.push_back(_ptr__678[safe_add( _674,_690 )]);
  }
  auto _6972 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6970.size()),_6970.begin(),_6970.end()));
  task_putaijlist(_664,_6969,_6972,(long long)(_668));
  int _691 = (int)0;
  int _6973 = (int)0;
  int _6974 = _668;
  for (int _692 = _6973; _692 < _6974; ++_692)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__664[_692])) > (int)0))
      {
        {
          ++ _691;
        }
      }
      {}
    }
  }
  if ((_691 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _693 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_691)));
      _checked_ptr_1<int> _ptr__693(_693 ? _693->raw() : nullptr,_693 ? _693->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _694 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_691)));
      _checked_ptr_1<int> _ptr__694(_694 ? _694->raw() : nullptr,_694 ? _694->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _695 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_691)));
      _checked_ptr_1<double> _ptr__695(_695 ? _695->raw() : nullptr,_695 ? _695->size(0) : 0);
      int _696 = (int)0;
      int _6975 = (int)0;
      int _6976 = _668;
      for (int _697 = _6975; _697 < _6976; ++_697)
      {
        {
          if ((((*natconmap_slackidx)(_ptr__664[_697])) > (int)0))
          {
            {
              _ptr__693[_696] = _ptr__664[_697];
              _ptr__694[_696] = (int)(((*natconmap_slackidx)(_ptr__664[_697])) - (int)1);
              _ptr__695[_696] = (-1.0);
              ++ _696;
            }
          }
          {}
        }
      }
      task_putaijlist(_693,_694,_695,(long long)(_691));
    }
  }
  {}
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _698,monty::rc_ptr< ::mosek::fusion::Expression > _699,std::shared_ptr< monty::ndarray< int,1 > > _700,bool _701){
  _checked_ptr_1<int> _ptr__698(_698 ? _698->raw() : nullptr, _698 ? _698->size(0) : 0);
  _checked_ptr_1<int> _ptr__700(_700 ? _700->raw() : nullptr, _700 ? _700->size(0) : 0);
  int _702 = safe_mul( (int)((_698)->size(0)),(int)((_700)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _703 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_702)));
  _checked_ptr_1<double> _ptr__703(_703 ? _703->raw() : nullptr,_703 ? _703->size(0) : 0);
  std::vector<int> _6977;
  for (int _705 = (int)0, _6978 = (int)((_698)->size(0)); _705 < _6978 ; ++_705)
  {
    for (int _706 = (int)0, _6979 = (int)((_700)->size(0)); _706 < _6979 ; ++_706)
    {
      _6977.push_back(_ptr__698[_705]);
    }
  }
  auto _6980 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6977.size()),_6977.begin(),_6977.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _704 = _6980;
  _checked_ptr_1<int> _ptr__704(_704 ? _704->raw() : nullptr,_704 ? _704->size(0) : 0);
  std::vector<int> _6981;
  for (int _708 = (int)0, _6982 = (int)((_698)->size(0)); _708 < _6982 ; ++_708)
  {
    for (int _709 = (int)0, _6983 = (int)((_700)->size(0)); _709 < _6983 ; ++_709)
    {
      _6981.push_back(_ptr__700[_709]);
    }
  }
  auto _6984 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6981.size()),_6981.begin(),_6981.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _707 = _6984;
  _checked_ptr_1<int> _ptr__707(_707 ? _707->raw() : nullptr,_707 ? _707->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_699)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _710 = ws->popi32();
  int _711 = ws->popi32(_710);
  int _712 = ws->popi32();
  int _713 = ws->popi32();
  bool _714 = ((int)0 != ws->popi32());
  int _715 = ws->popi32(safe_add( _712,(int)1 ));
  int _6985;
  bool _6986 = _714;
  if (_6986)
  {
    _6985 = ws->popi64(_712);
  }
  else
  {
    _6985 = (int)0;
  }
  int _716 = _6985;
  int _717 = ws->popi64(_713);
  int _718 = ws->popf64(_712);
  int _719 = ws->popf64(_713);
  std::shared_ptr< monty::ndarray< int,1 > > _720 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__720(_720 ? _720->raw() : nullptr,_720 ? _720->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _721 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__721(_721 ? _721->raw() : nullptr,_721 ? _721->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _722 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__722(_722 ? _722->raw() : nullptr,_722 ? _722->size(0) : 0);
  int _723 = (int)0;
  int _6987 = (int)0;
  int _6988 = _712;
  for (int _724 = _6987; _724 < _6988; ++_724)
  {
    {
      int _725 = _ptr__720[safe_add( _715,_724 )];
      int _726 = _ptr__720[safe_add( safe_add( _715,_724 ),(int)1 )];
      int _727 = _725;
      int _728 = (int)0;
      while ( ((_728 < (int)((_700)->size(0))) && (_727 < _726)) )
      {
        {
          if ((_ptr__700[_728] < (_ptr__721[safe_add( _717,_727 )] - (int)1)))
          {
            {
              ++ _728;
            }
          }
          else if((_ptr__700[_728] > (_ptr__721[safe_add( _717,_727 )] - (int)1)))
          {
            {
              ++ _727;
            }
          }
          else
          {
            {
              _ptr__703[safe_add( _723,_728 )] = _ptr__722[safe_add( _719,_727 )];
              ++ _728;
              ++ _727;
            }
          }
        }
      }
      _723 += (int)((_700)->size(0));
    }
  }
  task_putaijlist(_704,_707,_703,(long long)(_702));
  if (_701)
  {
    {
      std::vector<int> _6989;
      for (int _729 = (int)0, _6990 = _712; _729 < _6990 ; ++_729)
      {
        _6989.push_back(bfixidx);
      }
      auto _6991 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6989.size()),_6989.begin(),_6989.end()));
      std::vector<double> _6992;
      for (int _730 = (int)0, _6993 = _712; _730 < _6993 ; ++_730)
      {
        _6992.push_back(_ptr__722[safe_add( _718,_730 )]);
      }
      auto _6994 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6992.size()),_6992.begin(),_6992.end()));
      task_putaijlist(_698,_6991,_6994,(long long)(_712));
    }
  }
  {}
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _731,monty::rc_ptr< ::mosek::fusion::Variable > _732) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_731,_732); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _731,monty::rc_ptr< ::mosek::fusion::Variable > _732){
  if ((_731->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _733 = _732->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _734 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_733)));
  _checked_ptr_1<long long> _ptr__734(_734 ? _734->raw() : nullptr,_734 ? _734->size(0) : 0);
  if ((_733 < _732->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _735 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_733)));
      _checked_ptr_1<long long> _ptr__735(_735 ? _735->raw() : nullptr,_735 ? _735->size(0) : 0);
      _732->inst((int)0,_735,(int)0,_734);
    }
  }
  else
  {
    {
      _732->inst((int)0,_734);
    }
  }
  int _6995 = (int)0;
  int _6996 = _733;
  for (int _736 = _6995; _736 < _6996; ++_736)
  {
    {
      if ((_ptr__734[_736] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _737 = true;
  int _6997 = (int)0;
  int _6998 = (_733 - (int)1);
  for (int _738 = _6997; _738 < _6998; ++_738)
  {
    {
      _737 = (_737 && (_ptr__734[_738] < _ptr__734[(_738 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _739 = nullptr;
  _checked_ptr_1<int> _ptr__739(_739 ? _739->raw() : nullptr,_739 ? _739->size(0) : 0);
  if (_737)
  {
    {
      std::vector<int> _6999;
      for (int _740 = (int)0, _7000 = _733; _740 < _7000 ; ++_740)
      {
        _6999.push_back((int)(_ptr__734[_740] - (int)1));
      }
      auto _7001 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6999.size()),_6999.begin(),_6999.end()));
      _739 = _7001;
      _ptr__739.update(_739 ? _739->raw() : nullptr, _739 ? _739->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _7002;
      for (int _742 = (-(int)1), _7003 = _733; _742 < _7003 ; ++_742)
      {
        _7002.push_back(_742);
      }
      auto _7004 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7002.size()),_7002.begin(),_7002.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _741 = _7004;
      _checked_ptr_1<long long> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_741,_734,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_733));
      std::vector<int> _7005;
      for (int _743 = (int)0, _7006 = _733; _743 < _7006 ; ++_743)
      {
        _7005.push_back((int)(_ptr__734[_ptr__741[_743]] - (int)1));
      }
      auto _7007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7005.size()),_7005.begin(),_7005.end()));
      _739 = _7007;
      _ptr__739.update(_739 ? _739->raw() : nullptr, _739 ? _739->size(0) : 0);
    }
  }
  int _744 = (int)((_739)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _745 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_744)));
  _checked_ptr_1<double> _ptr__745(_745 ? _745->raw() : nullptr,_745 ? _745->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _746 = _739;
  _checked_ptr_1<int> _ptr__746(_746 ? _746->raw() : nullptr,_746 ? _746->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_731)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _747 = ws->popi32();
  int _748 = ws->popi32(_747);
  int _749 = ws->popi32();
  int _750 = ws->popi32();
  bool _751 = ((int)0 != ws->popi32());
  int _752 = ws->popi32(safe_add( _749,(int)1 ));
  int _7008;
  bool _7009 = _751;
  if (_7009)
  {
    _7008 = ws->popi64(_749);
  }
  else
  {
    _7008 = (int)0;
  }
  int _753 = _7008;
  int _754 = ws->popi64(_750);
  int _755 = ws->popf64(_749);
  int _756 = ws->popf64(_750);
  std::shared_ptr< monty::ndarray< int,1 > > _757 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__757(_757 ? _757->raw() : nullptr,_757 ? _757->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _758 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__758(_758 ? _758->raw() : nullptr,_758 ? _758->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _759 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__759(_759 ? _759->raw() : nullptr,_759 ? _759->size(0) : 0);
  int _760 = (int)0;
  int _7010 = (int)0;
  int _7011 = _749;
  for (int _761 = _7010; _761 < _7011; ++_761)
  {
    {
      int _762 = _ptr__757[safe_add( _752,_761 )];
      int _763 = _ptr__757[safe_add( safe_add( _752,_761 ),(int)1 )];
      int _764 = _762;
      int _765 = (int)0;
      while ( ((_765 < (int)((_739)->size(0))) && (_764 < _763)) )
      {
        {
          if ((_ptr__739[_765] < (_ptr__758[safe_add( _754,_764 )] - (int)1)))
          {
            {
              ++ _765;
            }
          }
          else if((_ptr__739[_765] > (_ptr__758[safe_add( _754,_764 )] - (int)1)))
          {
            {
              ++ _764;
            }
          }
          else
          {
            {
              _ptr__745[safe_add( _760,_765 )] = _ptr__759[safe_add( _756,_764 )];
              ++ _765;
              ++ _764;
            }
          }
        }
      }
      _760 += (int)((_739)->size(0));
    }
  }
  task_putclist(_746,_745);
}
void mosek::fusion::p_Model::objective_(const std::string & _766,mosek::fusion::ObjectiveSense _767,monty::rc_ptr< ::mosek::fusion::Expression > _768){
  task_putobjectivename(_766);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _769 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _770 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_768)).as<::mosek::fusion::Expression>())->eval(_769,_770,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _771 = mosek::fusion::p_WorkStack::_get_impl(_769)->i32;
  _checked_ptr_1<int> _ptr__771(_771 ? _771->raw() : nullptr,_771 ? _771->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _772 = mosek::fusion::p_WorkStack::_get_impl(_769)->i64;
  _checked_ptr_1<long long> _ptr__772(_772 ? _772->raw() : nullptr,_772 ? _772->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _773 = mosek::fusion::p_WorkStack::_get_impl(_769)->f64;
  _checked_ptr_1<double> _ptr__773(_773 ? _773->raw() : nullptr,_773 ? _773->size(0) : 0);
  int _774 = _769->popi32();
  int _775 = (int)1;
  int _7012 = (int)0;
  int _7013 = _774;
  for (int _776 = _7012; _776 < _7013; ++_776)
  {
    {
      _774 *= _769->popi32();
    }
  }
  if ((_775 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _777 = _769->popi32();
  if ((_777 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _778 = _769->popi32();
  bool _779 = (_769->popi32() != (int)0);
  int _780 = _769->popi32(safe_add( _777,(int)1 ));
  int _781 = _769->popi64(_778);
  int _782 = _769->popf64(_777);
  int _783 = _769->popf64(_778);
  int _784 = (int)0;
  int _785 = (int)0;
  int _7014 = (int)0;
  int _7015 = _778;
  for (int _786 = _7014; _786 < _7015; ++_786)
  {
    {
      if ((_ptr__772[safe_add( _781,_786 )] < (int)0))
      {
        {
          ++ _785;
        }
      }
      else if((_ptr__772[safe_add( _781,_786 )] > (int)0))
      {
        {
          ++ _784;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _787 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_784)));
  _checked_ptr_1<int> _ptr__787(_787 ? _787->raw() : nullptr,_787 ? _787->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _788 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_784)));
  _checked_ptr_1<double> _ptr__788(_788 ? _788->raw() : nullptr,_788 ? _788->size(0) : 0);
  {
    int _789 = (int)0;
    int _7016 = (int)0;
    int _7017 = _778;
    for (int _790 = _7016; _790 < _7017; ++_790)
    {
      {
        if ((_ptr__772[safe_add( _781,_790 )] > (int)0))
        {
          {
            _ptr__787[_789] = (int)(_ptr__772[safe_add( _781,_790 )] - (int)1);
            _ptr__788[_789] = _ptr__773[safe_add( _783,_790 )];
            ++ _789;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_767 == ::mosek::fusion::ObjectiveSense::Maximize),_787,_788,_ptr__773[_782]);
  if ((_785 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _791 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_785)));
      _checked_ptr_1<int> _ptr__791(_791 ? _791->raw() : nullptr,_791 ? _791->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _792 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_785)));
      _checked_ptr_1<int> _ptr__792(_792 ? _792->raw() : nullptr,_792 ? _792->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _793 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_785)));
      _checked_ptr_1<int> _ptr__793(_793 ? _793->raw() : nullptr,_793 ? _793->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _794 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_785)));
      _checked_ptr_1<double> _ptr__794(_794 ? _794->raw() : nullptr,_794 ? _794->size(0) : 0);
      int _7018 = (int)0;
      int _7019 = _785;
      for (int _795 = _7018; _795 < _7019; ++_795)
      {
        {
          long long _796 = (-safe_add( _ptr__772[safe_add( _781,_795 )],(int)1 ));
          _ptr__791[_795] = ((*natbarvar_idx)(_796));
          _ptr__792[_795] = ((*natbarvar_i)(_796));
          _ptr__793[_795] = ((*natbarvar_j)(_796));
          double _7020;
          bool _7021 = (_ptr__792[_795] == _ptr__793[_795]);
          if (_7021)
          {
            _7020 = _ptr__773[safe_add( _783,_795 )];
          }
          else
          {
            _7020 = (0.5 * _ptr__773[safe_add( _783,_795 )]);
          }
          _ptr__794[_795] = _7020;
        }
      }
      task_putbarc(_791,_792,_793,_794);
    }
  }
  {}
}
void mosek::fusion::Model :: objective(double _797) { mosek::fusion::p_Model::_get_impl(this)->objective(_797); }void mosek::fusion::p_Model::objective(double _797){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_797));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _798,double _799) { mosek::fusion::p_Model::_get_impl(this)->objective(_798,_799); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _798,double _799){
  objective_(std::string (""),_798,::mosek::fusion::p_Expr::constTerm(_799));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _800,monty::rc_ptr< ::mosek::fusion::Expression > _801) { mosek::fusion::p_Model::_get_impl(this)->objective(_800,_801); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _800,monty::rc_ptr< ::mosek::fusion::Expression > _801){
  objective_(std::string (""),_800,_801);
}
void mosek::fusion::Model :: objective(const std::string & _802,double _803) { mosek::fusion::p_Model::_get_impl(this)->objective(_802,_803); }void mosek::fusion::p_Model::objective(const std::string & _802,double _803){
  objective_(_802,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_803));
}
void mosek::fusion::Model :: objective(const std::string & _804,mosek::fusion::ObjectiveSense _805,double _806) { mosek::fusion::p_Model::_get_impl(this)->objective(_804,_805,_806); }void mosek::fusion::p_Model::objective(const std::string & _804,mosek::fusion::ObjectiveSense _805,double _806){
  objective_(_804,_805,::mosek::fusion::p_Expr::constTerm(_806));
}
void mosek::fusion::Model :: objective(const std::string & _807,mosek::fusion::ObjectiveSense _808,monty::rc_ptr< ::mosek::fusion::Expression > _809) { mosek::fusion::p_Model::_get_impl(this)->objective(_807,_808,_809); }void mosek::fusion::p_Model::objective(const std::string & _807,mosek::fusion::ObjectiveSense _808,monty::rc_ptr< ::mosek::fusion::Expression > _809){
  objective_(_807,_808,_809);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::ConeDomain > _811) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_810,_811); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::ConeDomain > _811) { return __mosek_2fusion_2Model__constraint(_810,_811); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::ConeDomain > _811){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_810,_811);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::ConeDomain > _814) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_812,_813,_814); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::ConeDomain > _814) { return __mosek_2fusion_2Model__constraint(_812,_813,_814); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::ConeDomain > _814){
  return __mosek_2fusion_2Model__constraint_(_812,_813,_814);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::RangeDomain > _816) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_815,_816); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::RangeDomain > _816) { return __mosek_2fusion_2Model__constraint(_815,_816); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::RangeDomain > _816){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_815,_816);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::RangeDomain > _819) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_817,_818,_819); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::RangeDomain > _819) { return __mosek_2fusion_2Model__constraint(_817,_818,_819); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::RangeDomain > _819){
  return __mosek_2fusion_2Model__constraint_(_817,_818,_819);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinearDomain > _821) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_820,_821); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinearDomain > _821) { return __mosek_2fusion_2Model__constraint(_820,_821); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinearDomain > _821){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_820,_821);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinearDomain > _824) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_822,_823,_824); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinearDomain > _824) { return __mosek_2fusion_2Model__constraint(_822,_823,_824); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinearDomain > _824){
  return __mosek_2fusion_2Model__constraint_(_822,_823,_824);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _826) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_825,_826); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _826) { return __mosek_2fusion_2Model__constraint(_825,_826); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _826){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_825,_826);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _829) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_827,_828,_829); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _829) { return __mosek_2fusion_2Model__constraint(_827,_828,_829); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _829){
  return __mosek_2fusion_2Model__constraint_(_827,_828,_829);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _830,monty::rc_ptr< ::mosek::fusion::PSDDomain > _831) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_830,_831); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _830,monty::rc_ptr< ::mosek::fusion::PSDDomain > _831) { return __mosek_2fusion_2Model__constraint(_830,_831); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _830,monty::rc_ptr< ::mosek::fusion::PSDDomain > _831){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_830,_831);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _832,monty::rc_ptr< ::mosek::fusion::Expression > _833,monty::rc_ptr< ::mosek::fusion::PSDDomain > _834) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_832,_833,_834); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _832,monty::rc_ptr< ::mosek::fusion::Expression > _833,monty::rc_ptr< ::mosek::fusion::PSDDomain > _834) { return __mosek_2fusion_2Model__constraint(_832,_833,_834); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _832,monty::rc_ptr< ::mosek::fusion::Expression > _833,monty::rc_ptr< ::mosek::fusion::PSDDomain > _834){
  return __mosek_2fusion_2Model__constraint_(_832,_833,_834);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_835); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return __mosek_2fusion_2Model__variable(_835); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_835)->shape,_835);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _836,int _837,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _838) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_836,_837,_838); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _836,int _837,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _838) { return __mosek_2fusion_2Model__variable(_836,_837,_838); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _836,int _837,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _838){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_836),(int)(_836),(int)(_837)}),_838);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _839,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _840) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_839,_840); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _839,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _840) { return __mosek_2fusion_2Model__variable(_839,_840); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _839,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _840){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_839),(int)(_839)}),_840);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _841,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _842) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_841,_842); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _841,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _842) { return __mosek_2fusion_2Model__variable(_841,_842); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _841,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _842){
  return __mosek_2fusion_2Model__variable_(_841,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_842);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _843,int _844,int _845,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _846) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_843,_844,_845,_846); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _843,int _844,int _845,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _846) { return __mosek_2fusion_2Model__variable(_843,_844,_845,_846); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _843,int _844,int _845,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _846){
  return __mosek_2fusion_2Model__variable_(_843,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_844),(int)(_844),(int)(_845)}),_846);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _847,int _848,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _849) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_847,_848,_849); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _847,int _848,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _849) { return __mosek_2fusion_2Model__variable(_847,_848,_849); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _847,int _848,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _849){
  return __mosek_2fusion_2Model__variable_(_847,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_848),(int)(_848)}),_849);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _850,std::shared_ptr< monty::ndarray< int,1 > > _851,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _852) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_850,_851,_852); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _850,std::shared_ptr< monty::ndarray< int,1 > > _851,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _852) { return __mosek_2fusion_2Model__variable(_850,_851,_852); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _850,std::shared_ptr< monty::ndarray< int,1 > > _851,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _852){
  _checked_ptr_1<int> _ptr__851(_851 ? _851->raw() : nullptr, _851 ? _851->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_850,_851,_852);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_853); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return __mosek_2fusion_2Model__variable(_853); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _853){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_853)->shape,_853)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _854,int _855,monty::rc_ptr< ::mosek::fusion::PSDDomain > _856) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_854,_855,_856); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _854,int _855,monty::rc_ptr< ::mosek::fusion::PSDDomain > _856) { return __mosek_2fusion_2Model__variable(_854,_855,_856); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _854,int _855,monty::rc_ptr< ::mosek::fusion::PSDDomain > _856){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_854),(int)(_854),(int)(_855)}),_856)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _857,monty::rc_ptr< ::mosek::fusion::PSDDomain > _858) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_857,_858); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _857,monty::rc_ptr< ::mosek::fusion::PSDDomain > _858) { return __mosek_2fusion_2Model__variable(_857,_858); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _857,monty::rc_ptr< ::mosek::fusion::PSDDomain > _858){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_857),(int)(_857)}),_858)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _859,monty::rc_ptr< ::mosek::fusion::PSDDomain > _860) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_859,_860); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _859,monty::rc_ptr< ::mosek::fusion::PSDDomain > _860) { return __mosek_2fusion_2Model__variable(_859,_860); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _859,monty::rc_ptr< ::mosek::fusion::PSDDomain > _860){
  return (__mosek_2fusion_2Model__variable_(_859,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_860)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _861,int _862,int _863,monty::rc_ptr< ::mosek::fusion::PSDDomain > _864) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_861,_862,_863,_864); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _861,int _862,int _863,monty::rc_ptr< ::mosek::fusion::PSDDomain > _864) { return __mosek_2fusion_2Model__variable(_861,_862,_863,_864); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _861,int _862,int _863,monty::rc_ptr< ::mosek::fusion::PSDDomain > _864){
  return (__mosek_2fusion_2Model__variable_(_861,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_862),(int)(_862),(int)(_863)}),_864)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _865,int _866,monty::rc_ptr< ::mosek::fusion::PSDDomain > _867) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_865,_866,_867); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _865,int _866,monty::rc_ptr< ::mosek::fusion::PSDDomain > _867) { return __mosek_2fusion_2Model__variable(_865,_866,_867); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _865,int _866,monty::rc_ptr< ::mosek::fusion::PSDDomain > _867){
  return (__mosek_2fusion_2Model__variable_(_865,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_866),(int)(_866)}),_867)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _868,std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::PSDDomain > _870) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_868,_869,_870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _868,std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::PSDDomain > _870) { return __mosek_2fusion_2Model__variable(_868,_869,_870); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _868,std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::PSDDomain > _870){
  _checked_ptr_1<int> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_868,_869,_870)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _871) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_871); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _871) { return __mosek_2fusion_2Model__variable(_871); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _871){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_871);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_872); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return __mosek_2fusion_2Model__variable(_872); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _872){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_872);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _873) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_873); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _873) { return __mosek_2fusion_2Model__variable(_873); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _873){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_873);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _874,monty::rc_ptr< ::mosek::fusion::ConeDomain > _875) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_874,_875); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _874,monty::rc_ptr< ::mosek::fusion::ConeDomain > _875) { return __mosek_2fusion_2Model__variable(_874,_875); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _874,monty::rc_ptr< ::mosek::fusion::ConeDomain > _875){
  _checked_ptr_1<int> _ptr__874(_874 ? _874->raw() : nullptr, _874 ? _874->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_874,_875);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _876,monty::rc_ptr< ::mosek::fusion::RangeDomain > _877) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_876,_877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _876,monty::rc_ptr< ::mosek::fusion::RangeDomain > _877) { return __mosek_2fusion_2Model__variable(_876,_877); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _876,monty::rc_ptr< ::mosek::fusion::RangeDomain > _877){
  _checked_ptr_1<int> _ptr__876(_876 ? _876->raw() : nullptr, _876 ? _876->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_876,_877);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _878,monty::rc_ptr< ::mosek::fusion::LinearDomain > _879) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_878,_879); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _878,monty::rc_ptr< ::mosek::fusion::LinearDomain > _879) { return __mosek_2fusion_2Model__variable(_878,_879); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _878,monty::rc_ptr< ::mosek::fusion::LinearDomain > _879){
  _checked_ptr_1<int> _ptr__878(_878 ? _878->raw() : nullptr, _878 ? _878->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_878,_879);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _880) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_880); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _880) { return __mosek_2fusion_2Model__variable(_880); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _880){
  _checked_ptr_1<int> _ptr__880(_880 ? _880->raw() : nullptr, _880 ? _880->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_880,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _881,monty::rc_ptr< ::mosek::fusion::ConeDomain > _882) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_881,_882); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _881,monty::rc_ptr< ::mosek::fusion::ConeDomain > _882) { return __mosek_2fusion_2Model__variable(_881,_882); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _881,monty::rc_ptr< ::mosek::fusion::ConeDomain > _882){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_881)}),_882);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _883,monty::rc_ptr< ::mosek::fusion::RangeDomain > _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_883,_884); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _883,monty::rc_ptr< ::mosek::fusion::RangeDomain > _884) { return __mosek_2fusion_2Model__variable(_883,_884); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _883,monty::rc_ptr< ::mosek::fusion::RangeDomain > _884){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_883)}),_884);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _885,monty::rc_ptr< ::mosek::fusion::LinearDomain > _886) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_885,_886); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _885,monty::rc_ptr< ::mosek::fusion::LinearDomain > _886) { return __mosek_2fusion_2Model__variable(_885,_886); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _885,monty::rc_ptr< ::mosek::fusion::LinearDomain > _886){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_885)}),_886);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _887) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_887); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _887) { return __mosek_2fusion_2Model__variable(_887); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _887){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_887)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _888,monty::rc_ptr< ::mosek::fusion::ConeDomain > _889) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_888,_889); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _888,monty::rc_ptr< ::mosek::fusion::ConeDomain > _889) { return __mosek_2fusion_2Model__variable(_888,_889); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _888,monty::rc_ptr< ::mosek::fusion::ConeDomain > _889){
  return __mosek_2fusion_2Model__variable_(_888,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_889);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _890,monty::rc_ptr< ::mosek::fusion::RangeDomain > _891) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_890,_891); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _890,monty::rc_ptr< ::mosek::fusion::RangeDomain > _891) { return __mosek_2fusion_2Model__variable(_890,_891); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _890,monty::rc_ptr< ::mosek::fusion::RangeDomain > _891){
  return __mosek_2fusion_2Model__ranged_variable(_890,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_891);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _892,monty::rc_ptr< ::mosek::fusion::LinearDomain > _893) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_892,_893); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _892,monty::rc_ptr< ::mosek::fusion::LinearDomain > _893) { return __mosek_2fusion_2Model__variable(_892,_893); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _892,monty::rc_ptr< ::mosek::fusion::LinearDomain > _893){
  return __mosek_2fusion_2Model__variable_(_892,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_893);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _894,std::shared_ptr< monty::ndarray< int,1 > > _895,monty::rc_ptr< ::mosek::fusion::ConeDomain > _896) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_894,_895,_896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _894,std::shared_ptr< monty::ndarray< int,1 > > _895,monty::rc_ptr< ::mosek::fusion::ConeDomain > _896) { return __mosek_2fusion_2Model__variable(_894,_895,_896); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _894,std::shared_ptr< monty::ndarray< int,1 > > _895,monty::rc_ptr< ::mosek::fusion::ConeDomain > _896){
  _checked_ptr_1<int> _ptr__895(_895 ? _895->raw() : nullptr, _895 ? _895->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_894,_895,_896);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _897,std::shared_ptr< monty::ndarray< int,1 > > _898,monty::rc_ptr< ::mosek::fusion::RangeDomain > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_897,_898,_899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _897,std::shared_ptr< monty::ndarray< int,1 > > _898,monty::rc_ptr< ::mosek::fusion::RangeDomain > _899) { return __mosek_2fusion_2Model__variable(_897,_898,_899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _897,std::shared_ptr< monty::ndarray< int,1 > > _898,monty::rc_ptr< ::mosek::fusion::RangeDomain > _899){
  _checked_ptr_1<int> _ptr__898(_898 ? _898->raw() : nullptr, _898 ? _898->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_897,_898,_899);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _900,std::shared_ptr< monty::ndarray< int,1 > > _901,monty::rc_ptr< ::mosek::fusion::LinearDomain > _902) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_900,_901,_902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _900,std::shared_ptr< monty::ndarray< int,1 > > _901,monty::rc_ptr< ::mosek::fusion::LinearDomain > _902) { return __mosek_2fusion_2Model__variable(_900,_901,_902); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _900,std::shared_ptr< monty::ndarray< int,1 > > _901,monty::rc_ptr< ::mosek::fusion::LinearDomain > _902){
  _checked_ptr_1<int> _ptr__901(_901 ? _901->raw() : nullptr, _901 ? _901->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_900,_901,_902);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _903,std::shared_ptr< monty::ndarray< int,1 > > _904) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_903,_904); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _903,std::shared_ptr< monty::ndarray< int,1 > > _904) { return __mosek_2fusion_2Model__variable(_903,_904); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _903,std::shared_ptr< monty::ndarray< int,1 > > _904){
  _checked_ptr_1<int> _ptr__904(_904 ? _904->raw() : nullptr, _904 ? _904->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_903,_904,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _905,int _906,monty::rc_ptr< ::mosek::fusion::ConeDomain > _907) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_905,_906,_907); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _905,int _906,monty::rc_ptr< ::mosek::fusion::ConeDomain > _907) { return __mosek_2fusion_2Model__variable(_905,_906,_907); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _905,int _906,monty::rc_ptr< ::mosek::fusion::ConeDomain > _907){
  return __mosek_2fusion_2Model__variable_(_905,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_906)}),_907);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _908,int _909,monty::rc_ptr< ::mosek::fusion::RangeDomain > _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_908,_909,_910); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _908,int _909,monty::rc_ptr< ::mosek::fusion::RangeDomain > _910) { return __mosek_2fusion_2Model__variable(_908,_909,_910); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _908,int _909,monty::rc_ptr< ::mosek::fusion::RangeDomain > _910){
  return __mosek_2fusion_2Model__ranged_variable(_908,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_909)}),_910);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _911,int _912,monty::rc_ptr< ::mosek::fusion::LinearDomain > _913) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_911,_912,_913); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _911,int _912,monty::rc_ptr< ::mosek::fusion::LinearDomain > _913) { return __mosek_2fusion_2Model__variable(_911,_912,_913); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _911,int _912,monty::rc_ptr< ::mosek::fusion::LinearDomain > _913){
  return __mosek_2fusion_2Model__variable_(_911,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_912)}),_913);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _914,int _915) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_914,_915); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _914,int _915) { return __mosek_2fusion_2Model__variable(_914,_915); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _914,int _915){
  return __mosek_2fusion_2Model__variable_(_914,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_915)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _916) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_916); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _916) { return __mosek_2fusion_2Model__variable(_916); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _916){
  return __mosek_2fusion_2Model__variable_(_916,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _917,std::shared_ptr< monty::ndarray< int,1 > > _918,monty::rc_ptr< ::mosek::fusion::RangeDomain > _919){
  _checked_ptr_1<int> _ptr__918(_918 ? _918->raw() : nullptr, _918 ? _918->size(0) : 0);
  if ((((int)((_917).size()) > (int)0) && hasVariable(_917)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_917)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7022;
  bool _7023 = (NULL != _918.get());
  if (_7023)
  {
    _7022 = _918;
  }
  else
  {
    _7022 = mosek::fusion::p_RangeDomain::_get_impl(_919)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _920 = _7022;
  _checked_ptr_1<int> _ptr__920(_920 ? _920->raw() : nullptr,_920 ? _920->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_919)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_919)->shape,_920))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _920.get()))
  {
    {
      _920 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__920.update(_920 ? _920->raw() : nullptr, _920 ? _920->size(0) : 0);
    }
  }
  {}
  int _921 = (int)((_920)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _922 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_921)));
  _checked_ptr_1<int> _ptr__922(_922 ? _922->raw() : nullptr,_922 ? _922->size(0) : 0);
  if ((_921 > (int)0))
  {
    {
      _ptr__922[(_921 - (int)1)] = (int)1;
      int _7024 = (int)1;
      int _7025 = _921;
      for (int _923 = _7024; _923 < _7025; ++_923)
      {
        {
          _ptr__922[((_921 - _923) - (int)1)] = safe_mul( _ptr__922[(_921 - _923)],_ptr__920[(_921 - _923)] );
        }
      }
    }
  }
  {}
  int _924 = (int)1;
  int _7026 = (int)0;
  int _7027 = (int)((_920)->size(0));
  for (int _925 = _7026; _925 < _7027; ++_925)
  {
    {
      _924 *= _ptr__920[_925];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _926 = nullptr;
  _checked_ptr_1<long long> _ptr__926(_926 ? _926->raw() : nullptr,_926 ? _926->size(0) : 0);
  if ((NULL != _926.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)->size(1)) != _921))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _926 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)->size(0)))));
      _ptr__926.update(_926 ? _926->raw() : nullptr, _926 ? _926->size(0) : 0);
      int _7028 = (int)0;
      int _7029 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)->size(0));
      for (int _927 = _7028; _927 < _7029; ++_927)
      {
        {
          int _7030 = (int)0;
          int _7031 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)->size(1));
          for (int _928 = _7030; _928 < _7031; ++_928)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)(_927,_928)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)(_927,_928)) >= _ptr__920[_928])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _929 = (int)0;
          int _7032 = (int)0;
          int _7033 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)->size(1));
          for (int _930 = _7032; _930 < _7033; ++_930)
          {
            {
              _929 += safe_mul( _ptr__922[_930],((*mosek::fusion::p_RangeDomain::_get_impl(_919)->sparsity)(_927,_930)) );
            }
          }
          _ptr__926[_927] = _929;
        }
      }
    }
  }
  {}
  int _7034;
  bool _7035 = (NULL != _926.get());
  if (_7035)
  {
    _7034 = (int)((_926)->size(0));
  }
  else
  {
    _7034 = _924;
  }
  int _931 = _7034;
  std::shared_ptr< monty::ndarray< double,1 > > _932;
  _checked_ptr_1<double> _ptr__932(_932 ? _932->raw() : nullptr,_932 ? _932->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _933;
  _checked_ptr_1<double> _ptr__933(_933 ? _933->raw() : nullptr,_933 ? _933->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_919)->scalable)
  {
    {
      std::vector<double> _7036;
      for (int _934 = (int)0, _7037 = _931; _934 < _7037 ; ++_934)
      {
        _7036.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_919)->lb)((int)0)));
      }
      auto _7038 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7036.size()),_7036.begin(),_7036.end()));
      _932 = _7038;
      _ptr__932.update(_932 ? _932->raw() : nullptr, _932 ? _932->size(0) : 0);
      std::vector<double> _7039;
      for (int _935 = (int)0, _7040 = _931; _935 < _7040 ; ++_935)
      {
        _7039.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_919)->ub)((int)0)));
      }
      auto _7041 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7039.size()),_7039.begin(),_7039.end()));
      _933 = _7041;
      _ptr__933.update(_933 ? _933->raw() : nullptr, _933 ? _933->size(0) : 0);
    }
  }
  else
  {
    {
      _932 = mosek::fusion::p_RangeDomain::_get_impl(_919)->lb;
      _ptr__932.update(_932 ? _932->raw() : nullptr, _932 ? _932->size(0) : 0);
      _933 = mosek::fusion::p_RangeDomain::_get_impl(_919)->ub;
      _ptr__933.update(_933 ? _933->raw() : nullptr, _933 ? _933->size(0) : 0);
    }
  }
  int _936 = natvarmap_alloc(_931);
  std::shared_ptr< monty::ndarray< int,1 > > _937 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_936))));
  _checked_ptr_1<int> _ptr__937(_937 ? _937->raw() : nullptr,_937 ? _937->size(0) : 0);
  natvarmap->get(_936,_937,(int)0);
  int _7042 = (int)0;
  int _7043 = _931;
  for (int _938 = _7042; _938 < _7043; ++_938)
  {
    {
      ((*natvarmap_idx)(_ptr__937[_938])) = _936;
    }
  }
  task_var_putboundlist_ra(_937,_932,_933);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _939 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_917,(long long)(_936),_920,_926,_937);
  if (mosek::fusion::p_RangeDomain::_get_impl(_919)->cardinal_flag)
  {
    {
      task_var_putintlist(_937);
    }
  }
  {}
  ((*vars)(_936)) = (_939).as<::mosek::fusion::ModelVariable>();
  if (((int)((_917).size()) > (int)0))
  {
    {
      var_map->setItem(_917,_936);
    }
  }
  {}
  return (_939).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _940,std::shared_ptr< monty::ndarray< int,1 > > _941,monty::rc_ptr< ::mosek::fusion::ConeDomain > _942){
  _checked_ptr_1<int> _ptr__941(_941 ? _941->raw() : nullptr, _941 ? _941->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7044;
  bool _7045 = (NULL != _941.get());
  if (_7045)
  {
    _7044 = _941;
  }
  else
  {
    _7044 = mosek::fusion::p_ConeDomain::_get_impl(_942)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _943 = _7044;
  _checked_ptr_1<int> _ptr__943(_943 ? _943->raw() : nullptr,_943 ? _943->size(0) : 0);
  if ((((int)((_940).size()) > (int)0) && hasVariable(_940)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_940)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _943.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_942)->shape.get()) && (!::mosek::fusion::p_Set::match(_943,mosek::fusion::p_ConeDomain::_get_impl(_942)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_942->getAxis() >= (int)((_943)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _7046;
  bool _7047 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_942)->shape.get());
  if (_7047)
  {
    _7046 = _942->getAxis();
  }
  else
  {
    _7046 = ((int)((_943)->size(0)) - (int)1);
  }
  int _944 = _7046;
  int _945 = _ptr__943[_944];
  int _946 = (int)((_943)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _947 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_946)));
  _checked_ptr_1<int> _ptr__947(_947 ? _947->raw() : nullptr,_947 ? _947->size(0) : 0);
  _ptr__947[(_946 - (int)1)] = (int)1;
  int _7048 = (int)1;
  int _7049 = _946;
  for (int _948 = _7048; _948 < _7049; ++_948)
  {
    {
      _ptr__947[((_946 - _948) - (int)1)] = safe_mul( _ptr__947[(_946 - _948)],_ptr__943[(_946 - _948)] );
    }
  }
  int _949 = _ptr__943[(int)0];
  int _7050 = (int)1;
  int _7051 = (int)((_943)->size(0));
  for (int _950 = _7050; _950 < _7051; ++_950)
  {
    {
      _949 *= _ptr__943[_950];
    }
  }
  int _951 = (int)1;
  int _7052 = (int)0;
  int _7053 = _944;
  for (int _952 = _7052; _952 < _7053; ++_952)
  {
    {
      _951 *= _ptr__943[_952];
    }
  }
  int _953 = (int)1;
  int _7054 = safe_add( _944,(int)1 );
  int _7055 = _946;
  for (int _954 = _7054; _954 < _7055; ++_954)
  {
    {
      _953 *= _ptr__943[_954];
    }
  }
  int _955 = safe_mul( _951,_953 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InQCone) && (_945 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_945 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_945 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_945 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_945 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_945 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _956 = natvarmap_alloc(_949);
  int _957 = natconemap_alloc(_955);
  ((*natvarmap_type)(_956)) = safe_add( _957,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_956))));
  _checked_ptr_1<int> _ptr__958(_958 ? _958->raw() : nullptr,_958 ? _958->size(0) : 0);
  natvarmap->get(_956,_958,(int)0);
  int _7056 = (int)0;
  int _7057 = _949;
  for (int _959 = _7056; _959 < _7057; ++_959)
  {
    {
      ((*natvarmap_idx)(_ptr__958[_959])) = _956;
    }
  }
  task_var_putboundlist_fr(_958);
  if (mosek::fusion::p_ConeDomain::_get_impl(_942)->int_flag)
  {
    {
      task_var_putintlist(_958);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _960 = _958;
  _checked_ptr_1<int> _ptr__960(_960 ? _960->raw() : nullptr,_960 ? _960->size(0) : 0);
  if ((_944 < ((int)((_943)->size(0)) - (int)1)))
  {
    {
      _960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_958)->size(0)))));
      _ptr__960.update(_960 ? _960->raw() : nullptr, _960 ? _960->size(0) : 0);
      int _961 = (int)0;
      int _7058 = (int)0;
      int _7059 = _951;
      for (int _962 = _7058; _962 < _7059; ++_962)
      {
        {
          int _7060 = (int)0;
          int _7061 = _953;
          for (int _963 = _7060; _963 < _7061; ++_963)
          {
            {
              int _7062 = (int)0;
              int _7063 = _945;
              for (int _964 = _7062; _964 < _7063; ++_964)
              {
                {
                  _ptr__960[_961] = _ptr__958[safe_add( safe_mul( safe_add( safe_mul( _962,_945 ),_964 ),_953 ),_963 )];
                  ++ _961;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _965 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_955)));
  _checked_ptr_1<int> _ptr__965(_965 ? _965->raw() : nullptr,_965 ? _965->size(0) : 0);
  natconemap->get(_957,_965,(int)0);
  ((*natconemap_dim)(_957)) = _945;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_965,_945,_955,_960);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_965,_945,_955,_960);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_965,_945,_955,_960);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _7064;
                  for (int _966 = (int)0, _7065 = _955; _966 < _7065 ; ++_966)
                  {
                    _7064.push_back(mosek::fusion::p_ConeDomain::_get_impl(_942)->alpha);
                  }
                  auto _7066 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7064.size()),_7064.begin(),_7064.end()));
                  task_put_ppowcones(_965,_945,_955,_960,_7066);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_965,_945,_955,_960);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_942)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _7067;
                          for (int _967 = (int)0, _7068 = _955; _967 < _7068 ; ++_967)
                          {
                            _7067.push_back(mosek::fusion::p_ConeDomain::_get_impl(_942)->alpha);
                          }
                          auto _7069 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7067.size()),_7067.begin(),_7067.end()));
                          task_put_dpowcones(_965,_945,_955,_960,_7069);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _7070 = (int)0;
  int _7071 = (int)((_965)->size(0));
  for (int _968 = _7070; _968 < _7071; ++_968)
  {
    {
      task_cone_name(_ptr__965[_968],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__965[_968])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _969 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_940,_956,_943,_958);
  ((*vars)(_956)) = (_969).as<::mosek::fusion::ModelVariable>();
  if (((int)((_940).size()) > (int)0))
  {
    {
      var_map->setItem(_940,_956);
    }
  }
  {}
  return (_969).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _970,std::shared_ptr< monty::ndarray< int,1 > > _971,monty::rc_ptr< ::mosek::fusion::LinearDomain > _972){
  _checked_ptr_1<int> _ptr__971(_971 ? _971->raw() : nullptr, _971 ? _971->size(0) : 0);
  if ((((int)((_970).size()) > (int)0) && hasVariable(_970)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_970)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7072;
  bool _7073 = (NULL != _971.get());
  if (_7073)
  {
    _7072 = _971;
  }
  else
  {
    _7072 = mosek::fusion::p_LinearDomain::_get_impl(_972)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _973 = _7072;
  _checked_ptr_1<int> _ptr__973(_973 ? _973->raw() : nullptr,_973 ? _973->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_972)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_972)->shape,_973))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _973.get()))
  {
    {
      _973 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__973.update(_973 ? _973->raw() : nullptr, _973 ? _973->size(0) : 0);
    }
  }
  {}
  int _974 = (int)((_973)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _975 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_974)));
  _checked_ptr_1<int> _ptr__975(_975 ? _975->raw() : nullptr,_975 ? _975->size(0) : 0);
  if ((_974 > (int)0))
  {
    {
      _ptr__975[(_974 - (int)1)] = (int)1;
      int _7074 = (int)1;
      int _7075 = _974;
      for (int _976 = _7074; _976 < _7075; ++_976)
      {
        {
          _ptr__975[((_974 - _976) - (int)1)] = safe_mul( _ptr__975[(_974 - _976)],_ptr__973[(_974 - _976)] );
        }
      }
    }
  }
  {}
  int _977 = (int)1;
  int _7076 = (int)0;
  int _7077 = (int)((_973)->size(0));
  for (int _978 = _7076; _978 < _7077; ++_978)
  {
    {
      _977 *= _ptr__973[_978];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _979 = nullptr;
  _checked_ptr_1<long long> _ptr__979(_979 ? _979->raw() : nullptr,_979 ? _979->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _980 = nullptr;
  _checked_ptr_1<int> _ptr__980(_980 ? _980->raw() : nullptr,_980 ? _980->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_972)->empty)
  {
    {
      _979 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__979.update(_979 ? _979->raw() : nullptr, _979 ? _979->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_972)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_972)->sparsity)->size(1)) != _974))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _981 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_972)->sparsity)->size(0));
      _979 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_981)));
      _ptr__979.update(_979 ? _979->raw() : nullptr, _979 ? _979->size(0) : 0);
      {
        bool _982 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _983 = mosek::fusion::p_LinearDomain::_get_impl(_972)->sparsity;
        int _7078 = (int)0;
        int _7079 = _981;
        for (int _984 = _7078; _984 < _7079; ++_984)
        {
          {
            int _7080 = (int)0;
            int _7081 = (int)((_983)->size(1));
            for (int _985 = _7080; _985 < _7081; ++_985)
            {
              {
                _982 = (_982 || ((((*_983)(_984,_985)) < (int)0) || (((*_983)(_984,_985)) >= _ptr__973[_985])));
              }
            }
            if ((!_982))
            {
              {
                long long _986 = (int)0;
                int _7082 = (int)0;
                int _7083 = (int)((_983)->size(1));
                for (int _987 = _7082; _987 < _7083; ++_987)
                {
                  {
                    _986 += safe_mul( _ptr__975[_987],((*_983)(_984,_987)) );
                  }
                }
                _ptr__979[_984] = _986;
              }
            }
            {}
          }
        }
        if (_982)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _988 = mosek::fusion::p_LinearDomain::_get_impl(_972)->sparsity;
      int _989 = (int)0;
      int _7084 = (int)0;
      int _7085 = _974;
      for (int _990 = _7084; _990 < _7085; ++_990)
      {
        {
          if ((_989 < _ptr__973[_990]))
          {
            {
              _989 = _ptr__973[_990];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _991 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_981)));
      _checked_ptr_1<int> _ptr__991(_991 ? _991->raw() : nullptr,_991 ? _991->size(0) : 0);
      int _7086 = (int)0;
      int _7087 = _981;
      for (int _992 = _7086; _992 < _7087; ++_992)
      {
        {
          _ptr__991[_992] = _992;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _993 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_981)));
      _checked_ptr_1<int> _ptr__993(_993 ? _993->raw() : nullptr,_993 ? _993->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _994 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _989,(int)1 ))));
      _checked_ptr_1<int> _ptr__994(_994 ? _994->raw() : nullptr,_994 ? _994->size(0) : 0);
      int _7088 = (int)0;
      int _7089 = _974;
      for (int _995 = _7088; _995 < _7089; ++_995)
      {
        {
          {
            int _996 = ((_974 - _995) - (int)1);
            int _7090 = (int)0;
            int _7091 = safe_add( _ptr__973[_996],(int)1 );
            for (int _997 = _7090; _997 < _7091; ++_997)
            {
              {
                _ptr__994[_997] = (int)0;
              }
            }
            int _7092 = (int)0;
            int _7093 = _981;
            for (int _998 = _7092; _998 < _7093; ++_998)
            {
              {
                ++ _ptr__994[safe_add( ((*_988)(_998,_996)),(int)1 )];
              }
            }
            int _7094 = (int)0;
            int _7095 = _ptr__973[_996];
            for (int _999 = _7094; _999 < _7095; ++_999)
            {
              {
                _ptr__994[safe_add( _999,(int)1 )] += _ptr__994[_999];
              }
            }
            int _7096 = (int)0;
            int _7097 = _981;
            for (int _1000 = _7096; _1000 < _7097; ++_1000)
            {
              {
                int _1001 = _ptr__991[_1000];
                _ptr__993[_ptr__994[((*_988)(_1001,_996))]] = _1001;
                ++ _ptr__994[((*_988)(_1001,_996))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _1002 = _991;
          _checked_ptr_1<int> _ptr__1002(_1002 ? _1002->raw() : nullptr,_1002 ? _1002->size(0) : 0);
          _991 = _993;
          _ptr__991.update(_991 ? _991->raw() : nullptr, _991 ? _991->size(0) : 0);
          _993 = _1002;
          _ptr__993.update(_993 ? _993->raw() : nullptr, _993 ? _993->size(0) : 0);
        }
      }
      int _7098 = (int)0;
      int _7099 = _981;
      for (int _1003 = _7098; _1003 < _7099; ++_1003)
      {
        {
          int _1004 = _ptr__991[_1003];
          long long _1005 = (int)0;
          int _7100 = (int)0;
          int _7101 = _974;
          for (int _1006 = _7100; _1006 < _7101; ++_1006)
          {
            {
              _1005 += safe_mul( _ptr__975[_1006],((*_988)(_1004,_1006)) );
            }
          }
          _ptr__979[_1003] = _1005;
        }
      }
    }
  }
  {}
  int _7102;
  bool _7103 = (NULL != _979.get());
  if (_7103)
  {
    _7102 = (int)((_979)->size(0));
  }
  else
  {
    _7102 = _977;
  }
  int _1007 = _7102;
  std::shared_ptr< monty::ndarray< double,1 > > _1008 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1007)));
  _checked_ptr_1<double> _ptr__1008(_1008 ? _1008->raw() : nullptr,_1008 ? _1008->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_972)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_972)->bnd)->size(0)) == (int)1))
      {
        {
          int _7104 = (int)0;
          int _7105 = _1007;
          for (int _1009 = _7104; _1009 < _7105; ++_1009)
          {
            {
              _ptr__1008[_1009] = ((*mosek::fusion::p_LinearDomain::_get_impl(_972)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_972)->bnd)->size(0)) == _1007))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_972)->bnd,(int)0,_1008,(int)0,_1007);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1010 = natvarmap_alloc(_1007);
  std::shared_ptr< monty::ndarray< int,1 > > _1011 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1010))));
  _checked_ptr_1<int> _ptr__1011(_1011 ? _1011->raw() : nullptr,_1011 ? _1011->size(0) : 0);
  natvarmap->get(_1010,_1011,(int)0);
  int _7106 = (int)0;
  int _7107 = _1007;
  for (int _1012 = _7106; _1012 < _7107; ++_1012)
  {
    {
      ((*natvarmap_idx)(_ptr__1011[_1012])) = _1010;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_972)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1011);
      ((*natvarmap_type)(_1010)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_972)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1011,_1008);
      ((*natvarmap_type)(_1010)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_972)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1011,_1008);
      ((*natvarmap_type)(_1010)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_972)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1011,_1008);
      ((*natvarmap_type)(_1010)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1013 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_970,(long long)(_1010),_973,_979,_1011);
  if (mosek::fusion::p_LinearDomain::_get_impl(_972)->cardinal_flag)
  {
    {
      task_var_putintlist(_1011);
    }
  }
  {}
  ((*vars)(_1010)) = (_1013).as<::mosek::fusion::ModelVariable>();
  if (((int)((_970).size()) > (int)0))
  {
    {
      var_map->setItem(_970,_1010);
    }
  }
  {}
  return (_1013).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1014,std::shared_ptr< monty::ndarray< int,1 > > _1015,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1016){
  _checked_ptr_1<int> _ptr__1015(_1015 ? _1015->raw() : nullptr, _1015 ? _1015->size(0) : 0);
  if ((((int)((_1014).size()) > (int)0) && hasVariable(_1014)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1014)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7108;
  bool _7109 = (NULL != _1015.get());
  if (_7109)
  {
    _7108 = _1015;
  }
  else
  {
    _7108 = mosek::fusion::p_LinPSDDomain::_get_impl(_1016)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1017 = _7108;
  _checked_ptr_1<int> _ptr__1017(_1017 ? _1017->raw() : nullptr,_1017 ? _1017->size(0) : 0);
  if ((NULL == _1017.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if((!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1016)->shape,_1017)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1018 = (int)((_1017)->size(0));
  int _1019 = mosek::fusion::p_LinPSDDomain::_get_impl(_1016)->conedim;
  if (((_1019 < (int)0) || (_1019 >= _1018)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1020 = _ptr__1017[_1019];
  int _1021 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1020 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1021,safe_add( _1021,(int)1 ) ) / (int)2) != _1020))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1022 = (int)1;
  int _1023 = _ptr__1017[_1019];
  int _1024 = (int)1;
  int _7110 = (int)0;
  int _7111 = _1019;
  for (int _1025 = _7110; _1025 < _7111; ++_1025)
  {
    {
      _1024 *= _ptr__1017[_1025];
    }
  }
  int _7112 = safe_add( _1019,(int)1 );
  int _7113 = _1018;
  for (int _1026 = _7112; _1026 < _7113; ++_1026)
  {
    {
      _1022 *= _ptr__1017[_1026];
    }
  }
  int _1027 = safe_mul( _1024,_1022 );
  int _1028 = safe_mul( _1027,_1020 );
  int _1029 = natbarvarmap_alloc(_1027,_1021);
  std::shared_ptr< monty::ndarray< int,1 > > _1030 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1028)));
  _checked_ptr_1<int> _ptr__1030(_1030 ? _1030->raw() : nullptr,_1030 ? _1030->size(0) : 0);
  natbarvarmap_get(_1029,_1030);
  std::shared_ptr< monty::ndarray< long long,1 > > _1031 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1027,_1023 ))));
  _checked_ptr_1<long long> _ptr__1031(_1031 ? _1031->raw() : nullptr,_1031 ? _1031->size(0) : 0);
  {
    int _1032 = (int)0;
    int _7114 = (int)0;
    int _7115 = _1024;
    for (int _1033 = _7114; _1033 < _7115; ++_1033)
    {
      {
        int _7116 = (int)0;
        int _7117 = _1023;
        for (int _1034 = _7116; _1034 < _7117; ++_1034)
        {
          {
            int _7118 = (int)0;
            int _7119 = safe_add( _1034,(int)1 );
            for (int _1035 = _7118; _1035 < _7119; ++_1035)
            {
              {
                int _7120 = (int)0;
                int _7121 = _1022;
                for (int _1036 = _7120; _1036 < _7121; ++_1036)
                {
                  {
                    _ptr__1031[_1032] = safe_add( ((*natbarvar_ptr)(safe_add( safe_mul( _1033,_1022 ),_1036 ))),safe_add( (safe_mul( _1034,((safe_mul( (int)2,_1021 ) - _1034) - (int)1) ) / (int)2),_1035 ) );
                    ++ _1032;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1037 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1014,_1029,_1017,_1019,_1031);
  ((*barvars)(_1029)) = (_1037).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1014).size()) > (int)0))
  {
    {
      var_map->setItem(_1014,(-safe_add( _1029,(int)1 )));
    }
  }
  {}
  return (_1037).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1038,std::shared_ptr< monty::ndarray< int,1 > > _1039,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1040){
  _checked_ptr_1<int> _ptr__1039(_1039 ? _1039->raw() : nullptr, _1039 ? _1039->size(0) : 0);
  if ((((int)((_1038).size()) > (int)0) && hasVariable(_1038)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1038)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1041 = _1039;
  _checked_ptr_1<int> _ptr__1041(_1041 ? _1041->raw() : nullptr,_1041 ? _1041->size(0) : 0);
  if ((NULL == _1041.get()))
  {
    {
      _1041 = mosek::fusion::p_PSDDomain::_get_impl(_1040)->shape;
      _ptr__1041.update(_1041 ? _1041->raw() : nullptr, _1041 ? _1041->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1041.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1042 = mosek::fusion::p_PSDDomain::_get_impl(_1040)->conedim1;
  int _1043 = mosek::fusion::p_PSDDomain::_get_impl(_1040)->conedim2;
  int _1044 = (int)((_1041)->size(0));
  int _1045 = _ptr__1041[_1042];
  if ((_1042 > _1043))
  {
    {
      int _1046 = _1042;
      _1042 = _1043;
      _1043 = _1046;
    }
  }
  {}
  if (((_1042 == _1043) || ((_1042 < (int)0) || (_1043 >= _1044))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1041[_1042] != _ptr__1041[_1043]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1047 = (int)1;
  int _7122 = (int)0;
  int _7123 = _1042;
  for (int _1048 = _7122; _1048 < _7123; ++_1048)
  {
    {
      _1047 *= _ptr__1041[_1048];
    }
  }
  int _7124 = safe_add( _1042,(int)1 );
  int _7125 = _1043;
  for (int _1049 = _7124; _1049 < _7125; ++_1049)
  {
    {
      _1047 *= _ptr__1041[_1049];
    }
  }
  int _7126 = safe_add( _1043,(int)1 );
  int _7127 = _1044;
  for (int _1050 = _7126; _1050 < _7127; ++_1050)
  {
    {
      _1047 *= _ptr__1041[_1050];
    }
  }
  int _1051 = (safe_mul( safe_mul( _1047,_1045 ),safe_add( _1045,(int)1 ) ) / (int)2);
  int _1052 = natbarvarmap_alloc(_1047,_1045);
  std::shared_ptr< monty::ndarray< long long,1 > > _1053 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1051)));
  _checked_ptr_1<long long> _ptr__1053(_1053 ? _1053->raw() : nullptr,_1053 ? _1053->size(0) : 0);
  natbarvar_get(_1052,_1053);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1054 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1038,_1052,_1041,mosek::fusion::p_PSDDomain::_get_impl(_1040)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1040)->conedim2,_1053);
  ((*barvars)(_1052)) = (_1054).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1038).size()) > (int)0))
  {
    {
      var_map->setItem(_1038,(-safe_add( _1052,(int)1 )));
    }
  }
  {}
  return (_1054).as<::mosek::fusion::SymmetricVariable>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1055,monty::rc_ptr< ::mosek::fusion::Expression > _1056,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1057){
  if ((((int)((_1055).size()) > (int)0) && hasConstraint(_1055)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1055)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1057)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1058 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1056)).as<::mosek::fusion::Expression>());
  _1058->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1059 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1059(_1059 ? _1059->raw() : nullptr,_1059 ? _1059->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1060 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1060(_1060 ? _1060->raw() : nullptr,_1060 ? _1060->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1061 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1061(_1061 ? _1061->raw() : nullptr,_1061 ? _1061->size(0) : 0);
  int _1062 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1063 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1064 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1065 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1066 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1067 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1068 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1069 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1070 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1057)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1057)->shape)->size(0)) != _1062))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _7128 = (int)0;
          int _7129 = _1062;
          for (int _1071 = _7128; _1071 < _7129; ++_1071)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1057)->shape)(_1071)) != _ptr__1059[safe_add( _1063,_1071 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1072 = (int)1;
  int _7130 = (int)0;
  int _7131 = _1062;
  for (int _1073 = _7130; _1073 < _7131; ++_1073)
  {
    {
      _1072 *= _ptr__1059[safe_add( _1063,_1073 )];
    }
  }
  int _1074 = natconmap_alloc(_1072);
  std::shared_ptr< monty::ndarray< int,1 > > _1075 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1072)));
  _checked_ptr_1<int> _ptr__1075(_1075 ? _1075->raw() : nullptr,_1075 ? _1075->size(0) : 0);
  natconmap->get(_1074,_1075,(int)0);
  int _7132 = (int)0;
  int _7133 = _1072;
  for (int _1076 = _7132; _1076 < _7133; ++_1076)
  {
    {
      ((*natconmap_idx)(_ptr__1075[_1076])) = _1074;
      ((*natconmap_slackidx)(_ptr__1075[_1076])) = (int)0;
    }
  }
  ((*natconmap_type)(_1074)) = (int)4;
  putarows(_1075,rs,_1064,_1065,_1067,_1068,_1070,_1069,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1077 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1072)));
  _checked_ptr_1<double> _ptr__1077(_1077 ? _1077->raw() : nullptr,_1077 ? _1077->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1078 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1072)));
  _checked_ptr_1<double> _ptr__1078(_1078 ? _1078->raw() : nullptr,_1078 ? _1078->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1079 = natconmap_efix;
  _checked_ptr_1<double> _ptr__1079(_1079 ? _1079->raw() : nullptr,_1079 ? _1079->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1080 = mosek::fusion::p_RangeDomain::_get_impl(_1057)->lb;
  _checked_ptr_1<double> _ptr__1080(_1080 ? _1080->raw() : nullptr,_1080 ? _1080->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1081 = mosek::fusion::p_RangeDomain::_get_impl(_1057)->ub;
  _checked_ptr_1<double> _ptr__1081(_1081 ? _1081->raw() : nullptr,_1081 ? _1081->size(0) : 0);
  bool _1082 = mosek::fusion::p_RangeDomain::_get_impl(_1057)->empty;
  bool _1083 = mosek::fusion::p_RangeDomain::_get_impl(_1057)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1084 = mosek::fusion::p_RangeDomain::_get_impl(_1057)->sparsity;
  {
    int _7134 = (int)0;
    int _7135 = _1064;
    for (int _1085 = _7134; _1085 < _7135; ++_1085)
    {
      {
        _ptr__1079[_ptr__1075[_1085]] = _ptr__1061[safe_add( _1069,_1085 )];
      }
    }
    if (_1083)
    {
      {
        int _7136 = (int)0;
        int _7137 = _1072;
        for (int _1086 = _7136; _1086 < _7137; ++_1086)
        {
          {
            _ptr__1077[_1086] = _ptr__1080[(int)0];
            _ptr__1078[_1086] = _ptr__1081[(int)0];
          }
        }
      }
    }
    else if(_1082)
    {
      {
      }
    }
    else if((NULL != _1084.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1087 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1062)));
        _checked_ptr_1<int> _ptr__1087(_1087 ? _1087->raw() : nullptr,_1087 ? _1087->size(0) : 0);
        _ptr__1087[(_1062 - (int)1)] = (int)1;
        int _7138 = (int)1;
        int _7139 = _1062;
        for (int _1088 = _7138; _1088 < _7139; ++_1088)
        {
          {
            _ptr__1087[((_1062 - _1088) - (int)1)] = safe_mul( _ptr__1087[(_1062 - _1088)],_ptr__1059[(safe_add( _1063,_1062 ) - _1088)] );
          }
        }
        int _7140 = (int)0;
        int _7141 = (int)((_1080)->size(0));
        for (int _1089 = _7140; _1089 < _7141; ++_1089)
        {
          {
            int _1090 = (int)0;
            int _7142 = (int)0;
            int _7143 = _1062;
            for (int _1091 = _7142; _1091 < _7143; ++_1091)
            {
              {
                _1090 += safe_mul( _ptr__1087[_1091],((*_1084)(_1089,_1091)) );
              }
            }
            _ptr__1077[_1090] = _ptr__1080[_1089];
            _ptr__1078[_1090] = _ptr__1081[_1089];
          }
        }
      }
    }
    else
    {
      {
        int _7144 = (int)0;
        int _7145 = _1072;
        for (int _1092 = _7144; _1092 < _7145; ++_1092)
        {
          {
            _ptr__1077[_1092] = _ptr__1080[_1092];
            _ptr__1078[_1092] = _ptr__1081[_1092];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1075,_1077,_1078);
  std::vector<int> _7146;
  for (int _1094 = (int)0, _7147 = _1062; _1094 < _7147 ; ++_1094)
  {
    _7146.push_back(_ptr__1059[safe_add( _1063,_1094 )]);
  }
  auto _7148 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7146.size()),_7146.begin(),_7146.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1093 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1055,_7148,_1075);
  ((*cons)(_1074)) = (_1093).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1055).size()) > (int)0))
  {
    {
      con_map->setItem(_1055,_1074);
    }
  }
  {}
  return (_1093).as<::mosek::fusion::Constraint>();
}
void mosek::fusion::p_Model::update_bfix(std::shared_ptr< monty::ndarray< int,1 > > _1095,std::shared_ptr< monty::ndarray< double,1 > > _1096){
  _checked_ptr_1<int> _ptr__1095(_1095 ? _1095->raw() : nullptr, _1095 ? _1095->size(0) : 0);
  _checked_ptr_1<double> _ptr__1096(_1096 ? _1096->raw() : nullptr, _1096 ? _1096->size(0) : 0);
  std::vector<int> _7149;
  for (int _1097 = (int)0, _7150 = (int)((_1095)->size(0)); _1097 < _7150 ; ++_1097)
  {
    _7149.push_back((int)0);
  }
  auto _7151 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7149.size()),_7149.begin(),_7149.end()));
  task_putaijlist(_1095,_7151,_1096,(long long)((int)((_1095)->size(0))));
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1098,monty::rc_ptr< ::mosek::fusion::WorkStack > _1099,int _1100,int _1101,int _1102,int _1103,int _1104,int _1105,std::shared_ptr< monty::ndarray< int,1 > > _1106){
  _checked_ptr_1<int> _ptr__1098(_1098 ? _1098->raw() : nullptr, _1098 ? _1098->size(0) : 0);
  _checked_ptr_1<int> _ptr__1106(_1106 ? _1106->raw() : nullptr, _1106 ? _1106->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1107 = mosek::fusion::p_WorkStack::_get_impl(_1099)->i32;
  _checked_ptr_1<int> _ptr__1107(_1107 ? _1107->raw() : nullptr,_1107 ? _1107->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1108 = mosek::fusion::p_WorkStack::_get_impl(_1099)->i64;
  _checked_ptr_1<long long> _ptr__1108(_1108 ? _1108->raw() : nullptr,_1108 ? _1108->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1109 = mosek::fusion::p_WorkStack::_get_impl(_1099)->f64;
  _checked_ptr_1<double> _ptr__1109(_1109 ? _1109->raw() : nullptr,_1109 ? _1109->size(0) : 0);
  int _1110 = (int)0;
  int _1111 = (int)0;
  int _1112 = (int)0;
  int _7152 = (int)0;
  int _7153 = _1100;
  for (int _1113 = _7152; _1113 < _7153; ++_1113)
  {
    {
      int _1114 = _ptr__1107[safe_add( _1102,_1113 )];
      int _1115 = _ptr__1107[safe_add( safe_add( _1102,_1113 ),(int)1 )];
      int _1116 = _1114;
      while ( ((_1116 < _1115) && (_ptr__1108[safe_add( _1103,_1116 )] < (int)0)) )
      {
        {
          int _1117 = ((*natbarvar_idx)((-safe_add( _ptr__1108[safe_add( _1103,_1116 )],(int)1 ))));
          int _1118 = _1116;
          ++ _1116;
          while ( ((_1116 < _1115) && ((_ptr__1108[safe_add( _1103,_1116 )] < (int)0) && (_1117 == ((*natbarvar_idx)((-safe_add( _ptr__1108[safe_add( _1103,_1116 )],(int)1 ))))))) )
          {
            {
              ++ _1116;
            }
          }
          ++ _1111;
        }
      }
      _1112 += (_1116 - _1114);
      _1110 += (_1115 - _1116);
    }
  }
  _1110 += _1100;
  if ((NULL != _1106.get()))
  {
    {
      _1110 += _1100;
    }
  }
  {}
  int _1119 = (int)((_1098)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1120 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1119,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1120(_1120 ? _1120->raw() : nullptr,_1120 ? _1120->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1121 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1110)));
  _checked_ptr_1<int> _ptr__1121(_1121 ? _1121->raw() : nullptr,_1121 ? _1121->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1122 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1110)));
  _checked_ptr_1<double> _ptr__1122(_1122 ? _1122->raw() : nullptr,_1122 ? _1122->size(0) : 0);
  if ((NULL != _1106.get()))
  {
    {
      int _1123 = (int)0;
      int _7154 = (int)0;
      int _7155 = _1100;
      for (int _1124 = _7154; _1124 < _7155; ++_1124)
      {
        {
          int _1125 = (int)0;
          _ptr__1121[safe_add( _1123,_1125 )] = bfixidx;
          _ptr__1122[safe_add( _1123,_1125 )] = _ptr__1109[safe_add( _1105,_1124 )];
          ++ _1125;
          int _7156 = _ptr__1107[safe_add( _1102,_1124 )];
          int _7157 = _ptr__1107[safe_add( safe_add( _1102,_1124 ),(int)1 )];
          for (int _1126 = _7156; _1126 < _7157; ++_1126)
          {
            {
              if ((_ptr__1108[safe_add( _1103,_1126 )] > (int)0))
              {
                {
                  _ptr__1121[safe_add( _1123,_1125 )] = (int)(_ptr__1108[safe_add( _1103,_1126 )] - (int)1);
                  _ptr__1122[safe_add( _1123,_1125 )] = _ptr__1109[safe_add( _1104,_1126 )];
                  ++ _1125;
                }
              }
              {}
            }
          }
          _ptr__1121[safe_add( _1123,_1125 )] = _ptr__1106[_1124];
          _ptr__1122[safe_add( _1123,_1125 )] = (-1.0);
          ++ _1125;
          _ptr__1120[safe_add( _1124,(int)1 )] = safe_add( _ptr__1120[_1124],_1125 );
          _1123 += _1125;
        }
      }
    }
  }
  else
  {
    {
      int _1127 = (int)0;
      int _7158 = (int)0;
      int _7159 = _1100;
      for (int _1128 = _7158; _1128 < _7159; ++_1128)
      {
        {
          int _1129 = (int)0;
          _ptr__1121[safe_add( _1127,_1129 )] = bfixidx;
          _ptr__1122[safe_add( _1127,_1129 )] = _ptr__1109[safe_add( _1105,_1128 )];
          ++ _1129;
          int _7160 = _ptr__1107[safe_add( _1102,_1128 )];
          int _7161 = _ptr__1107[safe_add( safe_add( _1102,_1128 ),(int)1 )];
          for (int _1130 = _7160; _1130 < _7161; ++_1130)
          {
            {
              if ((_ptr__1108[safe_add( _1103,_1130 )] > (int)0))
              {
                {
                  _ptr__1121[safe_add( _1127,_1129 )] = (int)(_ptr__1108[safe_add( _1103,_1130 )] - (int)1);
                  _ptr__1122[safe_add( _1127,_1129 )] = _ptr__1109[safe_add( _1104,_1130 )];
                  ++ _1129;
                }
              }
              {}
            }
          }
          _ptr__1120[safe_add( _1128,(int)1 )] = safe_add( _ptr__1120[_1128],_1129 );
          _1127 += _1129;
        }
      }
    }
  }
  task_putarowlist(_1098,_1120,_1121,_1122);
  if ((_1111 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1131 = _1098;
      _checked_ptr_1<int> _ptr__1131(_1131 ? _1131->raw() : nullptr,_1131 ? _1131->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1132 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1119,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1132(_1132 ? _1132->raw() : nullptr,_1132 ? _1132->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1133 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1111)));
      _checked_ptr_1<int> _ptr__1133(_1133 ? _1133->raw() : nullptr,_1133 ? _1133->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1111)));
      _checked_ptr_1<int> _ptr__1134(_1134 ? _1134->raw() : nullptr,_1134 ? _1134->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1135 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1111)));
      _checked_ptr_1<long long> _ptr__1135(_1135 ? _1135->raw() : nullptr,_1135 ? _1135->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1136 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1112)));
      _checked_ptr_1<int> _ptr__1136(_1136 ? _1136->raw() : nullptr,_1136 ? _1136->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1137 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1112)));
      _checked_ptr_1<int> _ptr__1137(_1137 ? _1137->raw() : nullptr,_1137 ? _1137->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1138 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1112)));
      _checked_ptr_1<double> _ptr__1138(_1138 ? _1138->raw() : nullptr,_1138 ? _1138->size(0) : 0);
      int _1139 = (int)0;
      int _1140 = (int)0;
      int _7162 = (int)0;
      int _7163 = _1119;
      for (int _1141 = _7162; _1141 < _7163; ++_1141)
      {
        {
          int _1142 = _ptr__1107[safe_add( _1102,_1141 )];
          int _1143 = _ptr__1107[safe_add( safe_add( _1102,_1141 ),(int)1 )];
          while ( ((_1142 < _1143) && (_ptr__1108[safe_add( _1103,_1142 )] < (int)0)) )
          {
            {
              int _1144 = _1142;
              int _1145 = ((*natbarvar_idx)((-safe_add( _ptr__1108[safe_add( _1103,_1142 )],(int)1 ))));
              while ( ((_1142 < _1143) && ((_ptr__1108[safe_add( _1103,_1142 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1108[safe_add( _1103,_1142 )],(int)1 )))) == _1145))) )
              {
                {
                  _ptr__1136[_1140] = ((*natbarvar_i)((-safe_add( _ptr__1108[safe_add( _1103,_1142 )],(int)1 ))));
                  _ptr__1137[_1140] = ((*natbarvar_j)((-safe_add( _ptr__1108[safe_add( _1103,_1142 )],(int)1 ))));
                  if ((_ptr__1136[_1140] == _ptr__1137[_1140]))
                  {
                    {
                      _ptr__1138[_1140] = _ptr__1109[safe_add( _1104,_1142 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1138[_1140] = (0.5 * _ptr__1109[safe_add( _1104,_1142 )]);
                    }
                  }
                  ++ _1140;
                  ++ _1142;
                }
              }
              _ptr__1133[_1139] = _1145;
              _ptr__1134[_1139] = ((*natbarvar_dim)(_1145));
              _ptr__1135[_1139] = (_1142 - _1144);
              ++ _1139;
            }
          }
          _1142 = _1143;
          _ptr__1132[safe_add( _1141,(int)1 )] = _1139;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1146 = task_appendsymmatlist(_1134,_1135,_1136,_1137,_1138);
      _checked_ptr_1<long long> _ptr__1146(_1146 ? _1146->raw() : nullptr,_1146 ? _1146->size(0) : 0);
      task_putbararowlist(_1131,_1132,_1133,_1146);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1147,monty::rc_ptr< ::mosek::fusion::Expression > _1148,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1149){
  std::shared_ptr< monty::ndarray< int,1 > > _1150 = _1148->getShape();
  _checked_ptr_1<int> _ptr__1150(_1150 ? _1150->raw() : nullptr,_1150 ? _1150->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1149)->shape.get()) && (!::mosek::fusion::p_Set::match(_1150,mosek::fusion::p_PSDDomain::_get_impl(_1149)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1151;
  int _1152;
  int _1153;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1149)->axisIsSet)
  {
    {
      _1151 = (mosek::fusion::p_PSDDomain::_get_impl(_1149)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1149)->conedim2);
      int _7164;
      bool _7165 = _1151;
      if (_7165)
      {
        _7164 = mosek::fusion::p_PSDDomain::_get_impl(_1149)->conedim1;
      }
      else
      {
        _7164 = mosek::fusion::p_PSDDomain::_get_impl(_1149)->conedim2;
      }
      _1153 = _7164;
      int _7166;
      bool _7167 = _1151;
      if (_7167)
      {
        _7166 = mosek::fusion::p_PSDDomain::_get_impl(_1149)->conedim2;
      }
      else
      {
        _7166 = mosek::fusion::p_PSDDomain::_get_impl(_1149)->conedim1;
      }
      _1152 = _7166;
    }
  }
  else
  {
    {
      _1151 = true;
      _1153 = ((int)((_1150)->size(0)) - (int)2);
      _1152 = ((int)((_1150)->size(0)) - (int)1);
    }
  }
  if (((_1152 >= (int)((_1150)->size(0))) || (_ptr__1150[_1153] != _ptr__1150[_1152])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _7168;
  bool _7169 = (mosek::fusion::p_PSDDomain::_get_impl(_1149)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_7169)
  {
    _7168 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1153,_1152,_1148).as<::mosek::fusion::Expression>();
  }
  else
  {
    _7168 = _1148;
  }
  monty::rc_ptr< ::mosek::fusion::ExprCompress > _1154 = ::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1153,_1152,_7168)).as<::mosek::fusion::Expression>());
  _1154->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1155 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1155(_1155 ? _1155->raw() : nullptr,_1155 ? _1155->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1156 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1156(_1156 ? _1156->raw() : nullptr,_1156 ? _1156->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1157 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1157(_1157 ? _1157->raw() : nullptr,_1157 ? _1157->size(0) : 0);
  int _1158 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1159 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1158)));
  _checked_ptr_1<int> _ptr__1159(_1159 ? _1159->raw() : nullptr,_1159 ? _1159->size(0) : 0);
  rs->popi32(_1158,_1159,(int)0);
  int _1160 = rs->popi32();
  int _1161 = rs->popi32();
  bool _1162 = (rs->popi32() != (int)0);
  int _1163 = rs->popi32(safe_add( _1160,(int)1 ));
  int _7170;
  bool _7171 = _1162;
  if (_7171)
  {
    _7170 = rs->popi64(_1160);
  }
  else
  {
    _7170 = (-(int)99999);
  }
  int _1164 = _7170;
  int _1165 = rs->popi64(_1161);
  int _1166 = rs->popf64(_1160);
  int _1167 = rs->popf64(_1161);
  int _1168 = _ptr__1159[_1152];
  int _1169 = (safe_mul( _1168,safe_add( _1168,(int)1 ) ) / (int)2);
  int _7172 = (int)0;
  int _7173 = _1158;
  for (int _1170 = _7172; _1170 < _7173; ++_1170)
  {
    {
      if (((_1170 != _1153) && (_1170 != _1152)))
      {
        {
          _1169 *= _ptr__1159[_1170];
        }
      }
      {}
    }
  }
  int _1171 = natconmap_alloc(_1169);
  std::shared_ptr< monty::ndarray< int,1 > > _1172 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
  _checked_ptr_1<int> _ptr__1172(_1172 ? _1172->raw() : nullptr,_1172 ? _1172->size(0) : 0);
  natconmap->get(_1171,_1172,(int)0);
  putarows(_1172,rs,_1160,_1161,_1163,_1165,_1167,_1166,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1173 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1173(_1173 ? _1173->raw() : nullptr,_1173 ? _1173->size(0) : 0);
  int _7174 = (int)0;
  int _7175 = _1153;
  for (int _1174 = _7174; _1174 < _7175; ++_1174)
  {
    {
      _ptr__1173[(int)0] *= _ptr__1159[_1174];
    }
  }
  _ptr__1173[(int)1] = _ptr__1159[_1153];
  int _7176 = safe_add( _1153,(int)1 );
  int _7177 = _1152;
  for (int _1175 = _7176; _1175 < _7177; ++_1175)
  {
    {
      _ptr__1173[(int)2] *= _ptr__1159[_1175];
    }
  }
  _ptr__1173[(int)3] = _ptr__1159[_1152];
  int _7178 = safe_add( _1152,(int)1 );
  int _7179 = _1158;
  for (int _1176 = _7178; _1176 < _7179; ++_1176)
  {
    {
      _ptr__1173[(int)4] *= _ptr__1159[_1176];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1177 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1177(_1177 ? _1177->raw() : nullptr,_1177 ? _1177->size(0) : 0);
  _ptr__1177[(int)4] = (int)1;
  int _7180 = (int)1;
  int _7181 = (int)5;
  for (int _1178 = _7180; _1178 < _7181; ++_1178)
  {
    {
      _ptr__1177[(((int)5 - _1178) - (int)1)] = safe_mul( _ptr__1177[((int)5 - _1178)],_ptr__1173[((int)5 - _1178)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1179 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1169)));
  _checked_ptr_1<double> _ptr__1179(_1179 ? _1179->raw() : nullptr,_1179 ? _1179->size(0) : 0);
  if ((_1164 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _7182 = (int)0;
      int _7183 = _1160;
      for (int _1180 = _7182; _1180 < _7183; ++_1180)
      {
        {
          ((*natconmap_efix)(_ptr__1172[_1180])) = _ptr__1157[safe_add( _1166,_1180 )];
          ((*natconmap_lb)(_ptr__1172[_1180])) = (int)0;
          ((*natconmap_ub)(_ptr__1172[_1180])) = (int)0;
          _ptr__1179[_1180] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1172,_1179);
  int _1181 = safe_mul( safe_mul( _ptr__1173[(int)0],_ptr__1173[(int)2] ),_ptr__1173[(int)4] );
  int _1182 = _ptr__1173[(int)1];
  int _1183 = natbarvarmap_alloc(_1181,_1182);
  std::shared_ptr< monty::ndarray< int,1 > > _1184 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1181)));
  _checked_ptr_1<int> _ptr__1184(_1184 ? _1184->raw() : nullptr,_1184 ? _1184->size(0) : 0);
  natbarvarmap_get(_1183,_1184);
  std::vector<int> _7184;
  for (int _1186 = (int)0, _7185 = (safe_mul( _1182,safe_add( _1182,(int)1 ) ) / (int)2); _1186 < _7185 ; ++_1186)
  {
    _7184.push_back(_1182);
  }
  auto _7186 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7184.size()),_7184.begin(),_7184.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1185 = _7186;
  _checked_ptr_1<int> _ptr__1185(_1185 ? _1185->raw() : nullptr,_1185 ? _1185->size(0) : 0);
  std::vector<long long> _7187;
  for (int _1188 = (int)0, _7188 = (safe_mul( _1182,safe_add( _1182,(int)1 ) ) / (int)2); _1188 < _7188 ; ++_1188)
  {
    _7187.push_back((int)1);
  }
  auto _7189 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7187.size()),_7187.begin(),_7187.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1187 = _7189;
  _checked_ptr_1<long long> _ptr__1187(_1187 ? _1187->raw() : nullptr,_1187 ? _1187->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1189 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1182,safe_add( _1182,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1189(_1189 ? _1189->raw() : nullptr,_1189 ? _1189->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1190 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1182,safe_add( _1182,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1190(_1190 ? _1190->raw() : nullptr,_1190 ? _1190->size(0) : 0);
  std::vector<double> _7190;
  for (int _1192 = (int)0, _7191 = (safe_mul( _1182,safe_add( _1182,(int)1 ) ) / (int)2); _1192 < _7191 ; ++_1192)
  {
    _7190.push_back((-0.5));
  }
  auto _7192 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7190.size()),_7190.begin(),_7190.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1191 = _7192;
  _checked_ptr_1<double> _ptr__1191(_1191 ? _1191->raw() : nullptr,_1191 ? _1191->size(0) : 0);
  int _7193 = (int)1;
  int _7194 = safe_add( _1182,(int)1 );
  for (int _1193 = _7193; _1193 < _7194; ++_1193)
  {
    {
      _ptr__1191[((safe_mul( _1193,safe_add( _1193,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1194 = (int)0;
    int _7195 = (int)0;
    int _7196 = _1182;
    for (int _1195 = _7195; _1195 < _7196; ++_1195)
    {
      {
        int _7197 = (int)0;
        int _7198 = safe_add( _1195,(int)1 );
        for (int _1196 = _7197; _1196 < _7198; ++_1196)
        {
          {
            _ptr__1189[_1194] = _1195;
            _ptr__1190[_1194] = _1196;
            ++ _1194;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1197 = task_appendsymmatlist(_1185,_1187,_1189,_1190,_1191);
  _checked_ptr_1<long long> _ptr__1197(_1197 ? _1197->raw() : nullptr,_1197 ? _1197->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1198 = _1172;
  _checked_ptr_1<int> _ptr__1198(_1198 ? _1198->raw() : nullptr,_1198 ? _1198->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1199 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
  _checked_ptr_1<int> _ptr__1199(_1199 ? _1199->raw() : nullptr,_1199 ? _1199->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1200 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1169)));
  _checked_ptr_1<long long> _ptr__1200(_1200 ? _1200->raw() : nullptr,_1200 ? _1200->size(0) : 0);
  {
    int _1201 = (int)0;
    if (_1151)
    {
      {
        int _7199 = (int)0;
        int _7200 = _ptr__1173[(int)0];
        for (int _1202 = _7199; _1202 < _7200; ++_1202)
        {
          {
            int _7201 = (int)0;
            int _7202 = _ptr__1173[(int)1];
            for (int _1203 = _7201; _1203 < _7202; ++_1203)
            {
              {
                int _7203 = (int)0;
                int _7204 = _ptr__1173[(int)2];
                for (int _1204 = _7203; _1204 < _7204; ++_1204)
                {
                  {
                    int _7205 = (int)0;
                    int _7206 = safe_add( _1203,(int)1 );
                    for (int _1205 = _7205; _1205 < _7206; ++_1205)
                    {
                      {
                        int _7207 = (int)0;
                        int _7208 = _ptr__1173[(int)4];
                        for (int _1206 = _7207; _1206 < _7208; ++_1206)
                        {
                          {
                            _ptr__1200[_1201] = _ptr__1197[safe_add( (safe_mul( _1203,safe_add( _1203,(int)1 ) ) / (int)2),_1205 )];
                            _ptr__1199[_1201] = _ptr__1184[safe_add( safe_mul( safe_add( safe_mul( _1202,_ptr__1173[(int)2] ),_1204 ),_ptr__1173[(int)4] ),_1206 )];
                            ((*natconmap_slackidx)(_ptr__1172[_1201])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1199[_1201])),(safe_mul( _1203,safe_add( _1203,(int)1 ) ) / (int)2) ),_1205 )) - (int)1);
                            ++ _1201;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _7209 = (int)0;
        int _7210 = _ptr__1173[(int)0];
        for (int _1207 = _7209; _1207 < _7210; ++_1207)
        {
          {
            int _7211 = (int)0;
            int _7212 = _ptr__1173[(int)1];
            for (int _1208 = _7211; _1208 < _7212; ++_1208)
            {
              {
                int _7213 = (int)0;
                int _7214 = _ptr__1173[(int)2];
                for (int _1209 = _7213; _1209 < _7214; ++_1209)
                {
                  {
                    int _7215 = _1208;
                    int _7216 = _ptr__1173[(int)1];
                    for (int _1210 = _7215; _1210 < _7216; ++_1210)
                    {
                      {
                        int _7217 = (int)0;
                        int _7218 = _ptr__1173[(int)4];
                        for (int _1211 = _7217; _1211 < _7218; ++_1211)
                        {
                          {
                            _ptr__1200[_1201] = _ptr__1197[safe_add( (safe_mul( _1210,safe_add( _1210,(int)1 ) ) / (int)2),_1208 )];
                            _ptr__1199[_1201] = _ptr__1184[safe_add( safe_mul( safe_add( safe_mul( _1207,_ptr__1173[(int)2] ),_1209 ),_ptr__1173[(int)4] ),_1211 )];
                            ((*natconmap_slackidx)(_ptr__1172[_1201])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1199[_1201])),(safe_mul( _1210,safe_add( _1210,(int)1 ) ) / (int)2) ),_1208 )) - (int)1);
                            ++ _1201;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1198,_1199,_1200);
  ((*natconmap_type)(_1171)) = (-safe_add( _1183,(int)1 ));
  std::vector<long long> _7219;
  for (int _1213 = (int)0, _7220 = _1169; _1213 < _7220 ; ++_1213)
  {
    _7219.push_back(((*natconmap_slackidx)(_ptr__1172[_1213])));
  }
  auto _7221 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7219.size()),_7219.begin(),_7219.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1212 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1147,_1171,_1159,_1153,_1152,_7221,_1172);
  ((*cons)(_1171)) = (_1212).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1147).size()) > (int)0))
  {
    {
      con_map->setItem(_1147,_1171);
    }
  }
  {}
  return (_1212).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1214,monty::rc_ptr< ::mosek::fusion::Expression > _1215,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1216){
  if ((((int)((_1214).size()) > (int)0) && hasConstraint(_1214)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1214)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1214).size()) > (int)0) && hasConstraint(_1214)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1214)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1217 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1215)).as<::mosek::fusion::Expression>());
  _1217->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1218 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1218(_1218 ? _1218->raw() : nullptr,_1218 ? _1218->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1219 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1219(_1219 ? _1219->raw() : nullptr,_1219 ? _1219->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1220 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1220(_1220 ? _1220->raw() : nullptr,_1220 ? _1220->size(0) : 0);
  int _1221 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1222 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1221)));
  _checked_ptr_1<int> _ptr__1222(_1222 ? _1222->raw() : nullptr,_1222 ? _1222->size(0) : 0);
  rs->popi32(_1221,_1222,(int)0);
  int _1223 = rs->popi32();
  int _1224 = rs->popi32();
  bool _1225 = (rs->popi32() != (int)0);
  int _1226 = rs->popi32(safe_add( _1223,(int)1 ));
  int _1227 = rs->popi64(_1224);
  int _1228 = rs->popf64(_1223);
  int _1229 = rs->popf64(_1224);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1216)->shape.get()) && (!::mosek::fusion::p_Set::match(_1222,mosek::fusion::p_LinPSDDomain::_get_impl(_1216)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1230 = (int)1;
  int _7222 = (int)0;
  int _7223 = _1221;
  for (int _1231 = _7222; _1231 < _7223; ++_1231)
  {
    {
      _1230 *= _ptr__1222[_1231];
    }
  }
  int _1232 = mosek::fusion::p_LinPSDDomain::_get_impl(_1216)->conedim;
  int _1233 = _ptr__1222[_1232];
  int _1234 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1233 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1234,safe_add( _1234,(int)1 ) ) / (int)2) != _1233))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1235 = (int)1;
  int _7224 = (int)0;
  int _7225 = _1232;
  for (int _1236 = _7224; _1236 < _7225; ++_1236)
  {
    {
      _1235 *= _ptr__1222[_1236];
    }
  }
  int _1237 = (int)1;
  int _7226 = safe_add( _1232,(int)1 );
  int _7227 = _1221;
  for (int _1238 = _7226; _1238 < _7227; ++_1238)
  {
    {
      _1237 *= _ptr__1222[_1238];
    }
  }
  int _1239 = safe_mul( _1235,_1237 );
  int _1240 = natconmap_alloc(_1230);
  std::shared_ptr< monty::ndarray< int,1 > > _1241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1230)));
  _checked_ptr_1<int> _ptr__1241(_1241 ? _1241->raw() : nullptr,_1241 ? _1241->size(0) : 0);
  natconmap->get(_1240,_1241,(int)0);
  putarows(_1241,rs,_1223,_1224,_1226,_1227,_1229,_1228,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1242 = natbarvarmap_alloc(_1239,_1234);
  std::shared_ptr< monty::ndarray< int,1 > > _1243 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1239)));
  _checked_ptr_1<int> _ptr__1243(_1243 ? _1243->raw() : nullptr,_1243 ? _1243->size(0) : 0);
  natbarvarmap_get(_1242,_1243);
  ((*barvars)(_1242)) = nullptr;
  int _1244 = safe_mul( safe_mul( _1233,_1235 ),_1237 );
  std::vector<int> _7228;
  for (int _1246 = (int)0, _7229 = _1233; _1246 < _7229 ; ++_1246)
  {
    _7228.push_back(_1246);
  }
  auto _7230 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7228.size()),_7228.begin(),_7228.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1245 = _7230;
  _checked_ptr_1<int> _ptr__1245(_1245 ? _1245->raw() : nullptr,_1245 ? _1245->size(0) : 0);
  std::vector<long long> _7231;
  for (int _1248 = (int)0, _7232 = _1233; _1248 < _7232 ; ++_1248)
  {
    _7231.push_back((int)1);
  }
  auto _7233 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7231.size()),_7231.begin(),_7231.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1247 = _7233;
  _checked_ptr_1<long long> _ptr__1247(_1247 ? _1247->raw() : nullptr,_1247 ? _1247->size(0) : 0);
  std::vector<double> _7234;
  for (int _1250 = (int)0, _7235 = _1233; _1250 < _7235 ; ++_1250)
  {
    _7234.push_back((-0.5));
  }
  auto _7236 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7234.size()),_7234.begin(),_7234.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1249 = _7236;
  _checked_ptr_1<double> _ptr__1249(_1249 ? _1249->raw() : nullptr,_1249 ? _1249->size(0) : 0);
  int _7237 = (int)1;
  int _7238 = safe_add( _1233,(int)1 );
  for (int _1251 = _7237; _1251 < _7238; ++_1251)
  {
    {
      _ptr__1249[((safe_mul( _1251,safe_add( _1251,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1252 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1233)));
  _checked_ptr_1<int> _ptr__1252(_1252 ? _1252->raw() : nullptr,_1252 ? _1252->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1253 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1233)));
  _checked_ptr_1<int> _ptr__1253(_1253 ? _1253->raw() : nullptr,_1253 ? _1253->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1254 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1244)));
  _checked_ptr_1<int> _ptr__1254(_1254 ? _1254->raw() : nullptr,_1254 ? _1254->size(0) : 0);
  {
    int _1255 = (int)0;
    int _7239 = (int)0;
    int _7240 = _1235;
    for (int _1256 = _7239; _1256 < _7240; ++_1256)
    {
      {
        int _7241 = (int)0;
        int _7242 = _1234;
        for (int _1257 = _7241; _1257 < _7242; ++_1257)
        {
          {
            int _7243 = (int)0;
            int _7244 = safe_add( _1257,(int)1 );
            for (int _1258 = _7243; _1258 < _7244; ++_1258)
            {
              {
                int _7245 = (int)0;
                int _7246 = _1237;
                for (int _1259 = _7245; _1259 < _7246; ++_1259)
                {
                  {
                    _ptr__1254[_1255] = safe_add( safe_mul( _1256,_1237 ),_1259 );
                    _ptr__1252[_1255] = _1257;
                    _ptr__1253[_1255] = _1258;
                    ++ _1255;
                  }
                }
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1240)) = (-safe_add( _1242,(int)1 ));
    int _7247 = (int)0;
    int _7248 = _1230;
    for (int _1260 = _7247; _1260 < _7248; ++_1260)
    {
      {
        ((*natconmap_blockid)(_ptr__1241[_1260])) = _1240;
        ((*natconmap_idx)(_ptr__1241[_1260])) = _1260;
        ((*natconmap_efix)(_ptr__1241[_1260])) = _ptr__1220[safe_add( _1228,_1260 )];
        ((*natconmap_lb)(_ptr__1241[_1260])) = (int)0;
        ((*natconmap_ub)(_ptr__1241[_1260])) = (int)0;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1261 = task_appendsymmatlist(_1245,_1247,_1252,_1253,_1249);
  _checked_ptr_1<long long> _ptr__1261(_1261 ? _1261->raw() : nullptr,_1261 ? _1261->size(0) : 0);
  task_putbaraijlist(_1241,_1254,_1261);
  std::vector<double> _7249;
  for (int _1263 = (int)0, _7250 = _1230; _1263 < _7250 ; ++_1263)
  {
    _7249.push_back(0.0);
  }
  auto _7251 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7249.size()),_7249.begin(),_7249.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1262 = _7251;
  _checked_ptr_1<double> _ptr__1262(_1262 ? _1262->raw() : nullptr,_1262 ? _1262->size(0) : 0);
  task_con_putboundlist_fx(_1241,_1262);
  std::vector<long long> _7252;
  for (int _1265 = (int)0, _7253 = _1230; _1265 < _7253 ; ++_1265)
  {
    _7252.push_back(((*natconmap_slackidx)(_ptr__1241[_1265])));
  }
  auto _7254 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7252.size()),_7252.begin(),_7252.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1264 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1214,_1240,_1222,_1232,_1241,_7254);
  ((*cons)(_1240)) = (_1264).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1214).size()) > (int)0))
  {
    {
      con_map->setItem(_1214,_1240);
    }
  }
  {}
  return (_1264).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1266,monty::rc_ptr< ::mosek::fusion::Expression > _1267,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1268){
  if ((((int)((_1266).size()) > (int)0) && hasConstraint(_1266)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1266)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1266).size()) > (int)0) && hasConstraint(_1266)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1266)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1268)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1269 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1267)).as<::mosek::fusion::Expression>());
  _1269->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1270(_1270 ? _1270->raw() : nullptr,_1270 ? _1270->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1271(_1271 ? _1271->raw() : nullptr,_1271 ? _1271->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1272(_1272 ? _1272->raw() : nullptr,_1272 ? _1272->size(0) : 0);
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1277 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1278 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1279 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1280 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1281 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7255;
  for (int _1283 = (int)0, _7256 = _1273; _1283 < _7256 ; ++_1283)
  {
    _7255.push_back(_ptr__1270[safe_add( _1274,_1283 )]);
  }
  auto _7257 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7255.size()),_7255.begin(),_7255.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1282 = _7257;
  _checked_ptr_1<int> _ptr__1282(_1282 ? _1282->raw() : nullptr,_1282 ? _1282->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1268)->shape.get()) && (!::mosek::fusion::p_Set::match(_1282,mosek::fusion::p_ConeDomain::_get_impl(_1268)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _7258;
  bool _7259 = _1268->axisIsSet();
  if (_7259)
  {
    _7258 = _1268->getAxis();
  }
  else
  {
    _7258 = (_1273 - (int)1);
  }
  int _1284 = _7258;
  int _1285 = _ptr__1282[_1284];
  int _1286 = (int)1;
  int _1287 = (int)1;
  int _1288 = (int)1;
  {
    int _7260 = (int)0;
    int _7261 = _1273;
    for (int _1289 = _7260; _1289 < _7261; ++_1289)
    {
      {
        _1288 *= _ptr__1282[_1289];
      }
    }
    int _7262 = (int)0;
    int _7263 = _1284;
    for (int _1290 = _7262; _1290 < _7263; ++_1290)
    {
      {
        _1287 *= _ptr__1282[_1290];
      }
    }
    int _7264 = safe_add( _1284,(int)1 );
    int _7265 = _1273;
    for (int _1291 = _7264; _1291 < _7265; ++_1291)
    {
      {
        _1286 *= _ptr__1282[_1291];
      }
    }
  }
  int _1292 = safe_mul( _1287,_1286 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InQCone) && (_1285 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1285)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1285 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1285)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1285 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1285)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1285 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1285)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1285 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1285)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1285 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1285)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1293 = natvarmap_alloc(_1288);
  std::shared_ptr< monty::ndarray< int,1 > > _1294 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1288)));
  _checked_ptr_1<int> _ptr__1294(_1294 ? _1294->raw() : nullptr,_1294 ? _1294->size(0) : 0);
  natvarmap->get(_1293,_1294,(int)0);
  int _1295 = natconemap_alloc(_1292);
  int _7266 = (int)0;
  int _7267 = _1288;
  for (int _1296 = _7266; _1296 < _7267; ++_1296)
  {
    {
      ((*natvarmap_idx)(_ptr__1294[_1296])) = _1293;
    }
  }
  task_var_putboundlist_fr(_1294);
  std::shared_ptr< monty::ndarray< int,1 > > _7268;
  bool _7269 = (_1284 < ((int)((_1282)->size(0)) - (int)1));
  if (_7269)
  {
    _7268 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1294)->size(0)))));
  }
  else
  {
    _7268 = _1294;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1297 = _7268;
  _checked_ptr_1<int> _ptr__1297(_1297 ? _1297->raw() : nullptr,_1297 ? _1297->size(0) : 0);
  if ((_1284 < ((int)((_1282)->size(0)) - (int)1)))
  {
    {
      int _1298 = (int)0;
      int _7270 = (int)0;
      int _7271 = _1287;
      for (int _1299 = _7270; _1299 < _7271; ++_1299)
      {
        {
          int _7272 = (int)0;
          int _7273 = _1286;
          for (int _1300 = _7272; _1300 < _7273; ++_1300)
          {
            {
              int _7274 = (int)0;
              int _7275 = _1285;
              for (int _1301 = _7274; _1301 < _7275; ++_1301)
              {
                {
                  _ptr__1297[_1298] = _ptr__1294[safe_add( safe_mul( safe_add( safe_mul( _1299,_1285 ),_1301 ),_1286 ),_1300 )];
                  ++ _1298;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1292)));
  _checked_ptr_1<int> _ptr__1302(_1302 ? _1302->raw() : nullptr,_1302 ? _1302->size(0) : 0);
  natconemap->get(_1295,_1302,(int)0);
  ((*natconemap_dim)(_1295)) = _1285;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1302,_1285,_1292,_1297);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1302,_1285,_1292,_1297);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1302,_1285,_1292,_1297);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _7276;
      for (int _1303 = (int)0, _7277 = _1292; _1303 < _7277 ; ++_1303)
      {
        _7276.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1268)->alpha);
      }
      auto _7278 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7276.size()),_7276.begin(),_7276.end()));
      task_put_ppowcones(_1302,_1285,_1292,_1297,_7278);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1302,_1285,_1292,_1297);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1268)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _7279;
      for (int _1304 = (int)0, _7280 = _1292; _1304 < _7280 ; ++_1304)
      {
        _7279.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1268)->alpha);
      }
      auto _7281 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7279.size()),_7279.begin(),_7279.end()));
      task_put_dpowcones(_1302,_1285,_1292,_1297,_7281);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1293)) = nullptr;
  std::shared_ptr< monty::ndarray< double,1 > > _1305 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1288)));
  _checked_ptr_1<double> _ptr__1305(_1305 ? _1305->raw() : nullptr,_1305 ? _1305->size(0) : 0);
  int _1306 = natconmap_alloc(_1288);
  std::shared_ptr< monty::ndarray< int,1 > > _1307 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1288)));
  _checked_ptr_1<int> _ptr__1307(_1307 ? _1307->raw() : nullptr,_1307 ? _1307->size(0) : 0);
  natconmap->get(_1306,_1307,(int)0);
  ((*natconmap_type)(_1306)) = safe_add( _1293,(int)6 );
  {
    int _7282 = (int)0;
    int _7283 = _1288;
    for (int _1308 = _7282; _1308 < _7283; ++_1308)
    {
      {
        ((*natconmap_efix)(_ptr__1307[_1308])) = _ptr__1272[safe_add( _1280,_1308 )];
      }
    }
    int _7284 = (int)0;
    int _7285 = _1288;
    for (int _1309 = _7284; _1309 < _7285; ++_1309)
    {
      {
        ((*natconmap_lb)(_ptr__1307[_1309])) = (int)0;
      }
    }
    int _7286 = (int)0;
    int _7287 = _1288;
    for (int _1310 = _7286; _1310 < _7287; ++_1310)
    {
      {
        ((*natconmap_ub)(_ptr__1307[_1310])) = (int)0;
      }
    }
    int _7288 = (int)0;
    int _7289 = _1288;
    for (int _1311 = _7288; _1311 < _7289; ++_1311)
    {
      {
        ((*natconmap_slackidx)(_ptr__1307[_1311])) = safe_add( _ptr__1294[_1311],(int)1 );
      }
    }
    int _7290 = (int)0;
    int _7291 = _1288;
    for (int _1312 = _7290; _1312 < _7291; ++_1312)
    {
      {
        ((*natconmap_blockid)(_ptr__1307[_1312])) = _1306;
      }
    }
    int _7292 = (int)0;
    int _7293 = _1288;
    for (int _1313 = _7292; _1313 < _7293; ++_1313)
    {
      {
        ((*natconmap_idx)(_ptr__1307[_1313])) = _1313;
      }
    }
  }
  task_con_putboundlist_fx(_1307,_1305);
  putarows(_1307,rs,_1275,_1276,_1278,_1279,_1281,_1280,_1294);
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1314 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1266,_1268,_1282,_1306,_1307,_1294);
  ((*cons)(_1306)) = (_1314).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1266).size()) > (int)0))
  {
    {
      con_map->setItem(_1266,_1306);
    }
  }
  {}
  return (_1314).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1315,monty::rc_ptr< ::mosek::fusion::Expression > _1316,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1317){
  if ((((int)((_1315).size()) > (int)0) && hasConstraint(_1315)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1315)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1317)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1318 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1316)).as<::mosek::fusion::Expression>());
  _1318->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1319 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1319(_1319 ? _1319->raw() : nullptr,_1319 ? _1319->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1320 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1320(_1320 ? _1320->raw() : nullptr,_1320 ? _1320->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1321 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1321(_1321 ? _1321->raw() : nullptr,_1321 ? _1321->size(0) : 0);
  int _1322 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1323 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1324 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1325 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1326 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1327 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1328 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1329 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1330 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7294;
  for (int _1332 = (int)0, _7295 = _1322; _1332 < _7295 ; ++_1332)
  {
    _7294.push_back(_ptr__1319[safe_add( _1323,_1332 )]);
  }
  auto _7296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7294.size()),_7294.begin(),_7294.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1331 = _7296;
  _checked_ptr_1<int> _ptr__1331(_1331 ? _1331->raw() : nullptr,_1331 ? _1331->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1317)->shape.get()) && (!::mosek::fusion::p_Set::match(_1331,mosek::fusion::p_LinearDomain::_get_impl(_1317)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1333 = (int)1;
  int _7297 = (int)0;
  int _7298 = _1322;
  for (int _1334 = _7297; _1334 < _7298; ++_1334)
  {
    {
      _1333 *= _ptr__1331[_1334];
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1335;
  _checked_ptr_1<double> _ptr__1335(_1335 ? _1335->raw() : nullptr,_1335 ? _1335->size(0) : 0);
  int _1336 = natconmap_alloc(_1333);
  std::shared_ptr< monty::ndarray< int,1 > > _1337 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1333)));
  _checked_ptr_1<int> _ptr__1337(_1337 ? _1337->raw() : nullptr,_1337 ? _1337->size(0) : 0);
  natconmap->get(_1336,_1337,(int)0);
  putarows(_1337,rs,_1324,_1325,_1327,_1328,_1330,_1329,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1338 = mosek::fusion::p_LinearDomain::_get_impl(_1317)->sparsity;
    bool _1339 = mosek::fusion::p_LinearDomain::_get_impl(_1317)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1340 = mosek::fusion::p_LinearDomain::_get_impl(_1317)->bnd;
    _checked_ptr_1<double> _ptr__1340(_1340 ? _1340->raw() : nullptr,_1340 ? _1340->size(0) : 0);
    bool _1341 = mosek::fusion::p_LinearDomain::_get_impl(_1317)->scalable;
    std::shared_ptr< monty::ndarray< double,1 > > _1342 = natconmap_efix;
    _checked_ptr_1<double> _ptr__1342(_1342 ? _1342->raw() : nullptr,_1342 ? _1342->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1343 = natconmap_lb;
    _checked_ptr_1<double> _ptr__1343(_1343 ? _1343->raw() : nullptr,_1343 ? _1343->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1344 = natconmap_ub;
    _checked_ptr_1<double> _ptr__1344(_1344 ? _1344->raw() : nullptr,_1344 ? _1344->size(0) : 0);
    {
      int _7299 = (int)0;
      int _7300 = _1324;
      for (int _1345 = _7299; _1345 < _7300; ++_1345)
      {
        {
          _ptr__1342[_ptr__1337[_1345]] = _ptr__1321[safe_add( _1329,_1345 )];
        }
      }
      if ((NULL == _1340.get()))
      {
        {
          int _7301 = (int)0;
          int _7302 = _1324;
          for (int _1346 = _7301; _1346 < _7302; ++_1346)
          {
            {
              _ptr__1343[_ptr__1337[_1346]] = (int)0;
              _ptr__1344[_ptr__1337[_1346]] = (int)0;
            }
          }
        }
      }
      else if(_1341)
      {
        {
          int _7303 = (int)0;
          int _7304 = _1324;
          for (int _1347 = _7303; _1347 < _7304; ++_1347)
          {
            {
              _ptr__1343[_ptr__1337[_1347]] = _ptr__1340[(int)0];
              _ptr__1344[_ptr__1337[_1347]] = _ptr__1340[(int)0];
            }
          }
        }
      }
      else if((NULL != _1338.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1322)));
          _checked_ptr_1<int> _ptr__1348(_1348 ? _1348->raw() : nullptr,_1348 ? _1348->size(0) : 0);
          _ptr__1348[(_1322 - (int)1)] = (int)1;
          int _7305 = (int)1;
          int _7306 = _1322;
          for (int _1349 = _7305; _1349 < _7306; ++_1349)
          {
            {
              _ptr__1348[((_1322 - _1349) - (int)1)] = safe_mul( _ptr__1348[(_1322 - _1349)],_ptr__1331[(_1322 - _1349)] );
            }
          }
          int _7307 = (int)0;
          int _7308 = (int)((_1338)->size(0));
          for (int _1350 = _7307; _1350 < _7308; ++_1350)
          {
            {
              int _1351 = (int)0;
              int _7309 = (int)0;
              int _7310 = _1322;
              for (int _1352 = _7309; _1352 < _7310; ++_1352)
              {
                {
                  _1351 += safe_mul( _ptr__1348[_1352],((*_1338)(_1350,_1352)) );
                }
              }
              _ptr__1343[_ptr__1337[_1351]] = _ptr__1340[_1350];
              _ptr__1344[_ptr__1337[_1351]] = _ptr__1340[_1350];
            }
          }
        }
      }
      else if(_1339)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1353 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1322)));
          _checked_ptr_1<int> _ptr__1353(_1353 ? _1353->raw() : nullptr,_1353 ? _1353->size(0) : 0);
          _ptr__1353[(_1322 - (int)1)] = (int)1;
          int _7311 = (int)1;
          int _7312 = _1322;
          for (int _1354 = _7311; _1354 < _7312; ++_1354)
          {
            {
              _ptr__1353[((_1322 - _1354) - (int)1)] = safe_mul( _ptr__1353[(_1322 - _1354)],_ptr__1331[(_1322 - _1354)] );
            }
          }
          int _7313 = (int)0;
          int _7314 = (int)((_1338)->size(0));
          for (int _1355 = _7313; _1355 < _7314; ++_1355)
          {
            {
              int _1356 = (int)0;
              int _7315 = (int)0;
              int _7316 = _1322;
              for (int _1357 = _7315; _1357 < _7316; ++_1357)
              {
                {
                  _1356 += safe_mul( _ptr__1353[_1357],((*_1338)(_1355,_1357)) );
                }
              }
              _ptr__1343[_ptr__1337[_1356]] = (int)0;
              _ptr__1344[_ptr__1337[_1356]] = (int)0;
            }
          }
        }
      }
      else
      {
        {
          int _7317 = (int)0;
          int _7318 = _1324;
          for (int _1358 = _7317; _1358 < _7318; ++_1358)
          {
            {
              _ptr__1343[_ptr__1337[_1358]] = _ptr__1340[_1358];
              _ptr__1344[_ptr__1337[_1358]] = _ptr__1340[_1358];
            }
          }
        }
      }
    }
    std::vector<double> _7319;
    for (int _1359 = (int)0, _7320 = (int)((_1337)->size(0)); _1359 < _7320 ; ++_1359)
    {
      _7319.push_back(_ptr__1343[_ptr__1337[_1359]]);
    }
    auto _7321 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7319.size()),_7319.begin(),_7319.end()));
    _1335 = _7321;
    _ptr__1335.update(_1335 ? _1335->raw() : nullptr, _1335 ? _1335->size(0) : 0);
  }
  int _7322 = (int)0;
  int _7323 = _1333;
  for (int _1360 = _7322; _1360 < _7323; ++_1360)
  {
    {
      ((*natconmap_idx)(_ptr__1337[_1360])) = _1336;
      ((*natconmap_slackidx)(_ptr__1337[_1360])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1317)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1336)) = (int)1;
      task_con_putboundlist_fr(_1337);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1317)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1336)) = (int)3;
      task_con_putboundlist_up(_1337,_1335);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1317)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1336)) = (int)2;
      task_con_putboundlist_lo(_1337,_1335);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1317)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1336)) = (int)5;
      task_con_putboundlist_fx(_1337,_1335);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1361 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1315,_1336,_1331,_1337);
  ((*cons)(_1336)) = (_1361).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1315).size()) > (int)0))
  {
    {
      con_map->setItem(_1315,_1336);
    }
  }
  {}
  return (_1361).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1362) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1362); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1362){
  return con_map->hasItem(_1362);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1363) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1363); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1363){
  return var_map->hasItem(_1363);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1364) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1364); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1364) { return __mosek_2fusion_2Model__getConstraint(_1364); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1364){
  return (((*cons)(_1364))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1365) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1365); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1365) { return __mosek_2fusion_2Model__getConstraint(_1365); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1365){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _7324;
  bool _7325 = con_map->hasItem(_1365);
  if (_7325)
  {
    _7324 = ((*cons)(con_map->getItem(_1365)));
  }
  else
  {
    _7324 = nullptr;
  }
  return (_7324).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1366) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1366); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1366) { return __mosek_2fusion_2Model__getVariable(_1366); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1366){
  return (((*vars)(_1366))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1367) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1367); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1367) { return __mosek_2fusion_2Model__getVariable(_1367); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1367){
  if (var_map->hasItem(_1367))
  {
    {
      int _1368 = var_map->getItem(_1367);
      if ((_1368 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1368,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1368))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_type.reset();natconmap_ub.reset();natconmap_lb.reset();natconmap_efix.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1369,    std::shared_ptr< monty::ndarray< int,1 > > _1370,    std::shared_ptr< monty::ndarray< long long,1 > > _1371,    std::shared_ptr< monty::ndarray< long long,1 > > _1372){ return new mosek::fusion::SliceVariable(_1369,_1370,_1371,_1372); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1369,    std::shared_ptr< monty::ndarray< int,1 > > _1370,    std::shared_ptr< monty::ndarray< long long,1 > > _1371,    std::shared_ptr< monty::ndarray< long long,1 > > _1372) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1369,_1370,_1371,_1372); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1369,    std::shared_ptr< monty::ndarray< int,1 > > _1370,    std::shared_ptr< monty::ndarray< long long,1 > > _1371,    std::shared_ptr< monty::ndarray< long long,1 > > _1372){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1370(_1370 ? _1370->raw() : nullptr, _1370 ? _1370->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1371(_1371 ? _1371->raw() : nullptr, _1371 ? _1371->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1372(_1372 ? _1372->raw() : nullptr, _1372 ? _1372->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1369,_1370,_1371,_1372);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1372;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1371;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1370;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1373,    monty::rc_ptr< ::mosek::fusion::Model > _1374){ return new mosek::fusion::SymRangedVariable(_1373,_1374); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1373,    monty::rc_ptr< ::mosek::fusion::Model > _1374) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1373,_1374); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1373,    monty::rc_ptr< ::mosek::fusion::Model > _1374){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1373,_1374);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1373)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1373)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1373)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1373)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1373)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1375,    const std::string &  _1376,    long long _1377,    int _1378,    std::shared_ptr< monty::ndarray< long long,1 > > _1379,    std::shared_ptr< monty::ndarray< int,1 > > _1380){ return new mosek::fusion::SymRangedVariable(_1375,_1376,_1377,_1378,_1379,_1380); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1375,    const std::string &  _1376,    long long _1377,    int _1378,    std::shared_ptr< monty::ndarray< long long,1 > > _1379,    std::shared_ptr< monty::ndarray< int,1 > > _1380) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1375,_1376,_1377,_1378,_1379,_1380); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1375,    const std::string &  _1376,    long long _1377,    int _1378,    std::shared_ptr< monty::ndarray< long long,1 > > _1379,    std::shared_ptr< monty::ndarray< int,1 > > _1380){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1379(_1379 ? _1379->raw() : nullptr, _1379 ? _1379->size(0) : 0);
    _checked_ptr_1<int> _ptr__1380(_1380 ? _1380->raw() : nullptr, _1380 ? _1380->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1375,_1376,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1378),(int)(_1378)}),_1377,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1378,_1379),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1378,_1379,_1380));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1376;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1380;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1379;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1378;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1381,std::shared_ptr< monty::ndarray< double,1 > > _1382){
  _checked_ptr_1<double> _ptr__1382(_1382 ? _1382->raw() : nullptr, _1382 ? _1382->size(0) : 0);
  dual_lu(_1381,_1382,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1383,std::shared_ptr< monty::ndarray< double,1 > > _1384){
  _checked_ptr_1<double> _ptr__1384(_1384 ? _1384->raw() : nullptr, _1384 ? _1384->size(0) : 0);
  dual_lu(_1383,_1384,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1385 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7326 = (int)0;
          int _7327 = (int)((nativeidxs)->size(0));
          for (int _1386 = _7326; _1386 < _7327; ++_1386)
          {
            {
              std::string _7328;
              bool _7329 = ((int)((name).size()) == (int)0);
              if (_7329)
              {
                _7328 = std::string ("");
              }
              else
              {
                _7328 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1386 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1386 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1385.get())->varname(((*nativeidxs)(_1386)),_7328);
            }
          }
        }
      }
      else
      {
        {
          int _7330 = (int)0;
          int _7331 = (int)((sparsity)->size(0));
          for (int _1387 = _7330; _1387 < _7331; ++_1387)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1385.get())->varname(((*nativeidxs)(_1387)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1387)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1387)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1388){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1388)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1389,std::shared_ptr< monty::ndarray< long long,1 > > _1390,std::shared_ptr< monty::ndarray< int,1 > > _1391){
  _checked_ptr_1<long long> _ptr__1390(_1390 ? _1390->raw() : nullptr, _1390 ? _1390->size(0) : 0);
  _checked_ptr_1<int> _ptr__1391(_1391 ? _1391->raw() : nullptr, _1391 ? _1391->size(0) : 0);
  if ((NULL == _1390.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1392 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1389,_1389 ))));
      _checked_ptr_1<long long> _ptr__1392(_1392 ? _1392->raw() : nullptr,_1392 ? _1392->size(0) : 0);
      int _1393 = (int)0;
      {
        int _7332 = (int)0;
        int _7333 = _1389;
        for (int _1394 = _7332; _1394 < _7333; ++_1394)
        {
          {
            _ptr__1392[safe_add( safe_mul( _1394,_1389 ),_1394 )] = safe_add( _ptr__1391[_1393],(int)1 );
            ++ _1393;
            int _7334 = safe_add( _1394,(int)1 );
            int _7335 = _1389;
            for (int _1395 = _7334; _1395 < _7335; ++_1395)
            {
              {
                _ptr__1392[safe_add( safe_mul( _1394,_1389 ),_1395 )] = safe_add( _ptr__1391[_1393],(int)1 );
                _ptr__1392[safe_add( safe_mul( _1395,_1389 ),_1394 )] = safe_add( _ptr__1391[_1393],(int)1 );
                ++ _1393;
              }
            }
          }
        }
      }
      return _1392;
    }
  }
  else
  {
    {
      int _1396 = (int)0;
      {
        int _7336 = (int)0;
        int _7337 = (int)((_1390)->size(0));
        for (int _1397 = _7336; _1397 < _7337; ++_1397)
        {
          {
            int _7338;
            bool _7339 = ((_ptr__1390[_1397] % safe_add( _1389,(int)1 )) == (int)0);
            if (_7339)
            {
              _7338 = (int)1;
            }
            else
            {
              _7338 = (int)2;
            }
            _1396 += _7338;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1398 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1396)));
      _checked_ptr_1<long long> _ptr__1398(_1398 ? _1398->raw() : nullptr,_1398 ? _1398->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1399 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1396)));
      _checked_ptr_1<long long> _ptr__1399(_1399 ? _1399->raw() : nullptr,_1399 ? _1399->size(0) : 0);
      {
        int _1400 = (int)0;
        int _7340 = (int)0;
        int _7341 = (int)((_1390)->size(0));
        for (int _1401 = _7340; _1401 < _7341; ++_1401)
        {
          {
            long long _1402 = (_ptr__1390[_1401] / _1389);
            long long _1403 = (_ptr__1390[_1401] % _1389);
            _ptr__1398[_1400] = _ptr__1390[_1401];
            _ptr__1399[_1400] = safe_add( _ptr__1391[_1401],(int)1 );
            ++ _1400;
            if ((_1402 != _1403))
            {
              {
                _ptr__1398[_1400] = safe_add( safe_mul( _1403,_1389 ),_1402 );
                _ptr__1399[_1400] = safe_add( _ptr__1391[_1401],(int)1 );
                ++ _1400;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7342;
      for (int _1405 = (int)0, _7343 = _1396; _1405 < _7343 ; ++_1405)
      {
        _7342.push_back(_1405);
      }
      auto _7344 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7342.size()),_7342.begin(),_7342.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1404 = _7344;
      _checked_ptr_1<long long> _ptr__1404(_1404 ? _1404->raw() : nullptr,_1404 ? _1404->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1404,_1398,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1396));
      std::vector<long long> _7345;
      for (int _1406 = (int)0, _7346 = _1396; _1406 < _7346 ; ++_1406)
      {
        _7345.push_back(_ptr__1399[_ptr__1404[_1406]]);
      }
      auto _7347 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7345.size()),_7345.begin(),_7345.end()));
      return _7347;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1407,std::shared_ptr< monty::ndarray< long long,1 > > _1408){
  _checked_ptr_1<long long> _ptr__1408(_1408 ? _1408->raw() : nullptr, _1408 ? _1408->size(0) : 0);
  if ((NULL == _1408.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1409 = (int)0;
      {
        int _7348 = (int)0;
        int _7349 = (int)((_1408)->size(0));
        for (int _1410 = _7348; _1410 < _7349; ++_1410)
        {
          {
            int _7350;
            bool _7351 = ((_ptr__1408[_1410] % safe_add( _1407,(int)1 )) == (int)0);
            if (_7351)
            {
              _7350 = (int)1;
            }
            else
            {
              _7350 = (int)2;
            }
            _1409 += _7350;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1411 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1409)));
      _checked_ptr_1<long long> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
      {
        int _1412 = (int)0;
        int _7352 = (int)0;
        int _7353 = (int)((_1408)->size(0));
        for (int _1413 = _7352; _1413 < _7353; ++_1413)
        {
          {
            long long _1414 = (_ptr__1408[_1413] / _1407);
            long long _1415 = (_ptr__1408[_1413] % _1407);
            _ptr__1411[_1412] = _ptr__1408[_1413];
            ++ _1412;
            if ((_1414 != _1415))
            {
              {
                _ptr__1411[_1412] = safe_add( safe_mul( _1415,_1407 ),_1414 );
                ++ _1412;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7354;
      for (int _1417 = (int)0, _7355 = _1409; _1417 < _7355 ; ++_1417)
      {
        _7354.push_back(_1417);
      }
      auto _7356 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7354.size()),_7354.begin(),_7354.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1416 = _7356;
      _checked_ptr_1<long long> _ptr__1416(_1416 ? _1416->raw() : nullptr,_1416 ? _1416->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1416,_1411,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1409));
      std::vector<long long> _7357;
      for (int _1418 = (int)0, _7358 = _1409; _1418 < _7358 ; ++_1418)
      {
        _7357.push_back(_ptr__1411[_ptr__1416[_1418]]);
      }
      auto _7359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7357.size()),_7357.begin(),_7357.end()));
      return _7359;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1419,    monty::rc_ptr< ::mosek::fusion::Model > _1420){ return new mosek::fusion::RangedVariable(_1419,_1420); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1419,    monty::rc_ptr< ::mosek::fusion::Model > _1420) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1419,_1420); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1419,    monty::rc_ptr< ::mosek::fusion::Model > _1420){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1419,_1420);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1419)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1419)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1419)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1419)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1419)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1421,    const std::string &  _1422,    long long _1423,    std::shared_ptr< monty::ndarray< int,1 > > _1424,    std::shared_ptr< monty::ndarray< long long,1 > > _1425,    std::shared_ptr< monty::ndarray< int,1 > > _1426){ return new mosek::fusion::RangedVariable(_1421,_1422,_1423,_1424,_1425,_1426); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1421,    const std::string &  _1422,    long long _1423,    std::shared_ptr< monty::ndarray< int,1 > > _1424,    std::shared_ptr< monty::ndarray< long long,1 > > _1425,    std::shared_ptr< monty::ndarray< int,1 > > _1426) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1421,_1422,_1423,_1424,_1425,_1426); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1421,    const std::string &  _1422,    long long _1423,    std::shared_ptr< monty::ndarray< int,1 > > _1424,    std::shared_ptr< monty::ndarray< long long,1 > > _1425,    std::shared_ptr< monty::ndarray< int,1 > > _1426){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1424(_1424 ? _1424->raw() : nullptr, _1424 ? _1424->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1425(_1425 ? _1425->raw() : nullptr, _1425 ? _1425->size(0) : 0);
    _checked_ptr_1<int> _ptr__1426(_1426 ? _1426->raw() : nullptr, _1426 ? _1426->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1421,_1422,_1424,_1423,_1425,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1426));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1426;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1425;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1422;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1424;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1427,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1428) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1427,_1428); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1427,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1428) { return __mosek_2fusion_2RangedVariable__elementDesc(_1427,_1428); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1427,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1428){
  _pubthis->elementName(_1427,_1428);
  _1428->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1428;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1429 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1430 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1430->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1430->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7360 = (int)1;
          int _7361 = _pubthis->getND();
          for (int _1431 = _7360; _1431 < _7361; ++_1431)
          {
            {
              _1430->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1431);
            }
          }
        }
      }
      {}
      _1430->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1429.get())->varnames(nativeidxs,_1430->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1432,std::shared_ptr< monty::ndarray< double,1 > > _1433){
  _checked_ptr_1<double> _ptr__1433(_1433 ? _1433->raw() : nullptr, _1433 ? _1433->size(0) : 0);
  dual_lu(_1432,_1433,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1434,std::shared_ptr< monty::ndarray< double,1 > > _1435){
  _checked_ptr_1<double> _ptr__1435(_1435 ? _1435->raw() : nullptr, _1435 ? _1435->size(0) : 0);
  dual_lu(_1434,_1435,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1436){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1436)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1437){
  _checked_ptr_1<int> _ptr__1437(_1437 ? _1437->raw() : nullptr, _1437 ? _1437->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1438 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1437)->size(0)))));
  _checked_ptr_1<long long> _ptr__1438(_1438 ? _1438->raw() : nullptr,_1438 ? _1438->size(0) : 0);
  int _7362 = (int)0;
  int _7363 = (int)((_1437)->size(0));
  for (int _1439 = _7362; _1439 < _7363; ++_1439)
  {
    {
      _ptr__1438[_1439] = safe_add( _ptr__1437[_1439],(int)1 );
    }
  }
  return _1438;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1440,    monty::rc_ptr< ::mosek::fusion::Model > _1441){ return new mosek::fusion::LinearPSDVariable(_1440,_1441); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1440,    monty::rc_ptr< ::mosek::fusion::Model > _1441) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1440,_1441); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1440,    monty::rc_ptr< ::mosek::fusion::Model > _1441){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1440,_1441);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1440)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1440)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1440)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1440)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1440)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1442,    const std::string &  _1443,    int _1444,    std::shared_ptr< monty::ndarray< int,1 > > _1445,    int _1446,    std::shared_ptr< monty::ndarray< long long,1 > > _1447){ return new mosek::fusion::LinearPSDVariable(_1442,_1443,_1444,_1445,_1446,_1447); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1442,    const std::string &  _1443,    int _1444,    std::shared_ptr< monty::ndarray< int,1 > > _1445,    int _1446,    std::shared_ptr< monty::ndarray< long long,1 > > _1447) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1442,_1443,_1444,_1445,_1446,_1447); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1442,    const std::string &  _1443,    int _1444,    std::shared_ptr< monty::ndarray< int,1 > > _1445,    int _1446,    std::shared_ptr< monty::ndarray< long long,1 > > _1447){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1445(_1445 ? _1445->raw() : nullptr, _1445 ? _1445->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1447(_1447 ? _1447->raw() : nullptr, _1447 ? _1447->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1442,_1443,_1445,_1444,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1447));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1443;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1446;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1444;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1445;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1447;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1448 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1448->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1448->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1448->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7364 = (int)1;
  int _7365 = (int)((shape)->size(0));
  for (int _1449 = _7364; _1449 < _7365; ++_1449)
  {
    {
      _1448->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1449)));
    }
  }
  _1448->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1448->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1450) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1450); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1450){
  _checked_ptr_1<long long> _ptr__1450(_1450 ? _1450->raw() : nullptr, _1450 ? _1450->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1451) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1451); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1451){
  _checked_ptr_1<long long> _ptr__1451(_1451 ? _1451->raw() : nullptr, _1451 ? _1451->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1452){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1452)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1453){
  _checked_ptr_1<long long> _ptr__1453(_1453 ? _1453->raw() : nullptr, _1453 ? _1453->size(0) : 0);
  std::vector<long long> _7366;
  for (int _1454 = (int)0, _7367 = (int)((_1453)->size(0)); _1454 < _7367 ; ++_1454)
  {
    _7366.push_back((-safe_add( _ptr__1453[_1454],(int)1 )));
  }
  auto _7368 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7366.size()),_7366.begin(),_7366.end()));
  return _7368;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1455,    monty::rc_ptr< ::mosek::fusion::Model > _1456){ return new mosek::fusion::PSDVariable(_1455,_1456); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1455,    monty::rc_ptr< ::mosek::fusion::Model > _1456) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1455,_1456); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1455,    monty::rc_ptr< ::mosek::fusion::Model > _1456){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1455,_1456);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1455)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1455)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1455)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1455)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1455)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1455)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1457,    const std::string &  _1458,    int _1459,    std::shared_ptr< monty::ndarray< int,1 > > _1460,    int _1461,    int _1462,    std::shared_ptr< monty::ndarray< long long,1 > > _1463){ return new mosek::fusion::PSDVariable(_1457,_1458,_1459,_1460,_1461,_1462,_1463); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1457,    const std::string &  _1458,    int _1459,    std::shared_ptr< monty::ndarray< int,1 > > _1460,    int _1461,    int _1462,    std::shared_ptr< monty::ndarray< long long,1 > > _1463) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1457,_1458,_1459,_1460,_1461,_1462,_1463); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1457,    const std::string &  _1458,    int _1459,    std::shared_ptr< monty::ndarray< int,1 > > _1460,    int _1461,    int _1462,    std::shared_ptr< monty::ndarray< long long,1 > > _1463){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1460(_1460 ? _1460->raw() : nullptr, _1460 ? _1460->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1463(_1463 ? _1463->raw() : nullptr, _1463 ? _1463->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1457,_1458,_1460,_1459,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1460,_1461,_1462,_1463));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1459;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1463;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1458;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1460;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1461;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1462;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1464 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1464->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1464->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1464->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7369 = (int)1;
  int _7370 = (int)((shape)->size(0));
  for (int _1465 = _7369; _1465 < _7370; ++_1465)
  {
    {
      _1464->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1465)));
    }
  }
  _1464->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1464->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1466,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1467) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1466,_1467); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1466,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1467) { return __mosek_2fusion_2PSDVariable__elementDesc(_1466,_1467); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1466,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1467){
  _pubthis->elementName(_1466,_1467);
  _1467->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1467;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1468){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1468)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1469,int _1470,int _1471,std::shared_ptr< monty::ndarray< long long,1 > > _1472){
  _checked_ptr_1<int> _ptr__1469(_1469 ? _1469->raw() : nullptr, _1469 ? _1469->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1472(_1472 ? _1472->raw() : nullptr, _1472 ? _1472->size(0) : 0);
  int _1473 = (int)((_1469)->size(0));
  bool _1474 = (_1470 < _1471);
  int _7371;
  bool _7372 = _1474;
  if (_7372)
  {
    _7371 = _1470;
  }
  else
  {
    _7371 = _1471;
  }
  int _1475 = _7371;
  int _7373;
  bool _7374 = (!_1474);
  if (_7374)
  {
    _7373 = _1470;
  }
  else
  {
    _7373 = _1471;
  }
  int _1476 = _7373;
  int _1477 = (int)1;
  int _7375 = (int)0;
  int _7376 = _1475;
  for (int _1478 = _7375; _1478 < _7376; ++_1478)
  {
    {
      _1477 *= _ptr__1469[_1478];
    }
  }
  int _1479 = _ptr__1469[_1475];
  int _1480 = (int)1;
  int _7377 = safe_add( _1475,(int)1 );
  int _7378 = _1476;
  for (int _1481 = _7377; _1481 < _7378; ++_1481)
  {
    {
      _1480 *= _ptr__1469[_1481];
    }
  }
  int _1482 = _ptr__1469[_1476];
  int _1483 = (int)1;
  int _7379 = safe_add( _1476,(int)1 );
  int _7380 = _1473;
  for (int _1484 = _7379; _1484 < _7380; ++_1484)
  {
    {
      _1483 *= _ptr__1469[_1484];
    }
  }
  int _1485 = safe_mul( safe_mul( safe_mul( safe_mul( _1477,_1479 ),_1480 ),_1482 ),_1483 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1486 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1485)));
  _checked_ptr_1<long long> _ptr__1486(_1486 ? _1486->raw() : nullptr,_1486 ? _1486->size(0) : 0);
  int _1487 = _1483;
  int _1488 = safe_mul( _1487,_1482 );
  int _1489 = safe_mul( _1488,_1480 );
  int _1490 = safe_mul( _1489,_1489 );
  {
    int _1491 = (int)0;
    int _7381 = (int)0;
    int _7382 = _1477;
    for (int _1492 = _7381; _1492 < _7382; ++_1492)
    {
      {
        int _7383 = (int)0;
        int _7384 = _1482;
        for (int _1493 = _7383; _1493 < _7384; ++_1493)
        {
          {
            int _7385 = (int)0;
            int _7386 = _1480;
            for (int _1494 = _7385; _1494 < _7386; ++_1494)
            {
              {
                int _7387 = _1493;
                int _7388 = _1479;
                for (int _1495 = _7387; _1495 < _7388; ++_1495)
                {
                  {
                    int _7389 = (int)0;
                    int _7390 = _1483;
                    for (int _1496 = _7389; _1496 < _7390; ++_1496)
                    {
                      {
                        _ptr__1486[safe_add( safe_add( safe_add( safe_add( safe_mul( _1492,_1490 ),safe_mul( _1495,_1489 ) ),safe_mul( _1494,_1488 ) ),safe_mul( _1493,_1487 ) ),_1496 )] = (-safe_add( _ptr__1472[_1491],(int)1 ));
                        _ptr__1486[safe_add( safe_add( safe_add( safe_add( safe_mul( _1492,_1490 ),safe_mul( _1493,_1489 ) ),safe_mul( _1494,_1488 ) ),safe_mul( _1495,_1487 ) ),_1496 )] = (-safe_add( _ptr__1472[_1491],(int)1 ));
                        ++ _1491;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1486;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1497,    monty::rc_ptr< ::mosek::fusion::Model > _1498){ return new mosek::fusion::SymLinearVariable(_1497,_1498); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1497,    monty::rc_ptr< ::mosek::fusion::Model > _1498) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1497,_1498); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1497,    monty::rc_ptr< ::mosek::fusion::Model > _1498){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1497,_1498);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1497)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1497)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1497)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1497)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1497)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1499,    const std::string &  _1500,    long long _1501,    int _1502,    std::shared_ptr< monty::ndarray< long long,1 > > _1503,    std::shared_ptr< monty::ndarray< int,1 > > _1504){ return new mosek::fusion::SymLinearVariable(_1499,_1500,_1501,_1502,_1503,_1504); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1499,    const std::string &  _1500,    long long _1501,    int _1502,    std::shared_ptr< monty::ndarray< long long,1 > > _1503,    std::shared_ptr< monty::ndarray< int,1 > > _1504) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1499,_1500,_1501,_1502,_1503,_1504); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1499,    const std::string &  _1500,    long long _1501,    int _1502,    std::shared_ptr< monty::ndarray< long long,1 > > _1503,    std::shared_ptr< monty::ndarray< int,1 > > _1504){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1503(_1503 ? _1503->raw() : nullptr, _1503 ? _1503->size(0) : 0);
    _checked_ptr_1<int> _ptr__1504(_1504 ? _1504->raw() : nullptr, _1504 ? _1504->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1499,_1500,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1502),(int)(_1502)}),_1501,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1502,_1503),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1502,_1503,_1504));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1500;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1504;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1503;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1502;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1505 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7391 = (int)0;
          int _7392 = (int)((nativeidxs)->size(0));
          for (int _1506 = _7391; _1506 < _7392; ++_1506)
          {
            {
              std::string _7393;
              bool _7394 = ((int)((name).size()) == (int)0);
              if (_7394)
              {
                _7393 = std::string ("");
              }
              else
              {
                _7393 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1506 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1506 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1505.get())->varname(((*nativeidxs)(_1506)),_7393);
            }
          }
        }
      }
      else
      {
        {
          int _7395 = (int)0;
          int _7396 = (int)((sparsity)->size(0));
          for (int _1507 = _7395; _1507 < _7396; ++_1507)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1505.get())->varname(((*nativeidxs)(_1507)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1507)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1507)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1508){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1508)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1509,std::shared_ptr< monty::ndarray< long long,1 > > _1510,std::shared_ptr< monty::ndarray< int,1 > > _1511){
  _checked_ptr_1<long long> _ptr__1510(_1510 ? _1510->raw() : nullptr, _1510 ? _1510->size(0) : 0);
  _checked_ptr_1<int> _ptr__1511(_1511 ? _1511->raw() : nullptr, _1511 ? _1511->size(0) : 0);
  if ((NULL == _1510.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1512 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1509,_1509 ))));
      _checked_ptr_1<long long> _ptr__1512(_1512 ? _1512->raw() : nullptr,_1512 ? _1512->size(0) : 0);
      int _1513 = (int)0;
      {
        int _7397 = (int)0;
        int _7398 = _1509;
        for (int _1514 = _7397; _1514 < _7398; ++_1514)
        {
          {
            _ptr__1512[safe_add( safe_mul( _1514,_1509 ),_1514 )] = safe_add( _ptr__1511[_1513],(int)1 );
            ++ _1513;
            int _7399 = safe_add( _1514,(int)1 );
            int _7400 = _1509;
            for (int _1515 = _7399; _1515 < _7400; ++_1515)
            {
              {
                _ptr__1512[safe_add( safe_mul( _1514,_1509 ),_1515 )] = safe_add( _ptr__1511[_1513],(int)1 );
                _ptr__1512[safe_add( safe_mul( _1515,_1509 ),_1514 )] = safe_add( _ptr__1511[_1513],(int)1 );
                ++ _1513;
              }
            }
          }
        }
      }
      return _1512;
    }
  }
  else
  {
    {
      int _1516 = (int)0;
      {
        int _7401 = (int)0;
        int _7402 = (int)((_1510)->size(0));
        for (int _1517 = _7401; _1517 < _7402; ++_1517)
        {
          {
            int _7403;
            bool _7404 = ((_ptr__1510[_1517] % safe_add( _1509,(int)1 )) == (int)0);
            if (_7404)
            {
              _7403 = (int)1;
            }
            else
            {
              _7403 = (int)2;
            }
            _1516 += _7403;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1518 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1516)));
      _checked_ptr_1<long long> _ptr__1518(_1518 ? _1518->raw() : nullptr,_1518 ? _1518->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1519 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1516)));
      _checked_ptr_1<long long> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
      {
        int _1520 = (int)0;
        int _7405 = (int)0;
        int _7406 = (int)((_1510)->size(0));
        for (int _1521 = _7405; _1521 < _7406; ++_1521)
        {
          {
            long long _1522 = (_ptr__1510[_1521] / _1509);
            long long _1523 = (_ptr__1510[_1521] % _1509);
            _ptr__1518[_1520] = _ptr__1510[_1521];
            _ptr__1519[_1520] = safe_add( _ptr__1511[_1521],(int)1 );
            ++ _1520;
            if ((_1522 != _1523))
            {
              {
                _ptr__1518[_1520] = safe_add( safe_mul( _1523,_1509 ),_1522 );
                _ptr__1519[_1520] = safe_add( _ptr__1511[_1521],(int)1 );
                ++ _1520;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7407;
      for (int _1525 = (int)0, _7408 = _1516; _1525 < _7408 ; ++_1525)
      {
        _7407.push_back(_1525);
      }
      auto _7409 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7407.size()),_7407.begin(),_7407.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1524 = _7409;
      _checked_ptr_1<long long> _ptr__1524(_1524 ? _1524->raw() : nullptr,_1524 ? _1524->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1524,_1518,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1516));
      std::vector<long long> _7410;
      for (int _1526 = (int)0, _7411 = _1516; _1526 < _7411 ; ++_1526)
      {
        _7410.push_back(_ptr__1519[_ptr__1524[_1526]]);
      }
      auto _7412 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7410.size()),_7410.begin(),_7410.end()));
      return _7412;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1527,std::shared_ptr< monty::ndarray< long long,1 > > _1528){
  _checked_ptr_1<long long> _ptr__1528(_1528 ? _1528->raw() : nullptr, _1528 ? _1528->size(0) : 0);
  if ((NULL == _1528.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1529 = (int)0;
      {
        int _7413 = (int)0;
        int _7414 = (int)((_1528)->size(0));
        for (int _1530 = _7413; _1530 < _7414; ++_1530)
        {
          {
            int _7415;
            bool _7416 = ((_ptr__1528[_1530] % safe_add( _1527,(int)1 )) == (int)0);
            if (_7416)
            {
              _7415 = (int)1;
            }
            else
            {
              _7415 = (int)2;
            }
            _1529 += _7415;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1531 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1529)));
      _checked_ptr_1<long long> _ptr__1531(_1531 ? _1531->raw() : nullptr,_1531 ? _1531->size(0) : 0);
      {
        int _1532 = (int)0;
        int _7417 = (int)0;
        int _7418 = (int)((_1528)->size(0));
        for (int _1533 = _7417; _1533 < _7418; ++_1533)
        {
          {
            long long _1534 = (_ptr__1528[_1533] / _1527);
            long long _1535 = (_ptr__1528[_1533] % _1527);
            _ptr__1531[_1532] = _ptr__1528[_1533];
            ++ _1532;
            if ((_1534 != _1535))
            {
              {
                _ptr__1531[_1532] = safe_add( safe_mul( _1535,_1527 ),_1534 );
                ++ _1532;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7419;
      for (int _1537 = (int)0, _7420 = _1529; _1537 < _7420 ; ++_1537)
      {
        _7419.push_back(_1537);
      }
      auto _7421 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7419.size()),_7419.begin(),_7419.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1536 = _7421;
      _checked_ptr_1<long long> _ptr__1536(_1536 ? _1536->raw() : nullptr,_1536 ? _1536->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1536,_1531,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1529));
      std::vector<long long> _7422;
      for (int _1538 = (int)0, _7423 = _1529; _1538 < _7423 ; ++_1538)
      {
        _7422.push_back(_ptr__1531[_ptr__1536[_1538]]);
      }
      auto _7424 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7422.size()),_7422.begin(),_7422.end()));
      return _7424;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1539,    monty::rc_ptr< ::mosek::fusion::Model > _1540){ return new mosek::fusion::LinearVariable(_1539,_1540); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1539,    monty::rc_ptr< ::mosek::fusion::Model > _1540) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1539,_1540); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1539,    monty::rc_ptr< ::mosek::fusion::Model > _1540){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1539,_1540);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1539)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1539)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1539)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1539)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1539)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1541,    const std::string &  _1542,    long long _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544,    std::shared_ptr< monty::ndarray< long long,1 > > _1545,    std::shared_ptr< monty::ndarray< int,1 > > _1546){ return new mosek::fusion::LinearVariable(_1541,_1542,_1543,_1544,_1545,_1546); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1541,    const std::string &  _1542,    long long _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544,    std::shared_ptr< monty::ndarray< long long,1 > > _1545,    std::shared_ptr< monty::ndarray< int,1 > > _1546) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1541,_1542,_1543,_1544,_1545,_1546); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1541,    const std::string &  _1542,    long long _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544,    std::shared_ptr< monty::ndarray< long long,1 > > _1545,    std::shared_ptr< monty::ndarray< int,1 > > _1546){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1544(_1544 ? _1544->raw() : nullptr, _1544 ? _1544->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1545(_1545 ? _1545->raw() : nullptr, _1545 ? _1545->size(0) : 0);
    _checked_ptr_1<int> _ptr__1546(_1546 ? _1546->raw() : nullptr, _1546 ? _1546->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1541,_1542,_1544,_1543,_1545,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1546));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1542;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1546;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1545;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1544;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1547 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1547->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1547->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7425 = (int)1;
      int _7426 = (int)((shape)->size(0));
      for (int _1548 = _7425; _1548 < _7426; ++_1548)
      {
        {
          _1547->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1548)));
        }
      }
    }
  }
  {}
  _1547->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1547->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1549 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1550 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1550->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1550->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7427 = (int)1;
          int _7428 = _pubthis->getND();
          for (int _1551 = _7427; _1551 < _7428; ++_1551)
          {
            {
              _1550->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1551);
            }
          }
        }
      }
      {}
      _1550->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7429;
      bool _7430 = (_pubthis->getND() > (int)0);
      if (_7430)
      {
        _7429 = _pubthis->getShape();
      }
      else
      {
        _7429 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1549.get())->varnames(nativeidxs,_1550->toString(),_7429,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1552){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1552)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1553){
  _checked_ptr_1<int> _ptr__1553(_1553 ? _1553->raw() : nullptr, _1553 ? _1553->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1554 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1553)->size(0)))));
  _checked_ptr_1<long long> _ptr__1554(_1554 ? _1554->raw() : nullptr,_1554 ? _1554->size(0) : 0);
  int _7431 = (int)0;
  int _7432 = (int)((_1553)->size(0));
  for (int _1555 = _7431; _1555 < _7432; ++_1555)
  {
    {
      _ptr__1554[_1555] = safe_add( _ptr__1553[_1555],(int)1 );
    }
  }
  return _1554;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1556,    monty::rc_ptr< ::mosek::fusion::Model > _1557){ return new mosek::fusion::ConicVariable(_1556,_1557); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1556,    monty::rc_ptr< ::mosek::fusion::Model > _1557) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1556,_1557); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1556,    monty::rc_ptr< ::mosek::fusion::Model > _1557){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1556,_1557);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1556)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1556)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1556)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1556)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1556)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1556)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1558,    const std::string &  _1559,    int _1560,    std::shared_ptr< monty::ndarray< int,1 > > _1561,    std::shared_ptr< monty::ndarray< int,1 > > _1562){ return new mosek::fusion::ConicVariable(_1558,_1559,_1560,_1561,_1562); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1558,    const std::string &  _1559,    int _1560,    std::shared_ptr< monty::ndarray< int,1 > > _1561,    std::shared_ptr< monty::ndarray< int,1 > > _1562) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1558,_1559,_1560,_1561,_1562); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1558,    const std::string &  _1559,    int _1560,    std::shared_ptr< monty::ndarray< int,1 > > _1561,    std::shared_ptr< monty::ndarray< int,1 > > _1562){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1561(_1561 ? _1561->raw() : nullptr, _1561 ? _1561->size(0) : 0);
    _checked_ptr_1<int> _ptr__1562(_1562 ? _1562->raw() : nullptr, _1562 ? _1562->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1558,_1559,_1561,_1560,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1562));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1559;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1560;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1561;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1562;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1563 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1563->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1563->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1563->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1563->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7433 = (int)1;
  int _7434 = (int)((shape)->size(0));
  for (int _1564 = _7433; _1564 < _7434; ++_1564)
  {
    {
      _1563->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1564)));
    }
  }
  _1563->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1563->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1565 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1566 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1566->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1566->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _7435 = (int)1;
      int _7436 = _pubthis->getND();
      for (int _1567 = _7435; _1567 < _7436; ++_1567)
      {
        {
          _1566->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1567);
        }
      }
      _1566->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7437;
      bool _7438 = (_pubthis->getND() > (int)0);
      if (_7438)
      {
        _7437 = _pubthis->getShape();
      }
      else
      {
        _7437 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1565.get())->varnames(nativeidxs,_1566->toString(),_7437,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1568){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1568)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1569){
  _checked_ptr_1<int> _ptr__1569(_1569 ? _1569->raw() : nullptr, _1569 ? _1569->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1570 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1569)->size(0)))));
  _checked_ptr_1<long long> _ptr__1570(_1570 ? _1570->raw() : nullptr,_1570 ? _1570->size(0) : 0);
  int _7439 = (int)0;
  int _7440 = (int)((_1569)->size(0));
  for (int _1571 = _7439; _1571 < _7440; ++_1571)
  {
    {
      _ptr__1570[_1571] = safe_add( _ptr__1569[_1571],(int)1 );
    }
  }
  return _1570;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1572,    monty::rc_ptr< ::mosek::fusion::Model > _1573){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1572,_1573);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1572)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1572)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1572)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1572)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1572)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1574,    const std::string &  _1575,    std::shared_ptr< monty::ndarray< int,1 > > _1576,    long long _1577,    std::shared_ptr< monty::ndarray< long long,1 > > _1578,    std::shared_ptr< monty::ndarray< long long,1 > > _1579){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1576(_1576 ? _1576->raw() : nullptr, _1576 ? _1576->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1578(_1578 ? _1578->raw() : nullptr, _1578 ? _1578->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1579(_1579 ? _1579->raw() : nullptr, _1579 ? _1579->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1574,_1576,_1578,_1579);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1575;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1577;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1576;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1578;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1579;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1580,_1581); }void mosek::fusion::p_ModelVariable::elementName(long long _1580,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1581){
  std::string _7441;
  bool _7442 = ((int)((name).size()) == (int)0);
  if (_7442)
  {
    _7441 = std::string ("_");
  }
  else
  {
    _7441 = name;
  }
  _1581->__mosek_2fusion_2Utils_2StringBuffer__a(_7441)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1580))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1583){ return new mosek::fusion::NilVariable(_1583); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1583) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1583); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1583){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1583(_1583 ? _1583->raw() : nullptr, _1583 ? _1583->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1583),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _7443;
    for (int _1584 = (int)0, _7444 = (int)((_1583)->size(0)); _1584 < _7444 ; ++_1584)
    {
      _7443.push_back(_ptr__1583[_1584]);
    }
    auto _7445 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7443.size()),_7443.begin(),_7443.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _7445;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)}));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1585,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1586) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1585,_1586); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1585,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1586) { return __mosek_2fusion_2NilVariable__elementDesc(_1585,_1586); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1585,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1586){
  return _1586;
}
void mosek::fusion::NilVariable :: elementName(long long _1587,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1588) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1587,_1588); }void mosek::fusion::p_NilVariable::elementName(long long _1587,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1588){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1589,std::shared_ptr< monty::ndarray< long long,1 > > _1590,std::shared_ptr< monty::ndarray< long long,1 > > _1591) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1589,_1590,_1591); }int mosek::fusion::p_NilVariable::inst(int _1589,std::shared_ptr< monty::ndarray< long long,1 > > _1590,std::shared_ptr< monty::ndarray< long long,1 > > _1591){
  _checked_ptr_1<long long> _ptr__1590(_1590 ? _1590->raw() : nullptr, _1590 ? _1590->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1591(_1591 ? _1591->raw() : nullptr, _1591 ? _1591->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1592,std::shared_ptr< monty::ndarray< long long,1 > > _1593) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1592,_1593); }void mosek::fusion::p_NilVariable::inst(int _1592,std::shared_ptr< monty::ndarray< long long,1 > > _1593){
  _checked_ptr_1<long long> _ptr__1593(_1593 ? _1593->raw() : nullptr, _1593 ? _1593->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1594,bool _1595) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1594,_1595); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1594,bool _1595){
  _checked_ptr_1<double> _ptr__1594(_1594 ? _1594->raw() : nullptr, _1594 ? _1594->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1596,std::shared_ptr< monty::ndarray< double,1 > > _1597,bool _1598) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1596,_1597,_1598); }void mosek::fusion::p_NilVariable::values(int _1596,std::shared_ptr< monty::ndarray< double,1 > > _1597,bool _1598){
  _checked_ptr_1<double> _ptr__1597(_1597 ? _1597->raw() : nullptr, _1597 ? _1597->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1599) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__index(_1599); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__index(_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1599) { return __mosek_2fusion_2NilVariable__index(_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1599){
  _checked_ptr_1<int> _ptr__1599(_1599 ? _1599->raw() : nullptr, _1599 ? _1599->size(0) : 0);
  std::vector<int> _7446;
  for (int _1600 = (int)0, _7447 = (int)((shape)->size(0)); _1600 < _7447 ; ++_1600)
  {
    _7446.push_back((int)1);
  }
  auto _7448 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7446.size()),_7446.begin(),_7446.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7448)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1601) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1601); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1601) { return __mosek_2fusion_2NilVariable__index(_1601); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1601) { return __mosek_2fusion_2NilVariable__index(_1601); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1601) { return __mosek_2fusion_2NilVariable__index(_1601); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1601){
  std::vector<int> _7449;
  for (int _1602 = (int)0, _7450 = (int)((shape)->size(0)); _1602 < _7450 ; ++_1602)
  {
    _7449.push_back((int)1);
  }
  auto _7451 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7449.size()),_7449.begin(),_7449.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7451)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1603,std::shared_ptr< monty::ndarray< int,1 > > _1604) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1603,_1604); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1603,std::shared_ptr< monty::ndarray< int,1 > > _1604) { return __mosek_2fusion_2NilVariable__slice(_1603,_1604); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1603,std::shared_ptr< monty::ndarray< int,1 > > _1604) { return __mosek_2fusion_2NilVariable__slice(_1603,_1604); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1603,std::shared_ptr< monty::ndarray< int,1 > > _1604) { return __mosek_2fusion_2NilVariable__slice(_1603,_1604); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1603,std::shared_ptr< monty::ndarray< int,1 > > _1604){
  _checked_ptr_1<int> _ptr__1603(_1603 ? _1603->raw() : nullptr, _1603 ? _1603->size(0) : 0);
  _checked_ptr_1<int> _ptr__1604(_1604 ? _1604->raw() : nullptr, _1604 ? _1604->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1603)->size(0))) || ((int)((shape)->size(0)) != (int)((_1604)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _7452 = (int)0;
  int _7453 = (int)((_1603)->size(0));
  for (int _1605 = _7452; _1605 < _7453; ++_1605)
  {
    {
      if (((_ptr__1604[_1605] > _ptr__1603[_1605]) || ((_ptr__1603[_1605] < (int)0) || (_ptr__1604[_1605] >= ((*shape)(_1605))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _7454;
  for (int _1606 = (int)0, _7455 = (int)((shape)->size(0)); _1606 < _7455 ; ++_1606)
  {
    _7454.push_back((_ptr__1604[_1606] - _ptr__1603[_1606]));
  }
  auto _7456 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7454.size()),_7454.begin(),_7454.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7456)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1607,int _1608) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1607,_1608); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1607,int _1608) { return __mosek_2fusion_2NilVariable__slice(_1607,_1608); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1607,int _1608) { return __mosek_2fusion_2NilVariable__slice(_1607,_1608); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1607,int _1608) { return __mosek_2fusion_2NilVariable__slice(_1607,_1608); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1607,int _1608){
  if (((_1608 > _1607) || ((_1607 < (int)0) || (_1608 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1608 - _1607))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1609,    monty::rc_ptr< ::mosek::fusion::Model > _1610){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1610;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1609)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1609)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1609)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1611,    std::shared_ptr< monty::ndarray< int,1 > > _1612,    std::shared_ptr< monty::ndarray< long long,1 > > _1613,    std::shared_ptr< monty::ndarray< long long,1 > > _1614){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1612(_1612 ? _1612->raw() : nullptr, _1612 ? _1612->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1613(_1613 ? _1613->raw() : nullptr, _1613 ? _1613->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1614(_1614 ? _1614->raw() : nullptr, _1614 ? _1614->size(0) : 0);
    model = _1611;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1612;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1613;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1614;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1615 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1615->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1615->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7457 = (int)1;
      int _7458 = (int)((shape)->size(0));
      for (int _1616 = _7457; _1616 < _7458; ++_1616)
      {
        {
          _1615->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1616)));
        }
      }
    }
  }
  {}
  _1615->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1615->toString();
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__eval() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::eval() { return __mosek_2fusion_2BaseVariable__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__eval(){
  return _pubthis->__mosek_2fusion_2BaseVariable__asExpr()->__mosek_2fusion_2Expression__eval();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1617,monty::rc_ptr< ::mosek::fusion::WorkStack > _1618,monty::rc_ptr< ::mosek::fusion::WorkStack > _1619) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1617,_1618,_1619); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1617,monty::rc_ptr< ::mosek::fusion::WorkStack > _1618,monty::rc_ptr< ::mosek::fusion::WorkStack > _1619){
  int _1620 = (int)((nativeidxs)->size(0));
  int _1621 = _1620;
  int _1622 = (int)((shape)->size(0));
  bool _1623 = (NULL != sparsity.get());
  _1617->alloc_expr(_1622,_1621,_1620,_1623);
  int _1624 = mosek::fusion::p_WorkStack::_get_impl(_1617)->ptr_base;
  int _1625 = mosek::fusion::p_WorkStack::_get_impl(_1617)->nidxs_base;
  int _1626 = mosek::fusion::p_WorkStack::_get_impl(_1617)->sp_base;
  int _1627 = mosek::fusion::p_WorkStack::_get_impl(_1617)->cof_base;
  int _1628 = mosek::fusion::p_WorkStack::_get_impl(_1617)->bfix_base;
  int _1629 = mosek::fusion::p_WorkStack::_get_impl(_1617)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1630 = mosek::fusion::p_WorkStack::_get_impl(_1617)->i32;
  _checked_ptr_1<int> _ptr__1630(_1630 ? _1630->raw() : nullptr,_1630 ? _1630->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1631 = mosek::fusion::p_WorkStack::_get_impl(_1617)->i64;
  _checked_ptr_1<long long> _ptr__1631(_1631 ? _1631->raw() : nullptr,_1631 ? _1631->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1632 = mosek::fusion::p_WorkStack::_get_impl(_1617)->f64;
  _checked_ptr_1<double> _ptr__1632(_1632 ? _1632->raw() : nullptr,_1632 ? _1632->size(0) : 0);
  int _7459 = (int)0;
  int _7460 = _1622;
  for (int _1633 = _7459; _1633 < _7460; ++_1633)
  {
    {
      _ptr__1630[safe_add( _1629,_1633 )] = ((*shape)(_1633));
    }
  }
  {
    int _7461 = (int)0;
    int _7462 = safe_add( _1620,(int)1 );
    for (int _1634 = _7461; _1634 < _7462; ++_1634)
    {
      {
        _ptr__1630[safe_add( _1624,_1634 )] = _1634;
      }
    }
    int _7463 = (int)0;
    int _7464 = _1620;
    for (int _1635 = _7463; _1635 < _7464; ++_1635)
    {
      {
        _ptr__1631[safe_add( _1625,_1635 )] = ((*nativeidxs)(_1635));
      }
    }
    if (_1623)
    {
      {
        int _7465 = (int)0;
        int _7466 = _1620;
        for (int _1636 = _7465; _1636 < _7466; ++_1636)
        {
          {
            _ptr__1631[safe_add( _1626,_1636 )] = ((*sparsity)(_1636));
          }
        }
      }
    }
    {}
    int _7467 = (int)0;
    int _7468 = _1620;
    for (int _1637 = _7467; _1637 < _7468; ++_1637)
    {
      {
        _ptr__1632[safe_add( _1627,_1637 )] = 1.0;
      }
    }
    int _7469 = (int)0;
    int _7470 = _1620;
    for (int _1638 = _7469; _1638 < _7470; ++_1638)
    {
      {
        _ptr__1632[safe_add( _1628,_1638 )] = 0.0;
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1639,int _1640,int _1641) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1639,_1640,_1641); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1639,int _1640,int _1641) { return __mosek_2fusion_2BaseVariable__reshape(_1639,_1640,_1641); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1639,int _1640,int _1641) { return __mosek_2fusion_2BaseVariable__reshape(_1639,_1640,_1641); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1639,int _1640,int _1641){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1639),(int)(_1640),(int)(_1641)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1642,int _1643) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1642,_1643); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1642,int _1643) { return __mosek_2fusion_2BaseVariable__reshape(_1642,_1643); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1642,int _1643) { return __mosek_2fusion_2BaseVariable__reshape(_1642,_1643); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1642,int _1643){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1642),(int)(_1643)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1644) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1644); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1644) { return __mosek_2fusion_2BaseVariable__reshape(_1644); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1644) { return __mosek_2fusion_2BaseVariable__reshape(_1644); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1644){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1644)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1645) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1645); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1645) { return __mosek_2fusion_2BaseVariable__reshape(_1645); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1645) { return __mosek_2fusion_2BaseVariable__reshape(_1645); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1645){
  _checked_ptr_1<int> _ptr__1645(_1645 ? _1645->raw() : nullptr, _1645 ? _1645->size(0) : 0);
  long long _1646 = (int)1;
  int _7471 = (int)0;
  int _7472 = (int)((_1645)->size(0));
  for (int _1647 = _7471; _1647 < _7472; ++_1647)
  {
    {
      if ((_ptr__1645[_1647] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _1646 *= _ptr__1645[_1647];
    }
  }
  if ((_1646 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _7473;
  for (int _1648 = (int)0, _7474 = (int)((_1645)->size(0)); _1648 < _7474 ; ++_1648)
  {
    _7473.push_back(_ptr__1645[_1648]);
  }
  auto _7475 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7473.size()),_7473.begin(),_7473.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_7475,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1649) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_1649); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1649){
  _checked_ptr_1<double> _ptr__1649(_1649 ? _1649->raw() : nullptr, _1649 ? _1649->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_1649)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_1649);
    }
  }
  else
  {
    {
      if (((int)((_1649)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _7476;
      for (int _1651 = (int)0, _7477 = (int)((nativeidxs)->size(0)); _1651 < _7477 ; ++_1651)
      {
        _7476.push_back(_ptr__1649[((*sparsity)(_1651))]);
      }
      auto _7478 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7476.size()),_7476.begin(),_7476.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _1650 = _7478;
      _checked_ptr_1<double> _ptr__1650(_1650 ? _1650->raw() : nullptr,_1650 ? _1650->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_1650);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _1652) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_1652); }int mosek::fusion::p_BaseVariable::getDim(int _1652){
  return ((*shape)(_1652));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _1653 = (long long)1;
  int _7479 = (int)0;
  int _7480 = (int)((shape)->size(0));
  for (int _1654 = _7479; _1654 < _7480; ++_1654)
  {
    {
      _1653 *= ((*shape)(_1654));
    }
  }
  return _1653;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1655 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1655(_1655 ? _1655->raw() : nullptr,_1655 ? _1655->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_1655,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1656 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1656(_1656 ? _1656->raw() : nullptr,_1656 ? _1656->size(0) : 0);
      int _7481 = (int)0;
      int _7482 = (int)((nativeidxs)->size(0));
      for (int _1657 = _7481; _1657 < _7482; ++_1657)
      {
        {
          _ptr__1656[((*sparsity)(_1657))] = _ptr__1655[_1657];
        }
      }
      _1655 = _1656;
      _ptr__1655.update(_1655 ? _1655->raw() : nullptr, _1655 ? _1655->size(0) : 0);
    }
  }
  {}
  return _1655;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _1658 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1658(_1658 ? _1658->raw() : nullptr,_1658 ? _1658->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_1658,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1659 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1659(_1659 ? _1659->raw() : nullptr,_1659 ? _1659->size(0) : 0);
      int _7483 = (int)0;
      int _7484 = (int)((nativeidxs)->size(0));
      for (int _1660 = _7483; _1660 < _7484; ++_1660)
      {
        {
          _ptr__1659[((*sparsity)(_1660))] = _ptr__1658[_1660];
        }
      }
      _1658 = _1659;
      _ptr__1658.update(_1658 ? _1658->raw() : nullptr, _1658 ? _1658->size(0) : 0);
    }
  }
  {}
  return _1658;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1661 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__1661(_1661 ? _1661->raw() : nullptr,_1661 ? _1661->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _7485;
      bool _7486 = (NULL == sparsity.get());
      if (_7486)
      {
        _7485 = nullptr;
      }
      else
      {
        _7485 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1662 = _7485;
      _checked_ptr_1<long long> _ptr__1662(_1662 ? _1662->raw() : nullptr,_1662 ? _1662->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _1663 = (int)0;
          int _7487 = (int)0;
          int _7488 = ((*shape)((int)1));
          for (int _1664 = _7487; _1664 < _7488; ++_1664)
          {
            {
              int _7489 = (int)0;
              int _7490 = ((*shape)((int)0));
              for (int _1665 = _7489; _1665 < _7490; ++_1665)
              {
                {
                  _ptr__1661[_1663] = ((*nativeidxs)(safe_add( safe_mul( _1665,((*shape)((int)1)) ),_1664 )));
                  ++ _1663;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1666 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__1666(_1666 ? _1666->raw() : nullptr,_1666 ? _1666->size(0) : 0);
          int _1667 = ((*shape)((int)0));
          int _1668 = ((*shape)((int)1));
          int _7491 = (int)0;
          int _7492 = (int)((sparsity)->size(0));
          for (int _1669 = _7491; _1669 < _7492; ++_1669)
          {
            {
              ++ _ptr__1666[safe_add( (((*sparsity)(_1669)) % _1668),(int)1 )];
            }
          }
          int _7493 = (int)0;
          int _7494 = _1668;
          for (int _1670 = _7493; _1670 < _7494; ++_1670)
          {
            {
              _ptr__1666[safe_add( _1670,(int)1 )] += _ptr__1666[_1670];
            }
          }
          int _7495 = (int)0;
          int _7496 = (int)((sparsity)->size(0));
          for (int _1671 = _7495; _1671 < _7496; ++_1671)
          {
            {
              long long _1672 = (((*sparsity)(_1671)) % _1668);
              _ptr__1661[_ptr__1666[_1672]] = ((*nativeidxs)(_1671));
              _ptr__1662[_ptr__1666[_1672]] = safe_add( (((*sparsity)(_1671)) / _1668),safe_mul( (((*sparsity)(_1671)) % _1668),_1667 ) );
              ++ _ptr__1666[_1672];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_1662,_1661)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1673,int _1674,int _1675) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1673,_1674,_1675); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1673,int _1674,int _1675) { return __mosek_2fusion_2BaseVariable__index(_1673,_1674,_1675); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1673,int _1674,int _1675) { return __mosek_2fusion_2BaseVariable__index(_1673,_1674,_1675); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1673,int _1674,int _1675){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1673),(int)(_1674),(int)(_1675)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1676,int _1677) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1676,_1677); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1676,int _1677) { return __mosek_2fusion_2BaseVariable__index(_1676,_1677); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1676,int _1677) { return __mosek_2fusion_2BaseVariable__index(_1676,_1677); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1676,int _1677){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1676),(int)(_1677)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1678) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1678); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1678) { return __mosek_2fusion_2BaseVariable__index(_1678); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1678) { return __mosek_2fusion_2BaseVariable__index(_1678); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1678){
  _checked_ptr_1<int> _ptr__1678(_1678 ? _1678->raw() : nullptr, _1678 ? _1678->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _1679 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_1678)->size(0)))));
  int _7497 = (int)0;
  int _7498 = (int)((_1678)->size(0));
  for (int _1680 = _7497; _1680 < _7498; ++_1680)
  {
    {
      ((*_1679)((int)0,_1680)) = _ptr__1678[_1680];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1679)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1681) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1681); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1681) { return __mosek_2fusion_2BaseVariable__index(_1681); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1681) { return __mosek_2fusion_2BaseVariable__index(_1681); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1681){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1681)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683,std::shared_ptr< monty::ndarray< int,1 > > _1684) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1682,_1683,_1684); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683,std::shared_ptr< monty::ndarray< int,1 > > _1684) { return __mosek_2fusion_2BaseVariable__pick(_1682,_1683,_1684); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683,std::shared_ptr< monty::ndarray< int,1 > > _1684) { return __mosek_2fusion_2BaseVariable__pick(_1682,_1683,_1684); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683,std::shared_ptr< monty::ndarray< int,1 > > _1684){
  _checked_ptr_1<int> _ptr__1682(_1682 ? _1682->raw() : nullptr, _1682 ? _1682->size(0) : 0);
  _checked_ptr_1<int> _ptr__1683(_1683 ? _1683->raw() : nullptr, _1683 ? _1683->size(0) : 0);
  _checked_ptr_1<int> _ptr__1684(_1684 ? _1684->raw() : nullptr, _1684 ? _1684->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_1682)->size(0)) != (int)((_1683)->size(0))) || ((int)((_1682)->size(0)) != (int)((_1684)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1685 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1682)->size(0)),(int)3)));
  int _7499 = (int)0;
  int _7500 = (int)((_1682)->size(0));
  for (int _1686 = _7499; _1686 < _7500; ++_1686)
  {
    {
      ((*_1685)(_1686,(int)0)) = _ptr__1682[_1686];
      ((*_1685)(_1686,(int)1)) = _ptr__1683[_1686];
      ((*_1685)(_1686,(int)2)) = _ptr__1684[_1686];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1685);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1687,std::shared_ptr< monty::ndarray< int,1 > > _1688) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1687,_1688); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1687,std::shared_ptr< monty::ndarray< int,1 > > _1688) { return __mosek_2fusion_2BaseVariable__pick(_1687,_1688); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1687,std::shared_ptr< monty::ndarray< int,1 > > _1688) { return __mosek_2fusion_2BaseVariable__pick(_1687,_1688); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1687,std::shared_ptr< monty::ndarray< int,1 > > _1688){
  _checked_ptr_1<int> _ptr__1687(_1687 ? _1687->raw() : nullptr, _1687 ? _1687->size(0) : 0);
  _checked_ptr_1<int> _ptr__1688(_1688 ? _1688->raw() : nullptr, _1688 ? _1688->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_1687)->size(0)) != (int)((_1688)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1689 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1687)->size(0)),(int)2)));
  int _7501 = (int)0;
  int _7502 = (int)((_1687)->size(0));
  for (int _1690 = _7501; _1690 < _7502; ++_1690)
  {
    {
      ((*_1689)(_1690,(int)0)) = _ptr__1687[_1690];
      ((*_1689)(_1690,(int)1)) = _ptr__1688[_1690];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1689);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1691) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1691); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1691) { return __mosek_2fusion_2BaseVariable__pick(_1691); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1691) { return __mosek_2fusion_2BaseVariable__pick(_1691); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1691){
  if (((int)((shape)->size(0)) != (int)((_1691)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _1692 = false;
  int _7503 = (int)0;
  int _7504 = (int)((_1691)->size(0));
  for (int _1693 = _7503; _1693 < _7504; ++_1693)
  {
    {
      int _7505 = (int)0;
      int _7506 = (int)((_1691)->size(1));
      for (int _1694 = _7505; _1694 < _7506; ++_1694)
      {
        {
          if (((((*_1691)(_1693,_1694)) < (int)0) || (((*_1691)(_1693,_1694)) >= ((*shape)(_1694)))))
          {
            {
              _1692 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_1692)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _1695 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1696 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1695)));
  _checked_ptr_1<long long> _ptr__1696(_1696 ? _1696->raw() : nullptr,_1696 ? _1696->size(0) : 0);
  _ptr__1696[(_1695 - (int)1)] = (int)1;
  int _7507 = (int)1;
  int _7508 = _1695;
  for (int _1697 = _7507; _1697 < _7508; ++_1697)
  {
    {
      _ptr__1696[((_1695 - _1697) - (int)1)] = safe_mul( _ptr__1696[(_1695 - _1697)],((*shape)((_1695 - _1697))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1698 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1691)->size(0)))});
  _checked_ptr_1<int> _ptr__1698(_1698 ? _1698->raw() : nullptr,_1698 ? _1698->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1699;
  _checked_ptr_1<long long> _ptr__1699(_1699 ? _1699->raw() : nullptr,_1699 ? _1699->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1700 = nullptr;
  _checked_ptr_1<long long> _ptr__1700(_1700 ? _1700->raw() : nullptr,_1700 ? _1700->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _1699 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1691)->size(0)))));
      _ptr__1699.update(_1699 ? _1699->raw() : nullptr, _1699 ? _1699->size(0) : 0);
      {
        int _7509 = (int)0;
        int _7510 = (int)((_1691)->size(0));
        for (int _1701 = _7509; _1701 < _7510; ++_1701)
        {
          {
            long long _1702 = (long long)0;
            int _7511 = (int)0;
            int _7512 = _1695;
            for (int _1703 = _7511; _1703 < _7512; ++_1703)
            {
              {
                _1702 += safe_mul( _ptr__1696[_1703],((*_1691)(_1701,_1703)) );
              }
            }
            _ptr__1699[_1701] = ((*nativeidxs)(_1702));
          }
        }
      }
    }
  }
  else
  {
    {
      int _1704 = (int)0;
      int _7513 = (int)0;
      int _7514 = (int)((_1691)->size(0));
      for (int _1705 = _7513; _1705 < _7514; ++_1705)
      {
        {
          long long _1706 = (long long)0;
          int _7515 = (int)0;
          int _7516 = _1695;
          for (int _1707 = _7515; _1707 < _7516; ++_1707)
          {
            {
              _1706 += safe_mul( _ptr__1696[_1707],((*_1691)(_1705,_1707)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1706) >= (int)0))
          {
            {
              ++ _1704;
            }
          }
          {}
        }
      }
      _1699 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1704)));
      _ptr__1699.update(_1699 ? _1699->raw() : nullptr, _1699 ? _1699->size(0) : 0);
      _1700 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1704)));
      _ptr__1700.update(_1700 ? _1700->raw() : nullptr, _1700 ? _1700->size(0) : 0);
      {
        int _1708 = (int)0;
        int _7517 = (int)0;
        int _7518 = (int)((_1691)->size(0));
        for (int _1709 = _7517; _1709 < _7518; ++_1709)
        {
          {
            long long _1710 = (long long)0;
            int _7519 = (int)0;
            int _7520 = _1695;
            for (int _1711 = _7519; _1711 < _7520; ++_1711)
            {
              {
                _1710 += safe_mul( _ptr__1696[_1711],((*_1691)(_1709,_1711)) );
              }
            }
            int _1712 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1710);
            if ((_1712 >= (int)0))
            {
              {
                _ptr__1699[_1708] = ((*nativeidxs)(_1712));
                _ptr__1700[_1708] = _1709;
                ++ _1708;
              }
            }
            {}
          }
        }
      }
      if ((_1704 == (int)((_1691)->size(0))))
      {
        {
          _1700 = nullptr;
          _ptr__1700.update(_1700 ? _1700->raw() : nullptr, _1700 ? _1700->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1698,_1700,_1699)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1713) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1713); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1713) { return __mosek_2fusion_2BaseVariable__pick(_1713); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1713) { return __mosek_2fusion_2BaseVariable__pick(_1713); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1713){
  _checked_ptr_1<int> _ptr__1713(_1713 ? _1713->raw() : nullptr, _1713 ? _1713->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _1714 = false;
  int _7521 = (int)0;
  int _7522 = (int)((_1713)->size(0));
  for (int _1715 = _7521; _1715 < _7522; ++_1715)
  {
    {
      if (((_ptr__1713[_1715] < (int)0) || (_ptr__1713[_1715] >= ((*shape)((int)0)))))
      {
        {
          _1714 = true;
        }
      }
      {}
    }
  }
  if (_1714)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _1716;
  _checked_ptr_1<long long> _ptr__1716(_1716 ? _1716->raw() : nullptr,_1716 ? _1716->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1717 = nullptr;
  _checked_ptr_1<long long> _ptr__1717(_1717 ? _1717->raw() : nullptr,_1717 ? _1717->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _7523;
      for (int _1718 = (int)0, _7524 = (int)((_1713)->size(0)); _1718 < _7524 ; ++_1718)
      {
        _7523.push_back(((*nativeidxs)(_ptr__1713[_1718])));
      }
      auto _7525 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7523.size()),_7523.begin(),_7523.end()));
      _1716 = _7525;
      _ptr__1716.update(_1716 ? _1716->raw() : nullptr, _1716 ? _1716->size(0) : 0);
    }
  }
  else
  {
    {
      int _1719 = (int)0;
      int _7526 = (int)0;
      int _7527 = (int)((_1713)->size(0));
      for (int _1720 = _7526; _1720 < _7527; ++_1720)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1713[_1720])) >= (int)0))
          {
            {
              ++ _1719;
            }
          }
          {}
        }
      }
      _1716 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1719)));
      _ptr__1716.update(_1716 ? _1716->raw() : nullptr, _1716 ? _1716->size(0) : 0);
      _1717 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1719)));
      _ptr__1717.update(_1717 ? _1717->raw() : nullptr, _1717 ? _1717->size(0) : 0);
      int _1721 = (int)0;
      int _7528 = (int)0;
      int _7529 = (int)((_1713)->size(0));
      for (int _1722 = _7528; _1722 < _7529; ++_1722)
      {
        {
          int _1723 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1713[_1722]));
          if ((_1723 >= (int)0))
          {
            {
              _ptr__1717[_1721] = _1722;
              _ptr__1716[_1721] = ((*nativeidxs)(_1723));
              ++ _1721;
            }
          }
          {}
        }
      }
      if ((_1719 == (int)((_1713)->size(0))))
      {
        {
          _1717 = nullptr;
          _ptr__1717.update(_1717 ? _1717->raw() : nullptr, _1717 ? _1717->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1713)->size(0)))}),_1717,_1716)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _1724) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_1724); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _1724) { return __mosek_2fusion_2BaseVariable__antidiag(_1724); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _1724) { return __mosek_2fusion_2BaseVariable__antidiag(_1724); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1724){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_1724 >= ((*shape)((int)1))) || ((-_1724) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1724 >= (int)0))
  {
    {
      int _7530;
      bool _7531 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1724));
      if (_7531)
      {
        _7530 = ((*shape)((int)0));
      }
      else
      {
        _7530 = (((*shape)((int)1)) - _1724);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _1724))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7530);
    }
  }
  else
  {
    {
      int _7532;
      bool _7533 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1724 ));
      if (_7533)
      {
        _7532 = ((*shape)((int)1));
      }
      else
      {
        _7532 = safe_add( ((*shape)((int)0)),_1724 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1724)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7532);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7534;
  bool _7535 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7535)
  {
    _7534 = ((*shape)((int)0));
  }
  else
  {
    _7534 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7534);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _1725) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_1725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _1725) { return __mosek_2fusion_2BaseVariable__diag(_1725); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _1725) { return __mosek_2fusion_2BaseVariable__diag(_1725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _1725){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_1725 >= ((*shape)((int)1))) || ((-_1725) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1725 >= (int)0))
  {
    {
      int _7536;
      bool _7537 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1725));
      if (_7537)
      {
        _7536 = ((*shape)((int)0));
      }
      else
      {
        _7536 = (((*shape)((int)1)) - _1725);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_1725)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7536);
    }
  }
  else
  {
    {
      int _7538;
      bool _7539 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1725 ));
      if (_7539)
      {
        _7538 = ((*shape)((int)1));
      }
      else
      {
        _7538 = safe_add( ((*shape)((int)0)),_1725 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1725)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7538);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7540;
  bool _7541 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7541)
  {
    _7540 = ((*shape)((int)0));
  }
  else
  {
    _7540 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7540);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _1726,std::shared_ptr< monty::ndarray< int,1 > > _1727,int _1728){
  _checked_ptr_1<int> _ptr__1726(_1726 ? _1726->raw() : nullptr, _1726 ? _1726->size(0) : 0);
  _checked_ptr_1<int> _ptr__1727(_1727 ? _1727->raw() : nullptr, _1727 ? _1727->size(0) : 0);
  int _1729 = (int)((shape)->size(0));
  if (((_1729 != (int)((_1726)->size(0))) || (_1729 != (int)((_1727)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _7542 = (int)0;
  int _7543 = _1729;
  for (int _1730 = _7542; _1730 < _7543; ++_1730)
  {
    {
      if (((_ptr__1726[_1730] < (int)0) || (_ptr__1726[_1730] >= ((*shape)(_1730)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1731 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1729)));
  _checked_ptr_1<long long> _ptr__1731(_1731 ? _1731->raw() : nullptr,_1731 ? _1731->size(0) : 0);
  _ptr__1731[(_1729 - (int)1)] = (int)1;
  int _7544 = (int)1;
  int _7545 = _1729;
  for (int _1732 = _7544; _1732 < _7545; ++_1732)
  {
    {
      _ptr__1731[((_1729 - _1732) - (int)1)] = safe_mul( _ptr__1731[(_1729 - _1732)],((*shape)((_1729 - _1732))) );
    }
  }
  long long _1733 = (long long)0;
  int _7546 = (int)0;
  int _7547 = (int)((_1727)->size(0));
  for (int _1734 = _7546; _1734 < _7547; ++_1734)
  {
    {
      _1733 += safe_mul( _ptr__1726[_1734],_ptr__1731[_1734] );
    }
  }
  long long _1735 = (long long)0;
  int _7548 = (int)0;
  int _7549 = (int)((_1727)->size(0));
  for (int _1736 = _7548; _1736 < _7549; ++_1736)
  {
    {
      _1735 += safe_mul( _ptr__1727[_1736],_ptr__1731[_1736] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1737 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1728)));
      _checked_ptr_1<long long> _ptr__1737(_1737 ? _1737->raw() : nullptr,_1737 ? _1737->size(0) : 0);
      int _7550 = (int)0;
      int _7551 = _1728;
      for (int _1738 = _7550; _1738 < _7551; ++_1738)
      {
        {
          _ptr__1737[_1738] = ((*nativeidxs)(safe_add( _1733,safe_mul( _1735,_1738 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1728)}),nullptr,_1737)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1739 = (int)0;
      int _7552 = (int)0;
      int _7553 = _1728;
      for (int _1740 = _7552; _1740 < _7553; ++_1740)
      {
        {
          long long _1741 = safe_add( _1733,safe_mul( _1735,_1740 ) );
          int _1742 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1741);
          if ((_1742 >= (int)0))
          {
            {
              ++ _1739;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1743 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1739)));
      _checked_ptr_1<long long> _ptr__1743(_1743 ? _1743->raw() : nullptr,_1743 ? _1743->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1744 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1739)));
      _checked_ptr_1<long long> _ptr__1744(_1744 ? _1744->raw() : nullptr,_1744 ? _1744->size(0) : 0);
      int _1745 = (int)0;
      int _7554 = (int)0;
      int _7555 = _1728;
      for (int _1746 = _7554; _1746 < _7555; ++_1746)
      {
        {
          _ptr__1743[_1746] = ((*nativeidxs)(safe_add( _1733,safe_mul( _1735,_1746 ) )));
          long long _1747 = safe_add( _1733,safe_mul( _1735,_1746 ) );
          int _1748 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1747);
          if ((_1748 >= (int)0))
          {
            {
              _ptr__1744[_1745] = _1746;
              _ptr__1743[_1745] = ((*nativeidxs)(_1748));
              ++ _1745;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1728)}),_1744,_1743)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1749,std::shared_ptr< monty::ndarray< int,1 > > _1750) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1749,_1750); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1749,std::shared_ptr< monty::ndarray< int,1 > > _1750) { return __mosek_2fusion_2BaseVariable__slice(_1749,_1750); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1749,std::shared_ptr< monty::ndarray< int,1 > > _1750) { return __mosek_2fusion_2BaseVariable__slice(_1749,_1750); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1749,std::shared_ptr< monty::ndarray< int,1 > > _1750){
  _checked_ptr_1<int> _ptr__1749(_1749 ? _1749->raw() : nullptr, _1749 ? _1749->size(0) : 0);
  _checked_ptr_1<int> _ptr__1750(_1750 ? _1750->raw() : nullptr, _1750 ? _1750->size(0) : 0);
  if (((int)((_1749)->size(0)) != (int)((_1750)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_1749)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7556 = (int)0;
      int _7557 = (int)((shape)->size(0));
      for (int _1751 = _7556; _1751 < _7557; ++_1751)
      {
        {
          if (((_ptr__1749[_1751] < (int)0) || (_ptr__1750[_1751] > ((*shape)(_1751)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__1749[_1751] > _ptr__1750[_1751]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _1752 = (int)((shape)->size(0));
      std::vector<int> _7558;
      for (int _1754 = (int)0, _7559 = _1752; _1754 < _7559 ; ++_1754)
      {
        _7558.push_back((_ptr__1750[_1754] - _ptr__1749[_1754]));
      }
      auto _7560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7558.size()),_7558.begin(),_7558.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _1753 = _7560;
      _checked_ptr_1<int> _ptr__1753(_1753 ? _1753->raw() : nullptr,_1753 ? _1753->size(0) : 0);
      int _1755 = (int)1;
      int _7561 = (int)0;
      int _7562 = _1752;
      for (int _1756 = _7561; _1756 < _7562; ++_1756)
      {
        {
          _1755 *= (_ptr__1750[_1756] - _ptr__1749[_1756]);
        }
      }
      if ((_1755 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _1757 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _1758 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1752)));
          _checked_ptr_1<int> _ptr__1758(_1758 ? _1758->raw() : nullptr,_1758 ? _1758->size(0) : 0);
          int _7563 = (int)0;
          int _7564 = (int)((sparsity)->size(0));
          for (int _1759 = _7563; _1759 < _7564; ++_1759)
          {
            {
              long long _1760 = ((*sparsity)(_1759));
              int _7565 = (int)1;
              int _7566 = _1752;
              for (int _1761 = _7565; _1761 < _7566; ++_1761)
              {
                {
                  _ptr__1758[(_1752 - _1761)] = (int)(_1760 % ((*shape)((_1752 - _1761))));
                  _1760 /= ((*shape)((_1752 - _1761)));
                }
              }
              _ptr__1758[(int)0] = (int)_1760;
              int _1762 = (int)0;
              while ( ((_ptr__1758[_1762] >= _ptr__1749[_1762]) && (_ptr__1758[_1762] < _ptr__1750[_1762])) )
              {
                {
                  ++ _1762;
                }
              }
              if ((_1762 == _1752))
              {
                {
                  ++ _1757;
                }
              }
              {}
            }
          }
          int _1763 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _1764 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1757)));
          _checked_ptr_1<long long> _ptr__1764(_1764 ? _1764->raw() : nullptr,_1764 ? _1764->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1765 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1757)));
          _checked_ptr_1<long long> _ptr__1765(_1765 ? _1765->raw() : nullptr,_1765 ? _1765->size(0) : 0);
          int _7567 = (int)0;
          int _7568 = (int)((sparsity)->size(0));
          for (int _1766 = _7567; _1766 < _7568; ++_1766)
          {
            {
              long long _1767 = ((*sparsity)(_1766));
              int _7569 = (int)1;
              int _7570 = _1752;
              for (int _1768 = _7569; _1768 < _7570; ++_1768)
              {
                {
                  _ptr__1758[(_1752 - _1768)] = (int)(_1767 % ((*shape)((_1752 - _1768))));
                  _1767 /= ((*shape)((_1752 - _1768)));
                }
              }
              _ptr__1758[(int)0] = (int)_1767;
              int _1769 = (int)0;
              while ( ((_ptr__1758[_1769] >= _ptr__1749[_1769]) && (_ptr__1758[_1769] < _ptr__1750[_1769])) )
              {
                {
                  ++ _1769;
                }
              }
              if ((_1769 == _1752))
              {
                {
                  _ptr__1764[_1763] = ((*nativeidxs)(_1766));
                  int _1770 = (int)0;
                  int _7571 = (int)0;
                  int _7572 = _1752;
                  for (int _1771 = _7571; _1771 < _7572; ++_1771)
                  {
                    {
                      _1770 = safe_add( safe_mul( _1770,_ptr__1753[_1771] ),(_ptr__1758[_1771] - _ptr__1749[_1771]) );
                    }
                  }
                  _ptr__1765[_1763] = _1770;
                  ++ _1763;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1753,_1765,_1764)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1772 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1755)));
          _checked_ptr_1<long long> _ptr__1772(_1772 ? _1772->raw() : nullptr,_1772 ? _1772->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _1773 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1752)));
            _checked_ptr_1<int> _ptr__1773(_1773 ? _1773->raw() : nullptr,_1773 ? _1773->size(0) : 0);
            _ptr__1773[(_1752 - (int)1)] = (int)1;
            int _7573 = (int)1;
            int _7574 = _1752;
            for (int _1774 = _7573; _1774 < _7574; ++_1774)
            {
              {
                _ptr__1773[((_1752 - _1774) - (int)1)] = safe_mul( _ptr__1773[(_1752 - _1774)],((*shape)((_1752 - _1774))) );
              }
            }
            int _1775 = (int)0;
            int _7575 = (int)0;
            int _7576 = _1752;
            for (int _1776 = _7575; _1776 < _7576; ++_1776)
            {
              {
                _1775 += safe_mul( _ptr__1749[_1776],_ptr__1773[_1776] );
              }
            }
            std::vector<int> _7577;
            for (int _1778 = (int)0, _7578 = _1752; _1778 < _7578 ; ++_1778)
            {
              _7577.push_back(_1775);
            }
            auto _7579 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7577.size()),_7577.begin(),_7577.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1777 = _7579;
            _checked_ptr_1<int> _ptr__1777(_1777 ? _1777->raw() : nullptr,_1777 ? _1777->size(0) : 0);
            std::vector<int> _7580;
            for (int _1780 = (int)0, _7581 = _1752; _1780 < _7581 ; ++_1780)
            {
              _7580.push_back(_ptr__1749[_1780]);
            }
            auto _7582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7580.size()),_7580.begin(),_7580.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1779 = _7582;
            _checked_ptr_1<int> _ptr__1779(_1779 ? _1779->raw() : nullptr,_1779 ? _1779->size(0) : 0);
            int _7583 = (int)0;
            int _7584 = _1755;
            for (int _1781 = _7583; _1781 < _7584; ++_1781)
            {
              {
                _ptr__1772[_1781] = ((*nativeidxs)(_ptr__1777[(_1752 - (int)1)]));
                _ptr__1779[(_1752 - (int)1)] += (int)1;
                _ptr__1777[(_1752 - (int)1)] += _ptr__1773[(_1752 - (int)1)];
                if ((_ptr__1779[(_1752 - (int)1)] >= _ptr__1750[(_1752 - (int)1)]))
                {
                  {
                    int _1782 = (_1752 - (int)1);
                    while ( ((_1782 > (int)0) && (_ptr__1779[_1782] >= _ptr__1750[_1782])) )
                    {
                      {
                        _ptr__1779[_1782] = _ptr__1749[_1782];
                        _ptr__1779[(_1782 - (int)1)] += (int)1;
                        _ptr__1777[(_1782 - (int)1)] += _ptr__1773[(_1782 - (int)1)];
                        -- _1782;
                      }
                    }
                    int _7585 = safe_add( _1782,(int)1 );
                    int _7586 = _1752;
                    for (int _1783 = _7585; _1783 < _7586; ++_1783)
                    {
                      {
                        _ptr__1777[_1783] = _ptr__1777[_1782];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1753,nullptr,_1772)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _1784,int _1785) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1784,_1785); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _1784,int _1785) { return __mosek_2fusion_2BaseVariable__slice(_1784,_1785); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _1784,int _1785) { return __mosek_2fusion_2BaseVariable__slice(_1784,_1785); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _1784,int _1785){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_1784 == (int)0) && (_1785 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_1784 < (int)0) || (_1785 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_1784 > _1785))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_1784 == _1785))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _1786 = (_1785 - _1784);
      int _1787 = (int)0;
      int _1788 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1784));
      int _1789 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1785));
      std::vector<long long> _7587;
      for (int _1790 = _1788, _7588 = _1789; _1790 < _7588 ; ++_1790)
      {
        _7587.push_back((((*sparsity)(_1790)) - _1784));
      }
      auto _7589 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7587.size()),_7587.begin(),_7587.end()));
      std::vector<long long> _7590;
      for (int _1791 = _1788, _7591 = _1789; _1791 < _7591 ; ++_1791)
      {
        _7590.push_back(((*nativeidxs)(_1791)));
      }
      auto _7592 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7590.size()),_7590.begin(),_7590.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1786)}),_7589,_7592)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1792 = (_1785 - _1784);
      std::shared_ptr< monty::ndarray< long long,1 > > _1793 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1792)));
      _checked_ptr_1<long long> _ptr__1793(_1793 ? _1793->raw() : nullptr,_1793 ? _1793->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_1784,_1793,(int)0,_1792);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1792)}),nullptr,_1793)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _1794,std::shared_ptr< monty::ndarray< long long,1 > > _1795,int _1796,std::shared_ptr< monty::ndarray< long long,1 > > _1797) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1794,_1795,_1796,_1797); }int mosek::fusion::p_BaseVariable::inst(int _1794,std::shared_ptr< monty::ndarray< long long,1 > > _1795,int _1796,std::shared_ptr< monty::ndarray< long long,1 > > _1797){
  _checked_ptr_1<long long> _ptr__1795(_1795 ? _1795->raw() : nullptr, _1795 ? _1795->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1797(_1797 ? _1797->raw() : nullptr, _1797 ? _1797->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1798 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__1798(_1798 ? _1798->raw() : nullptr,_1798 ? _1798->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1799 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__1799(_1799 ? _1799->raw() : nullptr,_1799 ? _1799->size(0) : 0);
  if ((NULL == _1799.get()))
  {
    {
      int _7593 = (int)0;
      int _7594 = (int)((_1798)->size(0));
      for (int _1800 = _7593; _1800 < _7594; ++_1800)
      {
        {
          _ptr__1795[safe_add( _1800,_1794 )] = _1800;
          _ptr__1797[safe_add( _1800,_1796 )] = _ptr__1798[_1800];
        }
      }
    }
  }
  else
  {
    {
      int _7595 = (int)0;
      int _7596 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _1801 = _7595; _1801 < _7596; ++_1801)
      {
        {
          _ptr__1795[safe_add( _1794,_1801 )] = _ptr__1799[_1801];
          _ptr__1797[safe_add( _1801,_1796 )] = _ptr__1798[_1801];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _1802,std::shared_ptr< monty::ndarray< long long,1 > > _1803) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1802,_1803); }void mosek::fusion::p_BaseVariable::inst(int _1802,std::shared_ptr< monty::ndarray< long long,1 > > _1803){
  _checked_ptr_1<long long> _ptr__1803(_1803 ? _1803->raw() : nullptr, _1803 ? _1803->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _7597 = (int)0;
      int _7598 = (int)((nativeidxs)->size(0));
      for (int _1804 = _7597; _1804 < _7598; ++_1804)
      {
        {
          _ptr__1803[safe_add( _1802,_1804 )] = ((*nativeidxs)(_1804));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1805 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__1805(_1805 ? _1805->raw() : nullptr,_1805 ? _1805->size(0) : 0);
      int _1806 = (int)1;
      int _7599 = (int)0;
      int _7600 = (int)((_1805)->size(0));
      for (int _1807 = _7599; _1807 < _7600; ++_1807)
      {
        {
          _1806 *= _ptr__1805[_1807];
        }
      }
      int _7601 = (int)0;
      int _7602 = _1806;
      for (int _1808 = _7601; _1808 < _7602; ++_1808)
      {
        {
          _ptr__1803[safe_add( _1802,_1808 )] = (int)0;
        }
      }
      int _7603 = (int)0;
      int _7604 = (int)((sparsity)->size(0));
      for (int _1809 = _7603; _1809 < _7604; ++_1809)
      {
        {
          _ptr__1803[safe_add( _1802,((*sparsity)(_1809)) )] = ((*nativeidxs)(_1809));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1810,bool _1811) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_1810,_1811); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1810,bool _1811){
  _checked_ptr_1<double> _ptr__1810(_1810 ? _1810->raw() : nullptr, _1810 ? _1810->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1811,nativeidxs,_1810);
    }
  }
  else
  {
    {
      int _1812 = (int)1;
      int _7605 = (int)0;
      int _7606 = (int)((shape)->size(0));
      for (int _1813 = _7605; _1813 < _7606; ++_1813)
      {
        {
          _1812 *= ((*shape)(_1813));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1812)));
      _checked_ptr_1<long long> _ptr__1814(_1814 ? _1814->raw() : nullptr,_1814 ? _1814->size(0) : 0);
      int _7607 = (int)0;
      int _7608 = (int)((nativeidxs)->size(0));
      for (int _1815 = _7607; _1815 < _7608; ++_1815)
      {
        {
          _ptr__1814[((*sparsity)(_1815))] = ((*nativeidxs)(_1815));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1811,_1814,_1810);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _1816,std::shared_ptr< monty::ndarray< double,1 > > _1817,bool _1818){
  _checked_ptr_1<double> _ptr__1817(_1817 ? _1817->raw() : nullptr, _1817 ? _1817->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_1818,nativeidxs,_1817,_1816);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1819 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1819(_1819 ? _1819->raw() : nullptr,_1819 ? _1819->size(0) : 0);
      int _7609 = (int)0;
      int _7610 = (int)((sparsity)->size(0));
      for (int _1820 = _7609; _1820 < _7610; ++_1820)
      {
        {
          _ptr__1819[((*sparsity)(_1820))] = ((*nativeidxs)(_1820));
        }
      }
      model->getVariableDuals(_1818,_1819,_1817,_1816);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _1821,std::shared_ptr< monty::ndarray< double,1 > > _1822,bool _1823) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_1821,_1822,_1823); }void mosek::fusion::p_BaseVariable::values(int _1821,std::shared_ptr< monty::ndarray< double,1 > > _1822,bool _1823){
  _checked_ptr_1<double> _ptr__1822(_1822 ? _1822->raw() : nullptr, _1822 ? _1822->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_1823,nativeidxs,_1822,_1821);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1824 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1824(_1824 ? _1824->raw() : nullptr,_1824 ? _1824->size(0) : 0);
      int _7611 = (int)0;
      int _7612 = (int)((sparsity)->size(0));
      for (int _1825 = _7611; _1825 < _7612; ++_1825)
      {
        {
          _ptr__1824[((*sparsity)(_1825))] = ((*nativeidxs)(_1825));
        }
      }
      model->getVariableValues(_1823,_1824,_1822,_1821);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1833,int _1834,int _1835) { return __mosek_2fusion_2Variable__reshape(_1833,_1834,_1835); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1836,int _1837) { return __mosek_2fusion_2Variable__reshape(_1836,_1837); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1838) { return __mosek_2fusion_2Variable__reshape(_1838); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1839) { return __mosek_2fusion_2Variable__reshape(_1839); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1845,std::shared_ptr< monty::ndarray< int,1 > > _1846,std::shared_ptr< monty::ndarray< int,1 > > _1847) { return __mosek_2fusion_2Variable__pick(_1845,_1846,_1847); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1848,std::shared_ptr< monty::ndarray< int,1 > > _1849) { return __mosek_2fusion_2Variable__pick(_1848,_1849); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _1850) { return __mosek_2fusion_2Variable__pick(_1850); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1850) { return __mosek_2fusion_2Variable__pick(_1850); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _1851) { return __mosek_2fusion_2Variable__pick(_1851); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1851) { return __mosek_2fusion_2Variable__pick(_1851); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _1852) { return __mosek_2fusion_2Variable__antidiag(_1852); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _1853) { return __mosek_2fusion_2Variable__diag(_1853); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _1854) { return __mosek_2fusion_2Variable__index(_1854); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _1854) { return __mosek_2fusion_2Variable__index(_1854); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1855,int _1856,int _1857) { return __mosek_2fusion_2Variable__index(_1855,_1856,_1857); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1858,int _1859) { return __mosek_2fusion_2Variable__index(_1858,_1859); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _1860) { return __mosek_2fusion_2Variable__index(_1860); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1860) { return __mosek_2fusion_2Variable__index(_1860); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _1861,std::shared_ptr< monty::ndarray< int,1 > > _1862) { return __mosek_2fusion_2Variable__slice(_1861,_1862); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1861,std::shared_ptr< monty::ndarray< int,1 > > _1862) { return __mosek_2fusion_2Variable__slice(_1861,_1862); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _1863,int _1864) { return __mosek_2fusion_2Variable__slice(_1863,_1864); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _1863,int _1864) { return __mosek_2fusion_2Variable__slice(_1863,_1864); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _1865) { return mosek::fusion::p_Var::empty(_1865); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _1865){
  _checked_ptr_1<int> _ptr__1865(_1865 ? _1865->raw() : nullptr, _1865 ? _1865->size(0) : 0);
  int _7613 = (int)0;
  int _7614 = (int)((_1865)->size(0));
  for (int _1866 = _7613; _1866 < _7614; ++_1866)
  {
    {
      if ((_ptr__1865[_1866] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_1865)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _1867) { return mosek::fusion::p_Var::compress(_1867); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _1867){
  std::shared_ptr< monty::ndarray< int,1 > > _1868 = _1867->getShape();
  _checked_ptr_1<int> _ptr__1868(_1868 ? _1868->raw() : nullptr,_1868 ? _1868->size(0) : 0);
  int _1869 = (int)((_1868)->size(0));
  int _1870 = (int)0;
  int _7615 = (int)0;
  int _7616 = _1869;
  for (int _1871 = _7615; _1871 < _7616; ++_1871)
  {
    {
      if ((_ptr__1868[_1871] != (int)1))
      {
        {
          ++ _1870;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1870)));
  _checked_ptr_1<int> _ptr__1872(_1872 ? _1872->raw() : nullptr,_1872 ? _1872->size(0) : 0);
  {
    int _1873 = (int)0;
    int _7617 = (int)0;
    int _7618 = _1869;
    for (int _1874 = _7617; _1874 < _7618; ++_1874)
    {
      {
        if ((_ptr__1868[_1874] != (int)1))
        {
          {
            _ptr__1872[_1873] = _ptr__1868[_1874];
            ++ _1873;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_1867,_1872);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1875,    int _1876) { return mosek::fusion::p_Var::reshape(_1875,_1876); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1875,int _1876){
  return ::mosek::fusion::p_Var::reshape(_1875,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1876)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1877,    int _1878,    int _1879) { return mosek::fusion::p_Var::reshape(_1877,_1878,_1879); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1877,int _1878,int _1879){
  return ::mosek::fusion::p_Var::reshape(_1877,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1878),(int)(_1879)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _1880) { return mosek::fusion::p_Var::flatten(_1880); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _1880){
  return ::mosek::fusion::p_Var::reshape(_1880,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_1880->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1881,    std::shared_ptr< monty::ndarray< int,1 > > _1882) { return mosek::fusion::p_Var::reshape(_1881,_1882); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1881,std::shared_ptr< monty::ndarray< int,1 > > _1882){
  _checked_ptr_1<int> _ptr__1882(_1882 ? _1882->raw() : nullptr, _1882 ? _1882->size(0) : 0);
  return _1881->__mosek_2fusion_2Variable__reshape(_1882);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _1883,std::shared_ptr< monty::ndarray< int,1 > > _1884){
  _checked_ptr_1<int> _ptr__1884(_1884 ? _1884->raw() : nullptr, _1884 ? _1884->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1885;
  _checked_ptr_1<long long> _ptr__1885(_1885 ? _1885->raw() : nullptr,_1885 ? _1885->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1886;
  _checked_ptr_1<long long> _ptr__1886(_1886 ? _1886->raw() : nullptr,_1886 ? _1886->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1887 = _1883->getShape();
  _checked_ptr_1<int> _ptr__1887(_1887 ? _1887->raw() : nullptr,_1887 ? _1887->size(0) : 0);
  int _1888 = (int)((_1887)->size(0));
  int _1889 = (int)1;
  int _7619 = (int)0;
  int _7620 = _1888;
  for (int _1890 = _7619; _1890 < _7620; ++_1890)
  {
    {
      _1889 *= _ptr__1887[_1890];
    }
  }
  int _1891 = _1883->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1892 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1888)));
  _checked_ptr_1<long long> _ptr__1892(_1892 ? _1892->raw() : nullptr,_1892 ? _1892->size(0) : 0);
  _ptr__1892[(_1888 - (int)1)] = (int)1;
  int _7621 = (int)1;
  int _7622 = _1888;
  for (int _1893 = _7621; _1893 < _7622; ++_1893)
  {
    {
      _ptr__1892[((_1888 - _1893) - (int)1)] = safe_mul( _ptr__1892[(_1888 - _1893)],_ptr__1887[_ptr__1884[(_1888 - _1893)]] );
    }
  }
  if ((_1891 < _1889))
  {
    {
      _1885 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1891)));
      _ptr__1885.update(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
      _1886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1891)));
      _ptr__1886.update(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
      _1883->inst((int)0,_1885,(int)0,_1886);
    }
  }
  else
  {
    {
      _1885 = nullptr;
      _ptr__1885.update(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
      _1886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1891)));
      _ptr__1886.update(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
      _1883->inst((int)0,_1886);
    }
  }
  if ((NULL == _1885.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1894 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1891)));
      _checked_ptr_1<long long> _ptr__1894(_1894 ? _1894->raw() : nullptr,_1894 ? _1894->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1895 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1888)));
        _checked_ptr_1<int> _ptr__1895(_1895 ? _1895->raw() : nullptr,_1895 ? _1895->size(0) : 0);
        int _7623 = (int)0;
        int _7624 = _1891;
        for (int _1896 = _7623; _1896 < _7624; ++_1896)
        {
          {
            int _1897 = _1896;
            int _7625 = (int)0;
            int _7626 = _1888;
            for (int _1898 = _7625; _1898 < _7626; ++_1898)
            {
              {
                _ptr__1895[((_1888 - _1896) - (int)1)] = (_1897 % _ptr__1887[((_1888 - _1896) - (int)1)]);
                _1897 /= _ptr__1887[((_1888 - _1896) - (int)1)];
              }
            }
            int _1899 = (int)0;
            int _7627 = (int)0;
            int _7628 = _1888;
            for (int _1900 = _7627; _1900 < _7628; ++_1900)
            {
              {
                _1899 += (int)safe_mul( _ptr__1895[_ptr__1884[_1900]],_ptr__1892[_1900] );
              }
            }
            _ptr__1894[_1899] = _ptr__1886[_1896];
          }
        }
      }
      _1886 = _1894;
      _ptr__1886.update(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1901 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1891)));
      _checked_ptr_1<long long> _ptr__1901(_1901 ? _1901->raw() : nullptr,_1901 ? _1901->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1902 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1888)));
        _checked_ptr_1<int> _ptr__1902(_1902 ? _1902->raw() : nullptr,_1902 ? _1902->size(0) : 0);
        int _7629 = (int)0;
        int _7630 = _1891;
        for (int _1903 = _7629; _1903 < _7630; ++_1903)
        {
          {
            int _1904 = _1903;
            int _7631 = (int)0;
            int _7632 = _1888;
            for (int _1905 = _7631; _1905 < _7632; ++_1905)
            {
              {
                _ptr__1902[((_1888 - _1903) - (int)1)] = (_1904 % _ptr__1887[((_1888 - _1903) - (int)1)]);
                _1904 /= _ptr__1887[((_1888 - _1903) - (int)1)];
              }
            }
            int _1906 = (int)0;
            int _7633 = (int)0;
            int _7634 = _1888;
            for (int _1907 = _7633; _1907 < _7634; ++_1907)
            {
              {
                _1906 += (int)safe_mul( _ptr__1902[_ptr__1884[_1907]],_ptr__1892[_1907] );
              }
            }
            _ptr__1901[_1903] = _1906;
          }
        }
      }
      std::vector<long long> _7635;
      for (int _1909 = (int)0, _7636 = _1891; _1909 < _7636 ; ++_1909)
      {
        _7635.push_back(_1909);
      }
      auto _7637 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7635.size()),_7635.begin(),_7635.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1908 = _7637;
      _checked_ptr_1<long long> _ptr__1908(_1908 ? _1908->raw() : nullptr,_1908 ? _1908->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1908,_1901,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1891));
      std::vector<long long> _7638;
      for (int _1910 = (int)0, _7639 = _1891; _1910 < _7639 ; ++_1910)
      {
        _7638.push_back(_ptr__1885[_ptr__1908[_1910]]);
      }
      auto _7640 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7638.size()),_7638.begin(),_7638.end()));
      _1885 = _7640;
      _ptr__1885.update(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
      std::vector<long long> _7641;
      for (int _1911 = (int)0, _7642 = _1891; _1911 < _7642 ; ++_1911)
      {
        _7641.push_back(_ptr__1886[_ptr__1908[_1911]]);
      }
      auto _7643 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7641.size()),_7641.begin(),_7641.end()));
      _1886 = _7643;
      _ptr__1886.update(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
    }
  }
  std::vector<int> _7644;
  for (int _1912 = (int)0, _7645 = _1888; _1912 < _7645 ; ++_1912)
  {
    _7644.push_back(_ptr__1887[_ptr__1884[_1912]]);
  }
  auto _7646 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7644.size()),_7644.begin(),_7644.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1883->__mosek_2fusion_2Variable__getModel(),_7646,_1885,_1886)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1913,    int _1914) { return mosek::fusion::p_Var::hrepeat(_1913,_1914); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1913,int _1914){
  return ::mosek::fusion::p_Var::drepeat(_1913,(int)1,_1914);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1915,    int _1916) { return mosek::fusion::p_Var::vrepeat(_1915,_1916); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1915,int _1916){
  return ::mosek::fusion::p_Var::drepeat(_1915,(int)0,_1916);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1917,    int _1918) { return mosek::fusion::p_Var::repeat(_1917,_1918); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1917,int _1918){
  return ::mosek::fusion::p_Var::drepeat(_1917,(int)0,_1918);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1919,    int _1920,    int _1921) { return mosek::fusion::p_Var::repeat(_1919,_1920,_1921); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1919,int _1920,int _1921){
  return ::mosek::fusion::p_Var::drepeat(_1919,_1920,_1921);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1922,int _1923,int _1924){
  if ((_1924 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_1924 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_1924 == (int)1))
  {
    {
      return _1922;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _1925 = _1922->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _1926 = _1922->getShape();
      _checked_ptr_1<int> _ptr__1926(_1926 ? _1926->raw() : nullptr,_1926 ? _1926->size(0) : 0);
      int _1927 = (int)((_1926)->size(0));
      if (((_1923 < (int)0) || (_1923 > _1927)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _1928 = ::mosek::fusion::p_Set::size(_1926);
      int _1929 = _1922->numInst();
      int _1930 = safe_mul( _1929,_1924 );
      int _1931 = (int)1;
      int _7647 = (int)0;
      int _7648 = _1923;
      for (int _1932 = _7647; _1932 < _7648; ++_1932)
      {
        {
          _1931 *= _ptr__1926[_1932];
        }
      }
      int _7649;
      bool _7650 = (_1923 < _1927);
      if (_7650)
      {
        _7649 = _ptr__1926[_1923];
      }
      else
      {
        _7649 = (int)1;
      }
      int _1933 = _7649;
      int _1934 = safe_mul( _1933,_1924 );
      int _1935 = (int)1;
      int _7651 = safe_add( _1923,(int)1 );
      int _7652 = _1927;
      for (int _1936 = _7651; _1936 < _7652; ++_1936)
      {
        {
          _1935 *= _ptr__1926[_1936];
        }
      }
      int _7653;
      bool _7654 = (_1923 < _1927);
      if (_7654)
      {
        _7653 = _1927;
      }
      else
      {
        _7653 = safe_add( _1923,(int)1 );
      }
      int _1937 = _7653;
      std::shared_ptr< monty::ndarray< int,1 > > _1938 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1937)));
      _checked_ptr_1<int> _ptr__1938(_1938 ? _1938->raw() : nullptr,_1938 ? _1938->size(0) : 0);
      int _7655 = (int)0;
      int _7656 = _1927;
      for (int _1939 = _7655; _1939 < _7656; ++_1939)
      {
        {
          _ptr__1938[_1939] = _ptr__1926[_1939];
        }
      }
      int _7657 = _1927;
      int _7658 = _1937;
      for (int _1940 = _7657; _1940 < _7658; ++_1940)
      {
        {
          _ptr__1938[_1940] = (int)1;
        }
      }
      _ptr__1938[_1923] = _1934;
      if ((_1929 < _1928))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1941 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1929)));
          _checked_ptr_1<long long> _ptr__1941(_1941 ? _1941->raw() : nullptr,_1941 ? _1941->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1942 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1929)));
          _checked_ptr_1<long long> _ptr__1942(_1942 ? _1942->raw() : nullptr,_1942 ? _1942->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1943 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1930)));
          _checked_ptr_1<long long> _ptr__1943(_1943 ? _1943->raw() : nullptr,_1943 ? _1943->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1944 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1930)));
          _checked_ptr_1<long long> _ptr__1944(_1944 ? _1944->raw() : nullptr,_1944 ? _1944->size(0) : 0);
          _1922->inst((int)0,_1942,(int)0,_1941);
          {
            int _1945 = safe_mul( _1934,_1935 );
            int _1946 = safe_mul( _1933,_1935 );
            int _1947 = _1935;
            if ((_1923 == (int)0))
            {
              {
                int _1948 = (int)0;
                int _7659 = (int)0;
                int _7660 = _1924;
                for (int _1949 = _7659; _1949 < _7660; ++_1949)
                {
                  {
                    int _7661 = (int)0;
                    int _7662 = _1929;
                    for (int _1950 = _7661; _1950 < _7662; ++_1950)
                    {
                      {
                        _ptr__1944[_1948] = safe_add( _ptr__1942[_1950],safe_mul( _1949,_1928 ) );
                        _ptr__1943[_1948] = _ptr__1941[_1950];
                        ++ _1948;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1925,_1938,_1944,_1943)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_1923 >= _1927))
            {
              {
                int _1951 = (int)0;
                int _7663 = (int)0;
                int _7664 = _1929;
                for (int _1952 = _7663; _1952 < _7664; ++_1952)
                {
                  {
                    int _7665 = (int)0;
                    int _7666 = _1924;
                    for (int _1953 = _7665; _1953 < _7666; ++_1953)
                    {
                      {
                        _ptr__1944[_1951] = safe_add( safe_mul( _ptr__1942[_1952],_1924 ),_1953 );
                        _ptr__1943[_1951] = _ptr__1941[_1952];
                        ++ _1951;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1925,_1938,_1944,_1943)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _1954 = (int)0;
                int _7667 = (int)0;
                int _7668 = _1929;
                for (int _1955 = _7667; _1955 < _7668; ++_1955)
                {
                  {
                    long long _1956 = (_ptr__1942[_1955] / _1946);
                    long long _1957 = ((_ptr__1942[_1955] / _1947) % _1933);
                    long long _1958 = (_ptr__1942[_1955] % _1935);
                    int _7669 = (int)0;
                    int _7670 = _1924;
                    for (int _1959 = _7669; _1959 < _7670; ++_1959)
                    {
                      {
                        _ptr__1944[_1954] = safe_add( safe_add( safe_mul( _1956,_1945 ),safe_mul( safe_add( _1957,safe_mul( _1933,_1959 ) ),_1935 ) ),_1958 );
                        _ptr__1943[_1954] = _ptr__1941[_1955];
                        ++ _1954;
                      }
                    }
                  }
                }
                int _1960 = (int)1;
                int _7671 = (int)0;
                int _7672 = _1937;
                for (int _1961 = _7671; _1961 < _7672; ++_1961)
                {
                  {
                    if ((_1960 < _ptr__1938[_1961]))
                    {
                      {
                        _1960 = _ptr__1938[_1961];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _1962 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1930)));
                _checked_ptr_1<int> _ptr__1962(_1962 ? _1962->raw() : nullptr,_1962 ? _1962->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _1963 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1930)));
                _checked_ptr_1<int> _ptr__1963(_1963 ? _1963->raw() : nullptr,_1963 ? _1963->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _1964 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1960,(int)1 ))));
                  _checked_ptr_1<int> _ptr__1964(_1964 ? _1964->raw() : nullptr,_1964 ? _1964->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _1965 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1937)));
                  _checked_ptr_1<long long> _ptr__1965(_1965 ? _1965->raw() : nullptr,_1965 ? _1965->size(0) : 0);
                  _ptr__1965[(_1937 - (int)1)] = (int)1;
                  int _7673 = (int)1;
                  int _7674 = _1937;
                  for (int _1966 = _7673; _1966 < _7674; ++_1966)
                  {
                    {
                      _ptr__1965[((_1937 - _1966) - (int)1)] = safe_mul( _ptr__1965[(_1937 - _1966)],_ptr__1938[(_1937 - _1966)] );
                    }
                  }
                  int _7675 = (int)0;
                  int _7676 = _1930;
                  for (int _1967 = _7675; _1967 < _7676; ++_1967)
                  {
                    {
                      _ptr__1962[_1967] = _1967;
                    }
                  }
                  int _7677 = (int)0;
                  int _7678 = _1937;
                  for (int _1968 = _7677; _1968 < _7678; ++_1968)
                  {
                    {
                      int _1969 = ((_1937 - _1968) - (int)1);
                      int _7679 = (int)0;
                      int _7680 = safe_add( _ptr__1938[_1969],(int)1 );
                      for (int _1970 = _7679; _1970 < _7680; ++_1970)
                      {
                        {
                          _ptr__1964[_1970] = (int)0;
                        }
                      }
                      int _7681 = (int)0;
                      int _7682 = _1930;
                      for (int _1971 = _7681; _1971 < _7682; ++_1971)
                      {
                        {
                          ++ _ptr__1964[safe_add( ((_ptr__1944[_1971] / _ptr__1965[_1969]) % _ptr__1938[_1969]),(int)1 )];
                        }
                      }
                      int _7683 = (int)0;
                      int _7684 = _ptr__1938[_1969];
                      for (int _1972 = _7683; _1972 < _7684; ++_1972)
                      {
                        {
                          _ptr__1964[safe_add( _1972,(int)1 )] += _ptr__1964[_1972];
                        }
                      }
                      int _7685 = (int)0;
                      int _7686 = _1930;
                      for (int _1973 = _7685; _1973 < _7686; ++_1973)
                      {
                        {
                          int _1974 = _ptr__1962[_1973];
                          long long _1975 = ((_ptr__1944[_1974] / _ptr__1965[_1969]) % _ptr__1938[_1969]);
                          _ptr__1963[_ptr__1964[_1975]] = _1974;
                          ++ _ptr__1964[_1975];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _1976 = _1962;
                      _checked_ptr_1<int> _ptr__1976(_1976 ? _1976->raw() : nullptr,_1976 ? _1976->size(0) : 0);
                      _1962 = _1963;
                      _ptr__1962.update(_1962 ? _1962->raw() : nullptr, _1962 ? _1962->size(0) : 0);
                      _1963 = _1976;
                      _ptr__1963.update(_1963 ? _1963->raw() : nullptr, _1963 ? _1963->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _7687;
                for (int _1977 = (int)0, _7688 = _1930; _1977 < _7688 ; ++_1977)
                {
                  _7687.push_back(_ptr__1944[_ptr__1962[_1977]]);
                }
                auto _7689 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7687.size()),_7687.begin(),_7687.end()));
                std::vector<long long> _7690;
                for (int _1978 = (int)0, _7691 = _1930; _1978 < _7691 ; ++_1978)
                {
                  _7690.push_back(_ptr__1943[_ptr__1962[_1978]]);
                }
                auto _7692 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7690.size()),_7690.begin(),_7690.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1925,_1938,_7689,_7692)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1979 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1929)));
          _checked_ptr_1<long long> _ptr__1979(_1979 ? _1979->raw() : nullptr,_1979 ? _1979->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1980 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1929,_1924 ))));
          _checked_ptr_1<long long> _ptr__1980(_1980 ? _1980->raw() : nullptr,_1980 ? _1980->size(0) : 0);
          _1922->inst((int)0,_1979);
          int _1981 = safe_mul( _1934,_1935 );
          int _1982 = _1935;
          int _1983 = (int)0;
          int _7693 = (int)0;
          int _7694 = _1931;
          for (int _1984 = _7693; _1984 < _7694; ++_1984)
          {
            {
              int _7695 = (int)0;
              int _7696 = _1933;
              for (int _1985 = _7695; _1985 < _7696; ++_1985)
              {
                {
                  int _7697 = (int)0;
                  int _7698 = _1935;
                  for (int _1986 = _7697; _1986 < _7698; ++_1986)
                  {
                    {
                      int _7699 = (int)0;
                      int _7700 = _1924;
                      for (int _1987 = _7699; _1987 < _7700; ++_1987)
                      {
                        {
                          _ptr__1980[safe_add( safe_add( safe_mul( _1984,_1981 ),safe_mul( safe_add( _1985,safe_mul( _1987,_1933 ) ),_1982 ) ),_1986 )] = _ptr__1979[_1983];
                        }
                      }
                      ++ _1983;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1925,_1938,nullptr,_1980)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1988) { return mosek::fusion::p_Var::stack(_1988); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1988){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _7701;
  for (int _1989 = (int)0, _7702 = (int)((_1988)->size(0)); _1989 < _7702 ; ++_1989)
  {
    _7701.push_back(::mosek::fusion::p_Var::dstack(((*_1988)(_1989)),(int)1));
  }
  auto _7703 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7701.size()),_7701.begin(),_7701.end()));
  return ::mosek::fusion::p_Var::dstack(_7703,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1990,    monty::rc_ptr< ::mosek::fusion::Variable > _1991,    monty::rc_ptr< ::mosek::fusion::Variable > _1992) { return mosek::fusion::p_Var::vstack(_1990,_1991,_1992); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1990,monty::rc_ptr< ::mosek::fusion::Variable > _1991,monty::rc_ptr< ::mosek::fusion::Variable > _1992){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1990.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1991.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1992.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1993,    monty::rc_ptr< ::mosek::fusion::Variable > _1994) { return mosek::fusion::p_Var::vstack(_1993,_1994); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1993,monty::rc_ptr< ::mosek::fusion::Variable > _1994){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1993.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1994.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1995) { return mosek::fusion::p_Var::vstack(_1995); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1995){
  return ::mosek::fusion::p_Var::dstack(_1995,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1996,    monty::rc_ptr< ::mosek::fusion::Variable > _1997,    monty::rc_ptr< ::mosek::fusion::Variable > _1998) { return mosek::fusion::p_Var::hstack(_1996,_1997,_1998); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1996,monty::rc_ptr< ::mosek::fusion::Variable > _1997,monty::rc_ptr< ::mosek::fusion::Variable > _1998){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1996.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1997.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1998.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1999,    monty::rc_ptr< ::mosek::fusion::Variable > _2000) { return mosek::fusion::p_Var::hstack(_1999,_2000); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1999,monty::rc_ptr< ::mosek::fusion::Variable > _2000){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1999.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2000.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2001) { return mosek::fusion::p_Var::hstack(_2001); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2001){
  return ::mosek::fusion::p_Var::dstack(_2001,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2002,    monty::rc_ptr< ::mosek::fusion::Variable > _2003,    monty::rc_ptr< ::mosek::fusion::Variable > _2004,    int _2005) { return mosek::fusion::p_Var::stack(_2002,_2003,_2004,_2005); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2002,monty::rc_ptr< ::mosek::fusion::Variable > _2003,monty::rc_ptr< ::mosek::fusion::Variable > _2004,int _2005){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2002.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2003.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2004.get())}),_2005);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2006,    monty::rc_ptr< ::mosek::fusion::Variable > _2007,    int _2008) { return mosek::fusion::p_Var::stack(_2006,_2007,_2008); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2006,monty::rc_ptr< ::mosek::fusion::Variable > _2007,int _2008){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2006.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2007.get())}),_2008);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2009,    int _2010) { return mosek::fusion::p_Var::stack(_2009,_2010); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2009,int _2010){
  int _2011 = _2010;
  int _7704 = (int)0;
  int _7705 = (int)((_2009)->size(0));
  for (int _2012 = _7704; _2012 < _7705; ++_2012)
  {
    {
      if ((_2011 < ((*_2009)(_2012))->getND()))
      {
        {
          _2011 = ((*_2009)(_2012))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2009,_2010);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2013,    int _2014) { return mosek::fusion::p_Var::promote(_2013,_2014); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2013,int _2014){
  if ((_2014 > _2013->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2015 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2014)));
      _checked_ptr_1<int> _ptr__2015(_2015 ? _2015->raw() : nullptr,_2015 ? _2015->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2016 = _2013->getShape();
      _checked_ptr_1<int> _ptr__2016(_2016 ? _2016->raw() : nullptr,_2016 ? _2016->size(0) : 0);
      int _7706 = (int)0;
      int _7707 = (int)((_2016)->size(0));
      for (int _2017 = _7706; _2017 < _7707; ++_2017)
      {
        {
          _ptr__2015[_2017] = _ptr__2016[_2017];
        }
      }
      int _7708 = (int)((_2016)->size(0));
      int _7709 = _2014;
      for (int _2018 = _7708; _2018 < _7709; ++_2018)
      {
        {
          _ptr__2015[_2018] = (int)1;
        }
      }
      return _2013->__mosek_2fusion_2Variable__reshape(_2015);
    }
  }
  else
  {
    {
      return _2013;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2019,int _2020){
  if ((_2020 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2021 = nullptr;
  {
    int _7710 = (int)0;
    int _7711 = (int)((_2019)->size(0));
    for (int _2022 = _7710; _2022 < _7711; ++_2022)
    {
      {
        if ((NULL == _2021.get()))
        {
          {
            _2021 = ((*_2019)(_2022))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2019)(_2022))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2019)(_2022))->__mosek_2fusion_2Variable__getModel() != _2021)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2023 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7712;
            bool _7713 = ((int)((mosek::fusion::p_Model::_get_impl(_2021.get())->getName()).size()) > (int)0);
            if (_7713)
            {
              _7712 = mosek::fusion::p_Model::_get_impl(_2021.get())->getName();
            }
            else
            {
              _7712 = std::string ("?");
            }
            std::string _2024 = _7712;
            std::string _7714;
            bool _7715 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2019)(_2022))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_7715)
            {
              _7714 = mosek::fusion::p_Model::_get_impl(((*_2019)(_2022))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _7714 = std::string ("?");
            }
            std::string _2025 = _7714;
            _2023->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2024)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2025)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2023->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2019)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2019)->size(0)) == (int)1))
  {
    {
      return ((*_2019)((int)1));
    }
  }
  else
  {
    {
      int _2026 = (int)((_2019)->size(0));
      std::vector<int> _7716;
      for (int _2028 = (int)0, _7717 = _2026; _2028 < _7717 ; ++_2028)
      {
        _7716.push_back(((*_2019)(_2028))->numInst());
      }
      auto _7718 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7716.size()),_7716.begin(),_7716.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2027 = _7718;
      _checked_ptr_1<int> _ptr__2027(_2027 ? _2027->raw() : nullptr,_2027 ? _2027->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7719;
      for (int _2030 = (int)0, _7720 = _2026; _2030 < _7720 ; ++_2030)
      {
        _7719.push_back(((*_2019)(_2030))->getShape());
      }
      auto _7721 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7719.size()),_7719.begin(),_7719.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2029 = _7721;
      std::vector<int> _7722;
      for (int _2032 = (int)0, _7723 = _2026; _2032 < _7723 ; ++_2032)
      {
        _7722.push_back((int)((((*_2029)(_2032)))->size(0)));
      }
      auto _7724 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7722.size()),_7722.begin(),_7722.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2031 = _7724;
      _checked_ptr_1<int> _ptr__2031(_2031 ? _2031->raw() : nullptr,_2031 ? _2031->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2033 = ((*_2029)((int)0));
      _checked_ptr_1<int> _ptr__2033(_2033 ? _2033->raw() : nullptr,_2033 ? _2033->size(0) : 0);
      int _2034 = _ptr__2031[(int)0];
      int _2035 = (int)0;
      int _7725 = (int)0;
      int _7726 = _2026;
      for (int _2036 = _7725; _2036 < _7726; ++_2036)
      {
        {
          _2035 += _ptr__2027[_2036];
        }
      }
      int _2037 = safe_add( _2020,(int)1 );
      int _7727 = (int)0;
      int _7728 = _2026;
      for (int _2038 = _7727; _2038 < _7728; ++_2038)
      {
        {
          if ((_2037 < _ptr__2031[_2038]))
          {
            {
              _2037 = _ptr__2031[_2038];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2039 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2037)));
      _checked_ptr_1<int> _ptr__2039(_2039 ? _2039->raw() : nullptr,_2039 ? _2039->size(0) : 0);
      int _7729 = (int)0;
      int _7730 = _2034;
      for (int _2040 = _7729; _2040 < _7730; ++_2040)
      {
        {
          _ptr__2039[_2040] = _ptr__2033[_2040];
        }
      }
      int _7731 = _2034;
      int _7732 = _2037;
      for (int _2041 = _7731; _2041 < _7732; ++_2041)
      {
        {
          _ptr__2039[_2041] = (int)1;
        }
      }
      _ptr__2039[_2020] = (int)0;
      int _7733 = (int)0;
      int _7734 = _2026;
      for (int _2042 = _7733; _2042 < _7734; ++_2042)
      {
        {
          int _7735;
          bool _7736 = ((int)((((*_2029)(_2042)))->size(0)) > _2020);
          if (_7736)
          {
            _7735 = ((*((*_2029)(_2042)))(_2020));
          }
          else
          {
            _7735 = (int)1;
          }
          _ptr__2039[_2020] += _7735;
        }
      }
      int _7737 = (int)0;
      int _7738 = _2026;
      for (int _2043 = _7737; _2043 < _7738; ++_2043)
      {
        {
          int _7739 = (int)0;
          int _7740 = (int)((((*_2029)(_2043)))->size(0));
          for (int _2044 = _7739; _2044 < _7740; ++_2044)
          {
            {
              if (((_2044 != _2020) && (((*((*_2029)(_2043)))(_2044)) != _ptr__2039[_2044])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _7741 = (int)((((*_2029)(_2043)))->size(0));
          int _7742 = _2037;
          for (int _2045 = _7741; _2045 < _7742; ++_2045)
          {
            {
              if (((_2045 != _2020) && ((int)1 != _ptr__2039[_2045])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2046 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2035)));
      _checked_ptr_1<long long> _ptr__2046(_2046 ? _2046->raw() : nullptr,_2046 ? _2046->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2047 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2035)));
      _checked_ptr_1<long long> _ptr__2047(_2047 ? _2047->raw() : nullptr,_2047 ? _2047->size(0) : 0);
      std::vector<int> _7743;
      for (int _2049 = (int)0, _7744 = (int)((_2019)->size(0)); _2049 < _7744 ; ++_2049)
      {
        int _7745;
        bool _7746 = (_2020 < (int)((((*_2029)(_2049)))->size(0)));
        if (_7746)
        {
          _7745 = ((*((*_2029)(_2049)))(_2020));
        }
        else
        {
          _7745 = (int)1;
        }
        _7743.push_back(_7745);
      }
      auto _7747 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7743.size()),_7743.begin(),_7743.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2048 = _7747;
      _checked_ptr_1<int> _ptr__2048(_2048 ? _2048->raw() : nullptr,_2048 ? _2048->size(0) : 0);
      int _2050 = (int)1;
      int _7748 = (int)0;
      int _7749 = _2020;
      for (int _2051 = _7748; _2051 < _7749; ++_2051)
      {
        {
          int _7750;
          bool _7751 = (_2051 < (int)((_2033)->size(0)));
          if (_7751)
          {
            _7750 = _ptr__2033[_2051];
          }
          else
          {
            _7750 = (int)1;
          }
          _2050 *= _7750;
        }
      }
      int _2052 = (int)0;
      int _7752 = (int)0;
      int _7753 = _2026;
      for (int _2053 = _7752; _2053 < _7753; ++_2053)
      {
        {
          _2052 += _ptr__2048[_2053];
        }
      }
      int _2054 = (int)1;
      int _7754 = safe_add( _2020,(int)1 );
      int _7755 = (int)((_2033)->size(0));
      for (int _2055 = _7754; _2055 < _7755; ++_2055)
      {
        {
          _2054 *= _ptr__2033[_2055];
        }
      }
      if ((_2050 == (int)1))
      {
        {
          int _2056 = (int)0;
          long long _2057 = (int)0;
          int _7756 = (int)0;
          int _7757 = _2026;
          for (int _2058 = _7756; _2058 < _7757; ++_2058)
          {
            {
              ((*_2019)(_2058))->inst(_2056,_2047,_2056,_2046);
              int _7758 = (int)0;
              int _7759 = _ptr__2027[_2058];
              for (int _2059 = _7758; _2059 < _7759; ++_2059)
              {
                {
                  _ptr__2047[_2056] += _2057;
                  ++ _2056;
                }
              }
              _2057 += ::mosek::fusion::p_Set::size(((*_2029)(_2058)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7760;
          bool _7761 = (_2035 < safe_mul( safe_mul( _2050,_2052 ),_2054 ));
          if (_7761)
          {
            _7760 = _2047;
          }
          else
          {
            _7760 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2021,_2039,_7760,_2046)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2060 = (int)0;
          int _7762 = (int)0;
          int _7763 = _2026;
          for (int _2061 = _7762; _2061 < _7763; ++_2061)
          {
            {
              _2060 += ((*_2019)(_2061))->inst(_2060,_2047,_2060,_2046);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2062 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2035)));
          _checked_ptr_1<int> _ptr__2062(_2062 ? _2062->raw() : nullptr,_2062 ? _2062->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2063 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2035)));
          _checked_ptr_1<int> _ptr__2063(_2063 ? _2063->raw() : nullptr,_2063 ? _2063->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2064 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2026)));
          _checked_ptr_1<int> _ptr__2064(_2064 ? _2064->raw() : nullptr,_2064 ? _2064->size(0) : 0);
          int _7764 = (int)0;
          int _7765 = (_2026 - (int)1);
          for (int _2065 = _7764; _2065 < _7765; ++_2065)
          {
            {
              _ptr__2064[safe_add( _2065,(int)1 )] = safe_add( _ptr__2064[_2065],_ptr__2048[_2065] );
            }
          }
          int _7766 = (int)0;
          int _7767 = _2035;
          for (int _2066 = _7766; _2066 < _7767; ++_2066)
          {
            {
              _ptr__2062[_2066] = _2066;
            }
          }
          int _2067 = (int)0;
          int _7768 = (int)0;
          int _7769 = _2026;
          for (int _2068 = _7768; _2068 < _7769; ++_2068)
          {
            {
              int _7770 = (int)0;
              int _7771 = _ptr__2027[_2068];
              for (int _2069 = _7770; _2069 < _7771; ++_2069)
              {
                {
                  long long _2070 = (_ptr__2047[_2067] / safe_mul( _ptr__2048[_2068],_2054 ));
                  long long _2071 = ((_ptr__2047[_2067] / _2054) % _ptr__2048[_2068]);
                  long long _2072 = (_ptr__2047[_2067] % _2054);
                  _ptr__2047[_2067] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2070,_2052 ),_2071 ),_ptr__2064[_2068] ),_2054 ),_2072 );
                  ++ _2067;
                }
              }
            }
          }
          int _2073 = (int)1;
          int _7772 = (int)0;
          int _7773 = _2037;
          for (int _2074 = _7772; _2074 < _7773; ++_2074)
          {
            {
              int _7774;
              bool _7775 = (_2073 < _ptr__2039[_2074]);
              if (_7775)
              {
                _7774 = _ptr__2039[_2074];
              }
              else
              {
                _7774 = _2073;
              }
              _2073 = _7774;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2075 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2037)));
          _checked_ptr_1<long long> _ptr__2075(_2075 ? _2075->raw() : nullptr,_2075 ? _2075->size(0) : 0);
          _ptr__2075[(_2037 - (int)1)] = (int)1;
          int _7776 = (int)1;
          int _7777 = _2037;
          for (int _2076 = _7776; _2076 < _7777; ++_2076)
          {
            {
              _ptr__2075[((_2037 - _2076) - (int)1)] = safe_mul( _ptr__2075[(_2037 - _2076)],_ptr__2039[(_2037 - _2076)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2077 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2073,(int)1 ))));
          _checked_ptr_1<int> _ptr__2077(_2077 ? _2077->raw() : nullptr,_2077 ? _2077->size(0) : 0);
          int _7778 = (int)0;
          int _7779 = _2037;
          for (int _2078 = _7778; _2078 < _7779; ++_2078)
          {
            {
              int _2079 = ((_2037 - _2078) - (int)1);
              int _7780 = (int)0;
              int _7781 = safe_add( _ptr__2039[_2079],(int)1 );
              for (int _2080 = _7780; _2080 < _7781; ++_2080)
              {
                {
                  _ptr__2077[_2080] = (int)0;
                }
              }
              int _7782 = (int)0;
              int _7783 = _2035;
              for (int _2081 = _7782; _2081 < _7783; ++_2081)
              {
                {
                  ++ _ptr__2077[safe_add( ((_ptr__2047[_2081] / _ptr__2075[_2079]) % _ptr__2039[_2079]),(int)1 )];
                }
              }
              int _7784 = (int)0;
              int _7785 = _ptr__2039[_2079];
              for (int _2082 = _7784; _2082 < _7785; ++_2082)
              {
                {
                  _ptr__2077[safe_add( _2082,(int)1 )] += _ptr__2077[_2082];
                }
              }
              int _7786 = (int)0;
              int _7787 = _2035;
              for (int _2083 = _7786; _2083 < _7787; ++_2083)
              {
                {
                  int _2084 = _ptr__2062[_2083];
                  long long _2085 = ((_ptr__2047[_2084] / _ptr__2075[_2079]) % _ptr__2039[_2079]);
                  _ptr__2063[_ptr__2077[_2085]] = _2084;
                  ++ _ptr__2077[_2085];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2086 = _2062;
              _checked_ptr_1<int> _ptr__2086(_2086 ? _2086->raw() : nullptr,_2086 ? _2086->size(0) : 0);
              _2062 = _2063;
              _ptr__2062.update(_2062 ? _2062->raw() : nullptr, _2062 ? _2062->size(0) : 0);
              _2063 = _2086;
              _ptr__2063.update(_2063 ? _2063->raw() : nullptr, _2063 ? _2063->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7788;
          bool _7789 = (_2035 < safe_mul( safe_mul( _2050,_2052 ),_2054 ));
          if (_7789)
          {
            std::vector<long long> _7790;
            for (int _2087 = (int)0, _7791 = _2035; _2087 < _7791 ; ++_2087)
            {
              _7790.push_back(_ptr__2047[_ptr__2062[_2087]]);
            }
            auto _7792 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7790.size()),_7790.begin(),_7790.end()));
            _7788 = _7792;
          }
          else
          {
            _7788 = nullptr;
          }
          std::vector<long long> _7793;
          for (int _2088 = (int)0, _7794 = _2035; _2088 < _7794 ; ++_2088)
          {
            _7793.push_back(_ptr__2046[_ptr__2062[_2088]]);
          }
          auto _7795 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7793.size()),_7793.begin(),_7793.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2021,_2039,_7788,_7795)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2089,    monty::rc_ptr< ::mosek::fusion::Model > _2090){ return new mosek::fusion::LinearPSDConstraint(_2089,_2090); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2089,    monty::rc_ptr< ::mosek::fusion::Model > _2090) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2089,_2090); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2089,    monty::rc_ptr< ::mosek::fusion::Model > _2090){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2089,_2090);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2089)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2089)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2089)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2089)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2089)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2091,    const std::string &  _2092,    int _2093,    std::shared_ptr< monty::ndarray< int,1 > > _2094,    int _2095,    std::shared_ptr< monty::ndarray< int,1 > > _2096,    std::shared_ptr< monty::ndarray< long long,1 > > _2097){ return new mosek::fusion::LinearPSDConstraint(_2091,_2092,_2093,_2094,_2095,_2096,_2097); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2091,    const std::string &  _2092,    int _2093,    std::shared_ptr< monty::ndarray< int,1 > > _2094,    int _2095,    std::shared_ptr< monty::ndarray< int,1 > > _2096,    std::shared_ptr< monty::ndarray< long long,1 > > _2097) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2091,_2092,_2093,_2094,_2095,_2096,_2097); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2091,    const std::string &  _2092,    int _2093,    std::shared_ptr< monty::ndarray< int,1 > > _2094,    int _2095,    std::shared_ptr< monty::ndarray< int,1 > > _2096,    std::shared_ptr< monty::ndarray< long long,1 > > _2097){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2094(_2094 ? _2094->raw() : nullptr, _2094 ? _2094->size(0) : 0);
    _checked_ptr_1<int> _ptr__2096(_2096 ? _2096->raw() : nullptr, _2096 ? _2096->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2097(_2097 ? _2097->raw() : nullptr, _2097 ? _2097->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2091,_2092,_2094,_2096);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2093;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2097;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2096;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2095;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2094;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2098,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2099){
  std::shared_ptr< monty::ndarray< int,1 > > _2100 = ::mosek::fusion::p_Set::idxtokey(shape,_2098);
  _checked_ptr_1<int> _ptr__2100(_2100 ? _2100->raw() : nullptr,_2100 ? _2100->size(0) : 0);
  _2099->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2100[(int)0]);
  int _7796 = (int)1;
  int _7797 = (int)((_2100)->size(0));
  for (int _2101 = _7796; _2101 < _7797; ++_2101)
  {
    {
      _2099->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2100[_2101]);
    }
  }
  _2099->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7798 = (int)1;
  int _7799 = (int)((_2100)->size(0));
  for (int _2102 = _7798; _2102 < _7799; ++_2102)
  {
    {
      _2099->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2102)));
    }
  }
  _2099->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2103){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2103)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2104,    monty::rc_ptr< ::mosek::fusion::Model > _2105){ return new mosek::fusion::PSDConstraint(_2104,_2105); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2104,    monty::rc_ptr< ::mosek::fusion::Model > _2105) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2104,_2105); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2104,    monty::rc_ptr< ::mosek::fusion::Model > _2105){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2104,_2105);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2104)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2106,    const std::string &  _2107,    int _2108,    std::shared_ptr< monty::ndarray< int,1 > > _2109,    int _2110,    int _2111,    std::shared_ptr< monty::ndarray< long long,1 > > _2112,    std::shared_ptr< monty::ndarray< int,1 > > _2113){ return new mosek::fusion::PSDConstraint(_2106,_2107,_2108,_2109,_2110,_2111,_2112,_2113); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2106,    const std::string &  _2107,    int _2108,    std::shared_ptr< monty::ndarray< int,1 > > _2109,    int _2110,    int _2111,    std::shared_ptr< monty::ndarray< long long,1 > > _2112,    std::shared_ptr< monty::ndarray< int,1 > > _2113) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2106,_2107,_2108,_2109,_2110,_2111,_2112,_2113); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2106,    const std::string &  _2107,    int _2108,    std::shared_ptr< monty::ndarray< int,1 > > _2109,    int _2110,    int _2111,    std::shared_ptr< monty::ndarray< long long,1 > > _2112,    std::shared_ptr< monty::ndarray< int,1 > > _2113){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2109(_2109 ? _2109->raw() : nullptr, _2109 ? _2109->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2112(_2112 ? _2112->raw() : nullptr, _2112 ? _2112->size(0) : 0);
    _checked_ptr_1<int> _ptr__2113(_2113 ? _2113->raw() : nullptr, _2113 ? _2113->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2106,_2107,_2109,::mosek::fusion::p_PSDConstraint::computenidxs(_2109,_2110,_2111,_2113));
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2108;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2113;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2112;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2107;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2109;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2110;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2111;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2114){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2114)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2115,int _2116,int _2117,std::shared_ptr< monty::ndarray< int,1 > > _2118){
  _checked_ptr_1<int> _ptr__2115(_2115 ? _2115->raw() : nullptr, _2115 ? _2115->size(0) : 0);
  _checked_ptr_1<int> _ptr__2118(_2118 ? _2118->raw() : nullptr, _2118 ? _2118->size(0) : 0);
  int _2119 = (int)((_2115)->size(0));
  bool _2120 = (_2116 < _2117);
  int _7800;
  bool _7801 = _2120;
  if (_7801)
  {
    _7800 = _2116;
  }
  else
  {
    _7800 = _2117;
  }
  int _2121 = _7800;
  int _7802;
  bool _7803 = _2120;
  if (_7803)
  {
    _7802 = _2117;
  }
  else
  {
    _7802 = _2116;
  }
  int _2122 = _7802;
  std::shared_ptr< monty::ndarray< int,1 > > _2123 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2123(_2123 ? _2123->raw() : nullptr,_2123 ? _2123->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2124 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2124(_2124 ? _2124->raw() : nullptr,_2124 ? _2124->size(0) : 0);
  int _2125 = (int)1;
  int _7804 = (int)0;
  int _7805 = (int)((_2115)->size(0));
  for (int _2126 = _7804; _2126 < _7805; ++_2126)
  {
    {
      _2125 *= _ptr__2115[_2126];
    }
  }
  int _7806 = (int)0;
  int _7807 = _2121;
  for (int _2127 = _7806; _2127 < _7807; ++_2127)
  {
    {
      _ptr__2123[(int)0] *= _ptr__2115[_2127];
    }
  }
  _ptr__2123[(int)1] = _ptr__2115[_2121];
  int _7808 = safe_add( _2121,(int)1 );
  int _7809 = _2122;
  for (int _2128 = _7808; _2128 < _7809; ++_2128)
  {
    {
      _ptr__2123[(int)2] *= _ptr__2115[_2128];
    }
  }
  _ptr__2123[(int)3] = _ptr__2115[_2122];
  int _7810 = safe_add( _2122,(int)1 );
  int _7811 = _2119;
  for (int _2129 = _7810; _2129 < _7811; ++_2129)
  {
    {
      _ptr__2123[(int)4] *= _ptr__2115[_2129];
    }
  }
  _ptr__2124[(int)4] = (int)1;
  int _7812 = (int)1;
  int _7813 = (int)5;
  for (int _2130 = _7812; _2130 < _7813; ++_2130)
  {
    {
      _ptr__2124[(((int)5 - _2130) - (int)1)] = safe_mul( _ptr__2124[((int)5 - _2130)],_ptr__2123[((int)5 - _2130)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2125)));
  _checked_ptr_1<int> _ptr__2131(_2131 ? _2131->raw() : nullptr,_2131 ? _2131->size(0) : 0);
  int _2132 = (int)0;
  if (_2120)
  {
    {
      int _7814 = (int)0;
      int _7815 = _ptr__2123[(int)0];
      for (int _2133 = _7814; _2133 < _7815; ++_2133)
      {
        {
          int _7816 = (int)0;
          int _7817 = _ptr__2123[(int)1];
          for (int _2134 = _7816; _2134 < _7817; ++_2134)
          {
            {
              int _7818 = (int)0;
              int _7819 = _ptr__2123[(int)2];
              for (int _2135 = _7818; _2135 < _7819; ++_2135)
              {
                {
                  int _7820 = _2134;
                  int _7821 = _ptr__2123[(int)1];
                  for (int _2136 = _7820; _2136 < _7821; ++_2136)
                  {
                    {
                      int _7822 = (int)0;
                      int _7823 = _ptr__2123[(int)4];
                      for (int _2137 = _7822; _2137 < _7823; ++_2137)
                      {
                        {
                          _ptr__2131[safe_add( safe_add( safe_add( safe_add( safe_mul( _2133,_ptr__2124[(int)0] ),safe_mul( _2134,_ptr__2124[(int)1] ) ),safe_mul( _2135,_ptr__2124[(int)2] ) ),safe_mul( _2136,_ptr__2124[(int)3] ) ),safe_mul( _2137,_ptr__2124[(int)4] ) )] = _ptr__2118[_2132];
                          _ptr__2131[safe_add( safe_add( safe_add( safe_add( safe_mul( _2133,_ptr__2124[(int)0] ),safe_mul( _2136,_ptr__2124[(int)1] ) ),safe_mul( _2135,_ptr__2124[(int)2] ) ),safe_mul( _2134,_ptr__2124[(int)3] ) ),safe_mul( _2137,_ptr__2124[(int)4] ) )] = _ptr__2118[_2132];
                          ++ _2132;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _7824 = (int)0;
      int _7825 = _ptr__2123[(int)0];
      for (int _2138 = _7824; _2138 < _7825; ++_2138)
      {
        {
          int _7826 = (int)0;
          int _7827 = _ptr__2123[(int)1];
          for (int _2139 = _7826; _2139 < _7827; ++_2139)
          {
            {
              int _7828 = (int)0;
              int _7829 = _ptr__2123[(int)2];
              for (int _2140 = _7828; _2140 < _7829; ++_2140)
              {
                {
                  int _7830 = (int)0;
                  int _7831 = safe_add( _2139,(int)1 );
                  for (int _2141 = _7830; _2141 < _7831; ++_2141)
                  {
                    {
                      int _7832 = (int)0;
                      int _7833 = _ptr__2123[(int)4];
                      for (int _2142 = _7832; _2142 < _7833; ++_2142)
                      {
                        {
                          _ptr__2131[safe_add( safe_add( safe_add( safe_add( safe_mul( _2138,_ptr__2124[(int)0] ),safe_mul( _2139,_ptr__2124[(int)1] ) ),safe_mul( _2140,_ptr__2124[(int)2] ) ),safe_mul( _2141,_ptr__2124[(int)3] ) ),safe_mul( _2142,_ptr__2124[(int)4] ) )] = _ptr__2118[_2132];
                          _ptr__2131[safe_add( safe_add( safe_add( safe_add( safe_mul( _2138,_ptr__2124[(int)0] ),safe_mul( _2141,_ptr__2124[(int)1] ) ),safe_mul( _2140,_ptr__2124[(int)2] ) ),safe_mul( _2139,_ptr__2124[(int)3] ) ),safe_mul( _2142,_ptr__2124[(int)4] ) )] = _ptr__2118[_2132];
                          ++ _2132;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2131;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2143){ return new mosek::fusion::ConstraintCache(_2143); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2143) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2143); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2143){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2143)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2143)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7834;
    bool _7835 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->subj.get());
    if (_7835)
    {
      _7834 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->subj);
    }
    else
    {
      _7834 = nullptr;
    }
    subj = _7834;
    std::shared_ptr< monty::ndarray< int,1 > > _7836;
    bool _7837 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->subi.get());
    if (_7837)
    {
      _7836 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->subi);
    }
    else
    {
      _7836 = nullptr;
    }
    subi = _7836;
    std::shared_ptr< monty::ndarray< double,1 > > _7838;
    bool _7839 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->cof.get());
    if (_7839)
    {
      _7838 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->cof);
    }
    else
    {
      _7838 = nullptr;
    }
    cof = _7838;
    std::shared_ptr< monty::ndarray< double,1 > > _7840;
    bool _7841 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->bfix.get());
    if (_7841)
    {
      _7840 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->bfix);
    }
    else
    {
      _7840 = nullptr;
    }
    bfix = _7840;
    std::shared_ptr< monty::ndarray< double,1 > > _7842;
    bool _7843 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->buffer_cof.get());
    if (_7843)
    {
      _7842 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->buffer_cof);
    }
    else
    {
      _7842 = nullptr;
    }
    buffer_cof = _7842;
    std::shared_ptr< monty::ndarray< int,1 > > _7844;
    bool _7845 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->buffer_subj.get());
    if (_7845)
    {
      _7844 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->buffer_subj);
    }
    else
    {
      _7844 = nullptr;
    }
    buffer_subj = _7844;
    std::shared_ptr< monty::ndarray< int,1 > > _7846;
    bool _7847 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->buffer_subi.get());
    if (_7847)
    {
      _7846 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->buffer_subi);
    }
    else
    {
      _7846 = nullptr;
    }
    buffer_subi = _7846;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2143)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2143)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7848;
    bool _7849 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->barsubi.get());
    if (_7849)
    {
      _7848 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->barsubi);
    }
    else
    {
      _7848 = nullptr;
    }
    barsubi = _7848;
    std::shared_ptr< monty::ndarray< int,1 > > _7850;
    bool _7851 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->barsubj.get());
    if (_7851)
    {
      _7850 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->barsubj);
    }
    else
    {
      _7850 = nullptr;
    }
    barsubj = _7850;
    std::shared_ptr< monty::ndarray< int,1 > > _7852;
    bool _7853 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2143)->barmatidx.get());
    if (_7853)
    {
      _7852 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2143)->barmatidx);
    }
    else
    {
      _7852 = nullptr;
    }
    barmatidx = _7852;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2144,    std::shared_ptr< monty::ndarray< double,1 > > _2145,    std::shared_ptr< monty::ndarray< int,1 > > _2146,    std::shared_ptr< monty::ndarray< double,1 > > _2147,    std::shared_ptr< monty::ndarray< int,1 > > _2148,    std::shared_ptr< monty::ndarray< int,1 > > _2149,    std::shared_ptr< monty::ndarray< int,1 > > _2150){ return new mosek::fusion::ConstraintCache(_2144,_2145,_2146,_2147,_2148,_2149,_2150); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2144,    std::shared_ptr< monty::ndarray< double,1 > > _2145,    std::shared_ptr< monty::ndarray< int,1 > > _2146,    std::shared_ptr< monty::ndarray< double,1 > > _2147,    std::shared_ptr< monty::ndarray< int,1 > > _2148,    std::shared_ptr< monty::ndarray< int,1 > > _2149,    std::shared_ptr< monty::ndarray< int,1 > > _2150) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2144,_2145,_2146,_2147,_2148,_2149,_2150); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2144,    std::shared_ptr< monty::ndarray< double,1 > > _2145,    std::shared_ptr< monty::ndarray< int,1 > > _2146,    std::shared_ptr< monty::ndarray< double,1 > > _2147,    std::shared_ptr< monty::ndarray< int,1 > > _2148,    std::shared_ptr< monty::ndarray< int,1 > > _2149,    std::shared_ptr< monty::ndarray< int,1 > > _2150){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2144(_2144 ? _2144->raw() : nullptr, _2144 ? _2144->size(0) : 0);
    _checked_ptr_1<double> _ptr__2145(_2145 ? _2145->raw() : nullptr, _2145 ? _2145->size(0) : 0);
    _checked_ptr_1<int> _ptr__2146(_2146 ? _2146->raw() : nullptr, _2146 ? _2146->size(0) : 0);
    _checked_ptr_1<double> _ptr__2147(_2147 ? _2147->raw() : nullptr, _2147 ? _2147->size(0) : 0);
    _checked_ptr_1<int> _ptr__2148(_2148 ? _2148->raw() : nullptr, _2148 ? _2148->size(0) : 0);
    _checked_ptr_1<int> _ptr__2149(_2149 ? _2149->raw() : nullptr, _2149 ? _2149->size(0) : 0);
    _checked_ptr_1<int> _ptr__2150(_2150 ? _2150->raw() : nullptr, _2150 ? _2150->size(0) : 0);
    nrows = ((int)((_2144)->size(0)) - (int)1);
    nnz = _ptr__2144[((int)((_2144)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2147.get()))
    {
      {
        bfix = _2147;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2148.get()) && ((NULL != _2149.get()) && (NULL != _2150.get()))))
    {
      {
        nbarnz = (int)((_2148)->size(0));
        if ((nbarnz > (int)((_2149)->size(0))))
        {
          {
            nbarnz = (int)((_2149)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2150)->size(0))))
        {
          {
            nbarnz = (int)((_2150)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2148,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2149,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2150,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2146,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2145,(long long)0,cof,(long long)0,nnz);
    int _7854 = (int)0;
    int _7855 = nrows;
    for (int _2151 = _7854; _2151 < _7855; ++_2151)
    {
      {
        long long _7856 = _ptr__2144[_2151];
        long long _7857 = _ptr__2144[safe_add( _2151,(int)1 )];
        for (long long _2152 = _7856; _2152 < _7857; ++_2152)
        {
          {
            ((*subi)(_2152)) = _2151;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2153){
  _checked_ptr_1<double> _ptr__2153(_2153 ? _2153->raw() : nullptr, _2153 ? _2153->size(0) : 0);
  int _7858 = (int)0;
  int _7859 = nrows;
  for (int _2154 = _7858; _2154 < _7859; ++_2154)
  {
    {
      ((*bfix)(_2154)) = (((*bfix)(_2154)) + _ptr__2153[_2154]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _7860;
  for (long long _2156 = (long long)0, _7861 = nbarnz; _2156 < _7861 ; ++_2156)
  {
    _7860.push_back(_2156);
  }
  auto _7862 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7860.size()),_7860.begin(),_7860.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2155 = _7862;
  _checked_ptr_1<long long> _ptr__2155(_2155 ? _2155->raw() : nullptr,_2155 ? _2155->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2155,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2155,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2157 = barsubi;
      _checked_ptr_1<int> _ptr__2157(_2157 ? _2157->raw() : nullptr,_2157 ? _2157->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2158 = barsubj;
      _checked_ptr_1<int> _ptr__2158(_2158 ? _2158->raw() : nullptr,_2158 ? _2158->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2159 = barmatidx;
      _checked_ptr_1<int> _ptr__2159(_2159 ? _2159->raw() : nullptr,_2159 ? _2159->size(0) : 0);
      std::vector<int> _7863;
      for (long long _2160 = (int)0, _7864 = nbarnz; _2160 < _7864 ; ++_2160)
      {
        _7863.push_back(_ptr__2157[_ptr__2155[_2160]]);
      }
      auto _7865 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7863.size()),_7863.begin(),_7863.end()));
      barsubi = _7865;
      std::vector<int> _7866;
      for (long long _2161 = (int)0, _7867 = nbarnz; _2161 < _7867 ; ++_2161)
      {
        _7866.push_back(_ptr__2158[_ptr__2155[_2161]]);
      }
      auto _7868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7866.size()),_7866.begin(),_7866.end()));
      barsubj = _7868;
      std::vector<int> _7869;
      for (long long _2162 = (int)0, _7870 = nbarnz; _2162 < _7870 ; ++_2162)
      {
        _7869.push_back(_ptr__2159[_ptr__2155[_2162]]);
      }
      auto _7871 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7869.size()),_7869.begin(),_7869.end()));
      barmatidx = _7871;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2163,std::shared_ptr< monty::ndarray< int,1 > > _2164,std::shared_ptr< monty::ndarray< int,1 > > _2165){
  _checked_ptr_1<int> _ptr__2163(_2163 ? _2163->raw() : nullptr, _2163 ? _2163->size(0) : 0);
  _checked_ptr_1<int> _ptr__2164(_2164 ? _2164->raw() : nullptr, _2164 ? _2164->size(0) : 0);
  _checked_ptr_1<int> _ptr__2165(_2165 ? _2165->raw() : nullptr, _2165 ? _2165->size(0) : 0);
  if ((NULL != _2163.get()))
  {
    {
      int _2166 = (int)((_2163)->size(0));
      if (((int)((_2163)->size(0)) <= safe_add( nbarnz,_2166 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2167 = barsubi;
          _checked_ptr_1<int> _ptr__2167(_2167 ? _2167->raw() : nullptr,_2167 ? _2167->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2168 = barsubj;
          _checked_ptr_1<int> _ptr__2168(_2168 ? _2168->raw() : nullptr,_2168 ? _2168->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2169 = barmatidx;
          _checked_ptr_1<int> _ptr__2169(_2169 ? _2169->raw() : nullptr,_2169 ? _2169->size(0) : 0);
          long long _7872;
          bool _7873 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2166 ));
          if (_7873)
          {
            _7872 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _7872 = safe_add( nbarnz,safe_mul( _2166,(int)2 ) );
          }
          long long _2170 = _7872;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2170)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2167,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2168,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2169,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2163,(long long)((int)0),barsubi,nbarnz,(long long)(_2166));
      ::mosek::fusion::Utils::Tools::arraycopy(_2164,(long long)((int)0),barsubj,nbarnz,(long long)(_2166));
      ::mosek::fusion::Utils::Tools::arraycopy(_2165,(long long)((int)0),barmatidx,nbarnz,(long long)(_2166));
      nbarnz += _2166;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2171,std::shared_ptr< monty::ndarray< int,1 > > _2172,std::shared_ptr< monty::ndarray< double,1 > > _2173,std::shared_ptr< monty::ndarray< double,1 > > _2174){
  _checked_ptr_1<long long> _ptr__2171(_2171 ? _2171->raw() : nullptr, _2171 ? _2171->size(0) : 0);
  _checked_ptr_1<int> _ptr__2172(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
  _checked_ptr_1<double> _ptr__2173(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
  _checked_ptr_1<double> _ptr__2174(_2174 ? _2174->raw() : nullptr, _2174 ? _2174->size(0) : 0);
  long long _2175 = safe_add( nunordered,_ptr__2171[nrows] );
  long long _2176 = _ptr__2171[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2177;
  _checked_ptr_1<int> _ptr__2177(_2177 ? _2177->raw() : nullptr,_2177 ? _2177->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2178;
  _checked_ptr_1<int> _ptr__2178(_2178 ? _2178->raw() : nullptr,_2178 ? _2178->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2179;
  _checked_ptr_1<double> _ptr__2179(_2179 ? _2179->raw() : nullptr,_2179 ? _2179->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2175)))
  {
    {
      _2177 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2175)));
      _ptr__2177.update(_2177 ? _2177->raw() : nullptr, _2177 ? _2177->size(0) : 0);
      _2178 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2175)));
      _ptr__2178.update(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
      _2179 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2175)));
      _ptr__2179.update(_2179 ? _2179->raw() : nullptr, _2179 ? _2179->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2177,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2178,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2179,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2177 = buffer_subi;
      _ptr__2177.update(_2177 ? _2177->raw() : nullptr, _2177 ? _2177->size(0) : 0);
      _2178 = buffer_subj;
      _ptr__2178.update(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
      _2179 = buffer_cof;
      _ptr__2179.update(_2179 ? _2179->raw() : nullptr, _2179 ? _2179->size(0) : 0);
    }
  }
  int _7874 = (int)0;
  int _7875 = nrows;
  for (int _2180 = _7874; _2180 < _7875; ++_2180)
  {
    {
      long long _7876 = _ptr__2171[_2180];
      long long _7877 = _ptr__2171[safe_add( _2180,(int)1 )];
      for (long long _2181 = _7876; _2181 < _7877; ++_2181)
      {
        {
          _ptr__2177[safe_add( nunordered,_2181 )] = _2180;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2172,(long long)0,_2178,nunordered,_2176);
  ::mosek::fusion::Utils::Tools::arraycopy(_2173,(long long)0,_2179,nunordered,_2176);
  buffer_subi = _2177;
  buffer_subj = _2178;
  buffer_cof = _2179;
  if ((NULL != _2174.get()))
  {
    {
      int _7878 = (int)0;
      int _7879 = nrows;
      for (int _2182 = _7878; _2182 < _7879; ++_2182)
      {
        {
          ((*bfix)(_2182)) = (((*bfix)(_2182)) + _ptr__2174[_2182]);
        }
      }
    }
  }
  {}
  nunordered = _2175;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2183,std::shared_ptr< monty::ndarray< int,1 > > _2184,std::shared_ptr< monty::ndarray< double,1 > > _2185,std::shared_ptr< monty::ndarray< double,1 > > _2186) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2183,_2184,_2185,_2186); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2183,std::shared_ptr< monty::ndarray< int,1 > > _2184,std::shared_ptr< monty::ndarray< double,1 > > _2185,std::shared_ptr< monty::ndarray< double,1 > > _2186){
  _checked_ptr_1<long long> _ptr__2183(_2183 ? _2183->raw() : nullptr, _2183 ? _2183->size(0) : 0);
  _checked_ptr_1<int> _ptr__2184(_2184 ? _2184->raw() : nullptr, _2184 ? _2184->size(0) : 0);
  _checked_ptr_1<double> _ptr__2185(_2185 ? _2185->raw() : nullptr, _2185 ? _2185->size(0) : 0);
  _checked_ptr_1<double> _ptr__2186(_2186 ? _2186->raw() : nullptr, _2186 ? _2186->size(0) : 0);
  if ((((int)((_2183)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2186.get()) && ((int)((_2186)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2183,_2184,_2185,_2186);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2187,std::shared_ptr< monty::ndarray< int,1 > > _2188,std::shared_ptr< monty::ndarray< double,1 > > _2189,std::shared_ptr< monty::ndarray< double,1 > > _2190) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2187,_2188,_2189,_2190); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2187,std::shared_ptr< monty::ndarray< int,1 > > _2188,std::shared_ptr< monty::ndarray< double,1 > > _2189,std::shared_ptr< monty::ndarray< double,1 > > _2190){
  _checked_ptr_1<int> _ptr__2187(_2187 ? _2187->raw() : nullptr, _2187 ? _2187->size(0) : 0);
  _checked_ptr_1<int> _ptr__2188(_2188 ? _2188->raw() : nullptr, _2188 ? _2188->size(0) : 0);
  _checked_ptr_1<double> _ptr__2189(_2189 ? _2189->raw() : nullptr, _2189 ? _2189->size(0) : 0);
  _checked_ptr_1<double> _ptr__2190(_2190 ? _2190->raw() : nullptr, _2190 ? _2190->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2191 = nullptr;
  _checked_ptr_1<long long> _ptr__2191(_2191 ? _2191->raw() : nullptr,_2191 ? _2191->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2190.get())))
  {
    {
      int _7880 = (int)0;
      int _7881 = nrows;
      for (int _2192 = _7880; _2192 < _7881; ++_2192)
      {
        {
          _ptr__2190[_2192] = ((*bfix)(_2192));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2193 = false;
  {
    int _2194 = (int)1;
    while ( ((_2194 < nunordered) && ((((*buffer_subi)((_2194 - (int)1))) < ((*buffer_subi)(_2194))) || ((((*buffer_subi)((_2194 - (int)1))) == ((*buffer_subi)(_2194))) && (((*buffer_subj)((_2194 - (int)1))) <= ((*buffer_subj)(_2194)))))) )
    {
      {
        ++ _2194;
      }
    }
    _2193 = (_2194 == nunordered);
  }
  if ((!_2193))
  {
    {
      std::vector<long long> _7882;
      for (long long _2195 = (int)0, _7883 = nunordered; _2195 < _7883 ; ++_2195)
      {
        _7882.push_back(_2195);
      }
      auto _7884 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7882.size()),_7882.begin(),_7882.end()));
      _2191 = _7884;
      _ptr__2191.update(_2191 ? _2191->raw() : nullptr, _2191 ? _2191->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2191,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2196 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2196 ))));
  _checked_ptr_1<int> _ptr__2197(_2197 ? _2197->raw() : nullptr,_2197 ? _2197->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2198 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2196 ))));
  _checked_ptr_1<int> _ptr__2198(_2198 ? _2198->raw() : nullptr,_2198 ? _2198->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2199 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2196 ))));
  _checked_ptr_1<double> _ptr__2199(_2199 ? _2199->raw() : nullptr,_2199 ? _2199->size(0) : 0);
  long long _2200 = (long long)0;
  if (_2193)
  {
    {
      long long _2201 = (long long)0;
      int _2202 = (int)0;
      long long _2203 = nunordered;
      long long _2204 = _2196;
      int _2205 = (int)0;
      int _2206 = (int)0;
      while ( ((_2206 < _2204) && (_2205 < _2203)) )
      {
        {
          if (((((*subi)(_2206)) < ((*buffer_subi)(_2205))) || ((((*subi)(_2206)) == ((*buffer_subi)(_2205))) && (((*subj)(_2206)) < ((*buffer_subj)(_2205))))))
          {
            {
              _ptr__2197[_2202] = ((*subi)(_2206));
              _ptr__2198[_2202] = ((*subj)(_2206));
              _ptr__2199[_2202] = ((*cof)(_2206));
              ++ _2206;
              ++ _2202;
            }
          }
          else if(((((*subi)(_2206)) > ((*buffer_subi)(_2205))) || ((((*subi)(_2206)) == ((*buffer_subi)(_2205))) && (((*subj)(_2206)) > ((*buffer_subj)(_2205))))))
          {
            {
              _ptr__2197[_2202] = ((*buffer_subi)(_2205));
              _ptr__2198[_2202] = ((*buffer_subj)(_2205));
              _ptr__2199[_2202] = ((*buffer_cof)(_2205));
              _ptr__2187[_2200] = _ptr__2197[_2202];
              _ptr__2188[_2200] = _ptr__2198[_2202];
              _ptr__2189[_2200] = _ptr__2199[_2202];
              ++ _2200;
              ++ _2205;
              ++ _2202;
            }
          }
          else
          {
            {
              _ptr__2197[_2202] = ((*subi)(_2206));
              _ptr__2198[_2202] = ((*subj)(_2206));
              _ptr__2199[_2202] = ((*cof)(_2206));
              while ( ((_2206 < (int)((subi)->size(0))) && ((_2205 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2206)) == ((*buffer_subi)(_2205))) && (((*subj)(_2206)) == ((*buffer_subj)(_2205)))))) )
              {
                {
                  _ptr__2199[_2202] = (_ptr__2199[_2202] + ((*buffer_cof)(_2205)));
                  ++ _2205;
                }
              }
              _ptr__2187[_2200] = _ptr__2197[_2202];
              _ptr__2188[_2200] = _ptr__2198[_2202];
              _ptr__2189[_2200] = _ptr__2199[_2202];
              ++ _2200;
              ++ _2206;
              ++ _2202;
            }
          }
        }
      }
      while ( (_2206 < _2204) )
      {
        {
          _ptr__2197[_2202] = ((*subi)(_2206));
          _ptr__2198[_2202] = ((*subj)(_2206));
          _ptr__2199[_2202] = ((*cof)(_2206));
          ++ _2206;
          ++ _2202;
        }
      }
      while ( (_2205 < _2203) )
      {
        {
          _ptr__2197[_2202] = ((*buffer_subi)(_2205));
          _ptr__2198[_2202] = ((*buffer_subj)(_2205));
          _ptr__2199[_2202] = ((*buffer_cof)(_2205));
          _ptr__2187[_2200] = _ptr__2197[_2202];
          _ptr__2188[_2200] = _ptr__2198[_2202];
          _ptr__2189[_2200] = _ptr__2199[_2202];
          ++ _2200;
          ++ _2205;
          ++ _2202;
        }
      }
      nnz = _2202;
    }
  }
  else
  {
    {
      long long _2207 = (long long)0;
      int _2208 = (int)0;
      long long _2209 = nunordered;
      long long _2210 = _2196;
      int _2211 = (int)0;
      int _2212 = (int)0;
      while ( ((_2212 < _2210) && (_2211 < _2209)) )
      {
        {
          if (((((*subi)(_2212)) < ((*buffer_subi)(_ptr__2191[_2211]))) || ((((*subi)(_2212)) == ((*buffer_subi)(_ptr__2191[_2211]))) && (((*subj)(_2212)) < ((*buffer_subj)(_ptr__2191[_2211]))))))
          {
            {
              _ptr__2197[_2208] = ((*subi)(_2212));
              _ptr__2198[_2208] = ((*subj)(_2212));
              _ptr__2199[_2208] = ((*cof)(_2212));
              ++ _2212;
              ++ _2208;
            }
          }
          else if(((((*subi)(_2212)) > ((*buffer_subi)(_ptr__2191[_2211]))) || ((((*subi)(_2212)) == ((*buffer_subi)(_ptr__2191[_2211]))) && (((*subj)(_2212)) > ((*buffer_subj)(_ptr__2191[_2211]))))))
          {
            {
              _ptr__2197[_2208] = ((*buffer_subi)(_ptr__2191[_2211]));
              _ptr__2198[_2208] = ((*buffer_subj)(_ptr__2191[_2211]));
              _ptr__2199[_2208] = ((*buffer_cof)(_ptr__2191[_2211]));
              _ptr__2187[_2200] = _ptr__2197[_2208];
              _ptr__2188[_2200] = _ptr__2198[_2208];
              _ptr__2189[_2200] = _ptr__2199[_2208];
              ++ _2200;
              ++ _2211;
              ++ _2208;
            }
          }
          else
          {
            {
              _ptr__2197[_2208] = ((*subi)(_2212));
              _ptr__2198[_2208] = ((*subj)(_2212));
              _ptr__2199[_2208] = ((*cof)(_2212));
              while ( ((((*subi)(_2212)) == ((*buffer_subi)(_ptr__2191[_2211]))) && (((*subj)(_2212)) == ((*buffer_subj)(_ptr__2191[_2211])))) )
              {
                {
                  _ptr__2199[_2208] = (_ptr__2199[_2208] + ((*buffer_cof)(_ptr__2191[_2211])));
                  ++ _2211;
                }
              }
              _ptr__2187[_2200] = _ptr__2197[_2208];
              _ptr__2188[_2200] = _ptr__2198[_2208];
              _ptr__2189[_2200] = _ptr__2199[_2208];
              ++ _2200;
              ++ _2212;
              ++ _2208;
            }
          }
        }
      }
      nnz = _2208;
    }
  }
  subi = _2197;
  subj = _2198;
  cof = _2199;
  nunordered = (long long)0;
  return _2200;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2213,    std::shared_ptr< monty::ndarray< int,1 > > _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215){ return new mosek::fusion::SliceConstraint(_2213,_2214,_2215); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2213,    std::shared_ptr< monty::ndarray< int,1 > > _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2213,_2214,_2215); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2213,    std::shared_ptr< monty::ndarray< int,1 > > _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2214(_2214 ? _2214->raw() : nullptr, _2214 ? _2214->size(0) : 0);
    _checked_ptr_1<int> _ptr__2215(_2215 ? _2215->raw() : nullptr, _2215 ? _2215->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2213,_2214,_2215);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2216 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2216->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2216->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2217,    monty::rc_ptr< ::mosek::fusion::Model > _2218){ return new mosek::fusion::RangedConstraint(_2217,_2218); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2217,    monty::rc_ptr< ::mosek::fusion::Model > _2218) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2217,_2218); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2217,    monty::rc_ptr< ::mosek::fusion::Model > _2218){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2217,_2218);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2217)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2217)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2219,    const std::string &  _2220,    std::shared_ptr< monty::ndarray< int,1 > > _2221,    std::shared_ptr< monty::ndarray< int,1 > > _2222){ return new mosek::fusion::RangedConstraint(_2219,_2220,_2221,_2222); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2219,    const std::string &  _2220,    std::shared_ptr< monty::ndarray< int,1 > > _2221,    std::shared_ptr< monty::ndarray< int,1 > > _2222) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2219,_2220,_2221,_2222); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2219,    const std::string &  _2220,    std::shared_ptr< monty::ndarray< int,1 > > _2221,    std::shared_ptr< monty::ndarray< int,1 > > _2222){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2221(_2221 ? _2221->raw() : nullptr, _2221 ? _2221->size(0) : 0);
    _checked_ptr_1<int> _ptr__2222(_2222 ? _2222->raw() : nullptr, _2222 ? _2222->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2219,_2220,_2221,_2222);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2221;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2222;
  }
}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2223){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2223)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2224,    monty::rc_ptr< ::mosek::fusion::Model > _2225){ return new mosek::fusion::ConicConstraint(_2224,_2225); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2224,    monty::rc_ptr< ::mosek::fusion::Model > _2225) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2224,_2225); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2224,    monty::rc_ptr< ::mosek::fusion::Model > _2225){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2224,_2225);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2224)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2226,    const std::string &  _2227,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2228,    std::shared_ptr< monty::ndarray< int,1 > > _2229,    int _2230,    std::shared_ptr< monty::ndarray< int,1 > > _2231,    std::shared_ptr< monty::ndarray< int,1 > > _2232){ return new mosek::fusion::ConicConstraint(_2226,_2227,_2228,_2229,_2230,_2231,_2232); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2226,    const std::string &  _2227,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2228,    std::shared_ptr< monty::ndarray< int,1 > > _2229,    int _2230,    std::shared_ptr< monty::ndarray< int,1 > > _2231,    std::shared_ptr< monty::ndarray< int,1 > > _2232) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2226,_2227,_2228,_2229,_2230,_2231,_2232); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2226,    const std::string &  _2227,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2228,    std::shared_ptr< monty::ndarray< int,1 > > _2229,    int _2230,    std::shared_ptr< monty::ndarray< int,1 > > _2231,    std::shared_ptr< monty::ndarray< int,1 > > _2232){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2229(_2229 ? _2229->raw() : nullptr, _2229 ? _2229->size(0) : 0);
    _checked_ptr_1<int> _ptr__2231(_2231 ? _2231->raw() : nullptr, _2231 ? _2231->size(0) : 0);
    _checked_ptr_1<int> _ptr__2232(_2232 ? _2232->raw() : nullptr, _2232 ? _2232->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2226,_2227,_2229,_2231);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2228;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2229;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2227;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2231;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2232;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2230;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2233 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2234 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _7885 = (int)0;
          int _7886 = _2233;
          for (int _2235 = _7885; _2235 < _7886; ++_2235)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2234.get())->task_var_name(((*nativeslack)(_2235)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2236 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _7887 = (int)0;
          int _7888 = _2233;
          for (int _2237 = _7887; _2237 < _7888; ++_2237)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2234.get())->task_var_name(((*nativeslack)(_2237)),_2236->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2237)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2238 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2238->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2238->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2239,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2240){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2241){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2241)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2242,    monty::rc_ptr< ::mosek::fusion::Model > _2243){ return new mosek::fusion::LinearConstraint(_2242,_2243); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2242,    monty::rc_ptr< ::mosek::fusion::Model > _2243) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2242,_2243); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2242,    monty::rc_ptr< ::mosek::fusion::Model > _2243){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2242,_2243);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2242)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2242)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2244,    const std::string &  _2245,    int _2246,    std::shared_ptr< monty::ndarray< int,1 > > _2247,    std::shared_ptr< monty::ndarray< int,1 > > _2248){ return new mosek::fusion::LinearConstraint(_2244,_2245,_2246,_2247,_2248); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2244,    const std::string &  _2245,    int _2246,    std::shared_ptr< monty::ndarray< int,1 > > _2247,    std::shared_ptr< monty::ndarray< int,1 > > _2248) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2244,_2245,_2246,_2247,_2248); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2244,    const std::string &  _2245,    int _2246,    std::shared_ptr< monty::ndarray< int,1 > > _2247,    std::shared_ptr< monty::ndarray< int,1 > > _2248){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2247(_2247 ? _2247->raw() : nullptr, _2247 ? _2247->size(0) : 0);
    _checked_ptr_1<int> _ptr__2248(_2248 ? _2248->raw() : nullptr, _2248 ? _2248->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2244,_2245,_2247,_2248);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2246;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2245;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2249 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2249->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2249->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2250,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2251){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2252){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2252)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2253,    monty::rc_ptr< ::mosek::fusion::Model > _2254){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2253,_2254);
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2253)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2253)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2253)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2253)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2255,    const std::string &  _2256,    std::shared_ptr< monty::ndarray< int,1 > > _2257,    std::shared_ptr< monty::ndarray< int,1 > > _2258){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2257(_2257 ? _2257->raw() : nullptr, _2257 ? _2257->size(0) : 0);
    _checked_ptr_1<int> _ptr__2258(_2258 ? _2258->raw() : nullptr, _2258 ? _2258->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2255,_2257,_2258);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2256;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2258;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2257;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2259 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2259->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2259->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2260 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if ((_pubthis->getSize() == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      else
      {
        {
          if (((int)((name).size()) == (int)0))
          {
            {
              mosek::fusion::p_Model::_get_impl(_2260.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
            }
          }
          else
          {
            {
              monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2261 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
              _2261->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
              if ((_pubthis->getND() > (int)0))
              {
                {
                  _2261->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
                  int _7889 = (int)1;
                  int _7890 = _pubthis->getND();
                  for (int _2262 = _7889; _2262 < _7890; ++_2262)
                  {
                    {
                      _2261->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2262);
                    }
                  }
                }
              }
              {}
              _2261->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
              std::shared_ptr< monty::ndarray< int,1 > > _7891;
              bool _7892 = (_pubthis->getND() > (int)0);
              if (_7892)
              {
                _7891 = _pubthis->getShape();
              }
              else
              {
                _7891 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
              }
              mosek::fusion::p_Model::_get_impl(_2260.get())->connames(nativeidxs,_2261->toString(),_7891,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
              names_flushed = true;
            }
          }
        }
      }
    }
  }
  {}
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2264,    monty::rc_ptr< ::mosek::fusion::Model > _2265){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2265;
    shape = mosek::fusion::p_Constraint::_get_impl(_2264)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2264)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2266,    std::shared_ptr< monty::ndarray< int,1 > > _2267,    std::shared_ptr< monty::ndarray< int,1 > > _2268){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2267(_2267 ? _2267->raw() : nullptr, _2267 ? _2267->size(0) : 0);
    _checked_ptr_1<int> _ptr__2268(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2266;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2267;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2268;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2269,long long _2270,std::shared_ptr< monty::ndarray< std::string,1 > > _2271){
  _checked_ptr_1<long long> _ptr__2269(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2272 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2272(_2272 ? _2272->raw() : nullptr,_2272 ? _2272->size(0) : 0);
  values(false,(int)0,_2272);
  return _2272;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2273 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2273(_2273 ? _2273->raw() : nullptr,_2273 ? _2273->size(0) : 0);
  values(true,(int)0,_2273);
  return _2273;
}
void mosek::fusion::p_Constraint::values(bool _2274,int _2275,std::shared_ptr< monty::ndarray< double,1 > > _2276){
  _checked_ptr_1<double> _ptr__2276(_2276 ? _2276->raw() : nullptr, _2276 ? _2276->size(0) : 0);
  model->getConstraintValues(_2274,nativeidxs,_2276,_2275);
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2277) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2277); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2277){
  _checked_ptr_1<double> _ptr__2277(_2277 ? _2277->raw() : nullptr, _2277 ? _2277->size(0) : 0);
  mosek::fusion::p_Model::_get_impl(model.get())->update_bfix(nativeidxs,_2277);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2278) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2278); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2278){
  std::shared_ptr< monty::ndarray< int,1 > > _2279 = _2278->getShape();
  _checked_ptr_1<int> _ptr__2279(_2279 ? _2279->raw() : nullptr,_2279 ? _2279->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2279)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7893 = (int)0;
  int _7894 = (int)((_2279)->size(0));
  for (int _2280 = _7893; _2280 < _7894; ++_2280)
  {
    {
      if ((_ptr__2279[_2280] != ((*shape)(_2280))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7895 = (int)((_2279)->size(0));
  int _7896 = (int)((shape)->size(0));
  for (int _2281 = _7895; _2281 < _7896; ++_2281)
  {
    {
      if ((((*shape)(_2281)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2278);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2282,monty::rc_ptr< ::mosek::fusion::Variable > _2283,bool _2284) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2282,_2283,_2284); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2282,monty::rc_ptr< ::mosek::fusion::Variable > _2283,bool _2284){
  int _2285 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2286 = _2282->getShape();
  _checked_ptr_1<int> _ptr__2286(_2286 ? _2286->raw() : nullptr,_2286 ? _2286->size(0) : 0);
  if ((_2285 < (int)((_2286)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7897 = (int)0;
  int _7898 = (int)((_2286)->size(0));
  for (int _2287 = _7897; _2287 < _7898; ++_2287)
  {
    {
      if ((_ptr__2286[_2287] != ((*shape)(_2287))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7899 = (int)((_2286)->size(0));
  int _7900 = (int)((shape)->size(0));
  for (int _2288 = _7899; _2288 < _7900; ++_2288)
  {
    {
      if ((((*shape)(_2288)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2289 = _2283->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2290 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2289)));
  _checked_ptr_1<long long> _ptr__2290(_2290 ? _2290->raw() : nullptr,_2290 ? _2290->size(0) : 0);
  if ((_2289 < _2283->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2291 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2289)));
      _checked_ptr_1<long long> _ptr__2291(_2291 ? _2291->raw() : nullptr,_2291 ? _2291->size(0) : 0);
      _2283->inst((int)0,_2291,(int)0,_2290);
    }
  }
  else
  {
    {
      _2283->inst((int)0,_2290);
    }
  }
  int _7901 = (int)0;
  int _7902 = _2289;
  for (int _2292 = _7901; _2292 < _7902; ++_2292)
  {
    {
      if ((_ptr__2290[_2292] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2293;
  _checked_ptr_1<int> _ptr__2293(_2293 ? _2293->raw() : nullptr,_2293 ? _2293->size(0) : 0);
  {
    bool _2294 = true;
    int _7903 = (int)0;
    int _7904 = (_2289 - (int)1);
    for (int _2295 = _7903; _2295 < _7904; ++_2295)
    {
      {
        _2294 = (_2294 && (_ptr__2290[_2295] < _ptr__2290[safe_add( _2295,(int)1 )]));
      }
    }
    if (_2294)
    {
      {
        std::vector<int> _7905;
        for (int _2296 = (int)0, _7906 = _2289; _2296 < _7906 ; ++_2296)
        {
          _7905.push_back((int)(_ptr__2290[_2296] - (int)1));
        }
        auto _7907 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7905.size()),_7905.begin(),_7905.end()));
        _2293 = _7907;
        _ptr__2293.update(_2293 ? _2293->raw() : nullptr, _2293 ? _2293->size(0) : 0);
      }
    }
    else
    {
      {
        std::vector<long long> _7908;
        for (int _2298 = (int)0, _7909 = _2289; _2298 < _7909 ; ++_2298)
        {
          _7908.push_back(_2298);
        }
        auto _7910 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7908.size()),_7908.begin(),_7908.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2297 = _7910;
        _checked_ptr_1<long long> _ptr__2297(_2297 ? _2297->raw() : nullptr,_2297 ? _2297->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2297,_2290,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2289));
        int _2299 = (int)1;
        int _7911 = (int)1;
        int _7912 = _2289;
        for (int _2300 = _7911; _2300 < _7912; ++_2300)
        {
          {
            if ((_ptr__2290[_ptr__2297[(_2300 - (int)1)]] < _ptr__2290[_ptr__2297[_2300]]))
            {
              {
                ++ _2299;
              }
            }
            {}
          }
        }
        _2293 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2299)));
        _ptr__2293.update(_2293 ? _2293->raw() : nullptr, _2293 ? _2293->size(0) : 0);
        int _2301 = (int)0;
        _ptr__2293[(int)0] = (int)(_ptr__2290[_ptr__2297[(int)0]] - (int)1);
        int _7913 = (int)1;
        int _7914 = _2289;
        for (int _2302 = _7913; _2302 < _7914; ++_2302)
        {
          {
            if ((_ptr__2290[(_2302 - (int)1)] < _ptr__2290[_2302]))
            {
              {
                _ptr__2293[_2301] = (int)(_ptr__2290[_ptr__2297[_2302]] - (int)1);
                ++ _2301;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2282,_2293,_2284);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2303,monty::rc_ptr< ::mosek::fusion::Variable > _2304) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2303,_2304); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2303,monty::rc_ptr< ::mosek::fusion::Variable > _2304){
  _pubthis->update(_2303,_2304,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2305 = (int)1;
  int _7915 = (int)0;
  int _7916 = (int)((shape)->size(0));
  for (int _2306 = _7915; _2306 < _7916; ++_2306)
  {
    {
      _2305 *= ((*shape)(_2306));
    }
  }
  return _2305;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2307,    int _2308) { return mosek::fusion::p_Constraint::stack(_2307,_2308); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2307,int _2308){
  return ::mosek::fusion::p_Constraint::dstack(_2307,_2308);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2309,    monty::rc_ptr< ::mosek::fusion::Constraint > _2310,    monty::rc_ptr< ::mosek::fusion::Constraint > _2311,    int _2312) { return mosek::fusion::p_Constraint::stack(_2309,_2310,_2311,_2312); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2309,monty::rc_ptr< ::mosek::fusion::Constraint > _2310,monty::rc_ptr< ::mosek::fusion::Constraint > _2311,int _2312){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2309.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2310.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2311.get())}),_2312);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2313,    monty::rc_ptr< ::mosek::fusion::Constraint > _2314,    int _2315) { return mosek::fusion::p_Constraint::stack(_2313,_2314,_2315); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2313,monty::rc_ptr< ::mosek::fusion::Constraint > _2314,int _2315){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2313.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2314.get())}),_2315);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2316) { return mosek::fusion::p_Constraint::hstack(_2316); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2316){
  return ::mosek::fusion::p_Constraint::dstack(_2316,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2317) { return mosek::fusion::p_Constraint::vstack(_2317); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2317){
  return ::mosek::fusion::p_Constraint::dstack(_2317,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2318,    monty::rc_ptr< ::mosek::fusion::Constraint > _2319,    monty::rc_ptr< ::mosek::fusion::Constraint > _2320) { return mosek::fusion::p_Constraint::hstack(_2318,_2319,_2320); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2318,monty::rc_ptr< ::mosek::fusion::Constraint > _2319,monty::rc_ptr< ::mosek::fusion::Constraint > _2320){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2318.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2319.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2320.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2321,    monty::rc_ptr< ::mosek::fusion::Constraint > _2322,    monty::rc_ptr< ::mosek::fusion::Constraint > _2323) { return mosek::fusion::p_Constraint::vstack(_2321,_2322,_2323); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2321,monty::rc_ptr< ::mosek::fusion::Constraint > _2322,monty::rc_ptr< ::mosek::fusion::Constraint > _2323){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2321.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2322.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2323.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2324,    monty::rc_ptr< ::mosek::fusion::Constraint > _2325) { return mosek::fusion::p_Constraint::hstack(_2324,_2325); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2324,monty::rc_ptr< ::mosek::fusion::Constraint > _2325){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2324.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2325.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2326,    monty::rc_ptr< ::mosek::fusion::Constraint > _2327) { return mosek::fusion::p_Constraint::vstack(_2326,_2327); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2326,monty::rc_ptr< ::mosek::fusion::Constraint > _2327){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2326.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2327.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2328,int _2329){
  monty::rc_ptr< ::mosek::fusion::Model > _2330 = nullptr;
  {
    int _7917 = (int)0;
    int _7918 = (int)((_2328)->size(0));
    for (int _2331 = _7917; _2331 < _7918; ++_2331)
    {
      {
        if ((NULL == _2330.get()))
        {
          {
            _2330 = ((*_2328)(_2331))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2328)(_2331)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2328)(_2331)))->model != _2330)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2332 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7919;
            bool _7920 = ((int)((mosek::fusion::p_Model::_get_impl(_2330.get())->getName()).size()) > (int)0);
            if (_7920)
            {
              _7919 = mosek::fusion::p_Model::_get_impl(_2330.get())->getName();
            }
            else
            {
              _7919 = std::string ("?");
            }
            std::string _2333 = _7919;
            std::string _7921;
            bool _7922 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2328)(_2331))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_7922)
            {
              _7921 = mosek::fusion::p_Model::_get_impl(((*_2328)(_2331))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _7921 = std::string ("?");
            }
            std::string _2334 = _7921;
            _2332->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2333)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2334)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2332->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2328)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2328)->size(0)) == (int)1))
  {
    {
      return ((*_2328)((int)1));
    }
  }
  else
  {
    {
      int _2335 = (int)((_2328)->size(0));
      int _2336 = (int)1;
      int _7923 = (int)0;
      int _7924 = _2335;
      for (int _2337 = _7923; _2337 < _7924; ++_2337)
      {
        {
          int _7925;
          bool _7926 = (((*_2328)(_2337))->getND() > _2336);
          if (_7926)
          {
            _7925 = ((*_2328)(_2337))->getND();
          }
          else
          {
            _7925 = _2336;
          }
          _2336 = _7925;
        }
      }
      if ((_2329 == _2336))
      {
        {
          ++ _2336;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2338 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2335,_2336)));
      int _7927 = (int)0;
      int _7928 = _2335;
      for (int _2339 = _7927; _2339 < _7928; ++_2339)
      {
        {
          int _7929 = (int)0;
          int _7930 = _2336;
          for (int _2340 = _7929; _2340 < _7930; ++_2340)
          {
            {
              ((*_2338)(_2339,_2340)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _7931;
      for (int _2342 = (int)0, _7932 = _2335; _2342 < _7932 ; ++_2342)
      {
        _7931.push_back(((*_2328)(_2342))->getSize());
      }
      auto _7933 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7931.size()),_7931.begin(),_7931.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2341 = _7933;
      _checked_ptr_1<int> _ptr__2341(_2341 ? _2341->raw() : nullptr,_2341 ? _2341->size(0) : 0);
      int _2343 = (int)0;
      int _7934 = (int)0;
      int _7935 = _2335;
      for (int _2344 = _7934; _2344 < _7935; ++_2344)
      {
        {
          _2343 += _ptr__2341[_2344];
        }
      }
      int _7936 = (int)0;
      int _7937 = _2335;
      for (int _2345 = _7936; _2345 < _7937; ++_2345)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2346 = ((*_2328)(_2345))->getShape();
          _checked_ptr_1<int> _ptr__2346(_2346 ? _2346->raw() : nullptr,_2346 ? _2346->size(0) : 0);
          int _7938 = (int)0;
          int _7939 = (int)((_2346)->size(0));
          for (int _2347 = _7938; _2347 < _7939; ++_2347)
          {
            {
              ((*_2338)(_2345,_2347)) = _ptr__2346[_2347];
            }
          }
        }
      }
      if (((_2329 < (int)0) || (_2329 > _2336)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _7940 = (int)0;
      int _7941 = _2329;
      for (int _2348 = _7940; _2348 < _7941; ++_2348)
      {
        {
          int _7942 = (int)1;
          int _7943 = _2335;
          for (int _2349 = _7942; _2349 < _7943; ++_2349)
          {
            {
              if ((((*_2338)((int)0,_2348)) != ((*_2338)(_2349,_2348))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _7944 = safe_add( _2329,(int)1 );
      int _7945 = _2336;
      for (int _2350 = _7944; _2350 < _7945; ++_2350)
      {
        {
          int _7946 = (int)1;
          int _7947 = _2335;
          for (int _2351 = _7946; _2351 < _7947; ++_2351)
          {
            {
              if ((((*_2338)((int)0,_2350)) != ((*_2338)(_2351,_2350))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2343)));
      _checked_ptr_1<int> _ptr__2352(_2352 ? _2352->raw() : nullptr,_2352 ? _2352->size(0) : 0);
      std::vector<int> _7948;
      for (int _2354 = (int)0, _7949 = _2336; _2354 < _7949 ; ++_2354)
      {
        _7948.push_back(((*_2338)((int)0,_2354)));
      }
      auto _7950 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7948.size()),_7948.begin(),_7948.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2353 = _7950;
      _checked_ptr_1<int> _ptr__2353(_2353 ? _2353->raw() : nullptr,_2353 ? _2353->size(0) : 0);
      int _7951 = (int)0;
      int _7952 = _2336;
      for (int _2355 = _7951; _2355 < _7952; ++_2355)
      {
        {
          _ptr__2353[_2329] += ((*_2338)(_2355,_2329));
        }
      }
      {
        int _2356 = (int)((_2353)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2357 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2328)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2357(_2357 ? _2357->raw() : nullptr,_2357 ? _2357->size(0) : 0);
        int _7953 = (int)0;
        int _7954 = (int)((_2328)->size(0));
        for (int _2358 = _7953; _2358 < _7954; ++_2358)
        {
          {
            _ptr__2357[safe_add( _2358,(int)1 )] = safe_add( _ptr__2357[_2358],((*_2338)(_2358,_2329)) );
          }
        }
        if ((_2329 == (int)0))
        {
          {
            int _2359 = (int)0;
            int _7955 = (int)0;
            int _7956 = _2335;
            for (int _2360 = _7955; _2360 < _7956; ++_2360)
            {
              {
                int _2361 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2328)(_2360)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2328)(_2360)))->nativeidxs,(int)0,_2352,_2359,_2361);
                _2359 += _2361;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7957;
            for (int _2363 = (int)0, _7958 = _2335; _2363 < _7958 ; ++_2363)
            {
              _7957.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2328)(_2363)))->nativeidxs);
            }
            auto _7959 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7957.size()),_7957.begin(),_7957.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2362 = _7959;
            if ((_2329 < _2336))
            {
              {
                int _2364 = (int)1;
                int _7960 = (int)0;
                int _7961 = _2329;
                for (int _2365 = _7960; _2365 < _7961; ++_2365)
                {
                  {
                    _2364 *= _ptr__2353[_2365];
                  }
                }
                int _2366 = (int)1;
                int _7962 = safe_add( _2329,(int)1 );
                int _7963 = _2336;
                for (int _2367 = _7962; _2367 < _7963; ++_2367)
                {
                  {
                    _2366 *= _ptr__2353[_2367];
                  }
                }
                int _2368 = (int)0;
                int _7964 = (int)0;
                int _7965 = _2364;
                for (int _2369 = _7964; _2369 < _7965; ++_2369)
                {
                  {
                    int _7966 = (int)0;
                    int _7967 = _2335;
                    for (int _2370 = _7966; _2370 < _7967; ++_2370)
                    {
                      {
                        int _2371 = (int)0;
                        int _2372 = ((*_2338)(_2370,_2329));
                        int _7968 = (int)0;
                        int _7969 = _2372;
                        for (int _2373 = _7968; _2373 < _7969; ++_2373)
                        {
                          {
                            int _7970 = (int)0;
                            int _7971 = _2366;
                            for (int _2374 = _7970; _2374 < _7971; ++_2374)
                            {
                              {
                                _ptr__2352[_2368] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2328)(_2335)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2369,_2366 ),_2372 ),_2371 )));
                                ++ _2368;
                                ++ _2371;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2375 = (int)1;
                int _7972 = (int)0;
                int _7973 = _2336;
                for (int _2376 = _7972; _2376 < _7973; ++_2376)
                {
                  {
                    _2375 *= _ptr__2353[_2376];
                  }
                }
                int _2377 = (int)0;
                int _7974 = (int)0;
                int _7975 = _2375;
                for (int _2378 = _7974; _2378 < _7975; ++_2378)
                {
                  {
                    int _7976 = (int)0;
                    int _7977 = _2335;
                    for (int _2379 = _7976; _2379 < _7977; ++_2379)
                    {
                      {
                        _ptr__2352[_2377] = ((*((*_2362)(_2379)))(_2378));
                        ++ _2377;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2330,_2353,_2352)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2380) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2380); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2380) { return __mosek_2fusion_2Constraint__index(_2380); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2380){
  _checked_ptr_1<int> _ptr__2380(_2380 ? _2380->raw() : nullptr, _2380 ? _2380->size(0) : 0);
  if (((int)((_2380)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7978 = (int)0;
      int _7979 = (int)((shape)->size(0));
      for (int _2381 = _7978; _2381 < _7979; ++_2381)
      {
        {
          if (((_ptr__2380[_2381] < (int)0) || (_ptr__2380[_2381] > ((*shape)(_2381)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2382 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2383 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2382)));
      _checked_ptr_1<long long> _ptr__2383(_2383 ? _2383->raw() : nullptr,_2383 ? _2383->size(0) : 0);
      _ptr__2383[(_2382 - (int)1)] = (int)1;
      int _7980 = (int)1;
      int _7981 = _2382;
      for (int _2384 = _7980; _2384 < _7981; ++_2384)
      {
        {
          _ptr__2383[((_2382 - _2384) - (int)1)] = safe_mul( _ptr__2383[(_2382 - _2384)],((*shape)(_2384)) );
        }
      }
      int _2385 = (int)0;
      int _7982 = (int)0;
      int _7983 = _2382;
      for (int _2386 = _7982; _2386 < _7983; ++_2386)
      {
        {
          _2385 += (int)safe_mul( _ptr__2383[_2386],_ptr__2380[_2386] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2385)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2387) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2387); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2387) { return __mosek_2fusion_2Constraint__index(_2387); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2387){
  if ((((int)((shape)->size(0)) == (int)0) && (_2387 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2387 < (int)0) || (_2387 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2387)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2388,std::shared_ptr< monty::ndarray< int,1 > > _2389) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2388,_2389); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2388,std::shared_ptr< monty::ndarray< int,1 > > _2389) { return __mosek_2fusion_2Constraint__slice(_2388,_2389); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2388,std::shared_ptr< monty::ndarray< int,1 > > _2389){
  _checked_ptr_1<int> _ptr__2388(_2388 ? _2388->raw() : nullptr, _2388 ? _2388->size(0) : 0);
  _checked_ptr_1<int> _ptr__2389(_2389 ? _2389->raw() : nullptr, _2389 ? _2389->size(0) : 0);
  if (((int)((_2388)->size(0)) != (int)((_2389)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2388)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7984 = (int)0;
      int _7985 = (int)((shape)->size(0));
      for (int _2390 = _7984; _2390 < _7985; ++_2390)
      {
        {
          if (((_ptr__2388[_2390] < (int)0) || (_ptr__2389[_2390] > ((*shape)(_2390)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2388[_2390] > _ptr__2389[_2390]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2391 = (int)((shape)->size(0));
      std::vector<int> _7986;
      for (int _2393 = (int)0, _7987 = _2391; _2393 < _7987 ; ++_2393)
      {
        _7986.push_back((_ptr__2389[_2393] - _ptr__2388[_2393]));
      }
      auto _7988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7986.size()),_7986.begin(),_7986.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2392 = _7988;
      _checked_ptr_1<int> _ptr__2392(_2392 ? _2392->raw() : nullptr,_2392 ? _2392->size(0) : 0);
      int _2394 = (int)1;
      int _7989 = (int)0;
      int _7990 = _2391;
      for (int _2395 = _7989; _2395 < _7990; ++_2395)
      {
        {
          _2394 *= (_ptr__2389[_2395] - _ptr__2388[_2395]);
        }
      }
      if ((_2394 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2392,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2396 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2394)));
          _checked_ptr_1<int> _ptr__2396(_2396 ? _2396->raw() : nullptr,_2396 ? _2396->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2397 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2391)));
            _checked_ptr_1<int> _ptr__2397(_2397 ? _2397->raw() : nullptr,_2397 ? _2397->size(0) : 0);
            _ptr__2397[(_2391 - (int)1)] = (int)1;
            int _7991 = (int)1;
            int _7992 = _2391;
            for (int _2398 = _7991; _2398 < _7992; ++_2398)
            {
              {
                _ptr__2397[((_2391 - _2398) - (int)1)] = safe_mul( _ptr__2397[(_2391 - _2398)],((*shape)((_2391 - _2398))) );
              }
            }
            int _2399 = (int)0;
            int _7993 = (int)0;
            int _7994 = _2391;
            for (int _2400 = _7993; _2400 < _7994; ++_2400)
            {
              {
                _2399 += safe_mul( _ptr__2388[_2400],_ptr__2397[_2400] );
              }
            }
            std::vector<int> _7995;
            for (int _2402 = (int)0, _7996 = _2391; _2402 < _7996 ; ++_2402)
            {
              _7995.push_back(_2399);
            }
            auto _7997 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7995.size()),_7995.begin(),_7995.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2401 = _7997;
            _checked_ptr_1<int> _ptr__2401(_2401 ? _2401->raw() : nullptr,_2401 ? _2401->size(0) : 0);
            std::vector<int> _7998;
            for (int _2404 = (int)0, _7999 = _2391; _2404 < _7999 ; ++_2404)
            {
              _7998.push_back(_ptr__2388[_2404]);
            }
            auto _8000 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7998.size()),_7998.begin(),_7998.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2403 = _8000;
            _checked_ptr_1<int> _ptr__2403(_2403 ? _2403->raw() : nullptr,_2403 ? _2403->size(0) : 0);
            int _8001 = (int)0;
            int _8002 = _2394;
            for (int _2405 = _8001; _2405 < _8002; ++_2405)
            {
              {
                _ptr__2396[_2405] = ((*nativeidxs)(_ptr__2401[(_2391 - (int)1)]));
                _ptr__2403[(_2391 - (int)1)] += (int)1;
                _ptr__2401[(_2391 - (int)1)] += _ptr__2397[(_2391 - (int)1)];
                if ((_ptr__2403[(_2391 - (int)1)] >= _ptr__2389[(_2391 - (int)1)]))
                {
                  {
                    int _2406 = (_2391 - (int)1);
                    while ( ((_2406 > (int)0) && (_ptr__2403[_2406] >= _ptr__2389[_2406])) )
                    {
                      {
                        _ptr__2403[_2406] = _ptr__2388[_2406];
                        _ptr__2403[(_2406 - (int)1)] += (int)1;
                        _ptr__2401[(_2406 - (int)1)] += _ptr__2397[(_2406 - (int)1)];
                        -- _2406;
                      }
                    }
                    int _8003 = safe_add( _2406,(int)1 );
                    int _8004 = _2391;
                    for (int _2407 = _8003; _2407 < _8004; ++_2407)
                    {
                      {
                        _ptr__2401[_2407] = _ptr__2401[_2406];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2392,_2396)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2408,int _2409) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2408,_2409); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2408,int _2409) { return __mosek_2fusion_2Constraint__slice(_2408,_2409); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2408,int _2409){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2408 == (int)0) && (_2409 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2408 < (int)0) || (_2409 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2408 > _2409))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _8005;
      for (int _2410 = _2408, _8006 = _2409; _2410 < _8006 ; ++_2410)
      {
        _8005.push_back(((*nativeidxs)(_2410)));
      }
      auto _8007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8005.size()),_8005.begin(),_8005.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2409 - _2408))}),_8007)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2411 = (int)1;
  int _8008 = (int)0;
  int _8009 = (int)((shape)->size(0));
  for (int _2412 = _8008; _2412 < _8009; ++_2412)
  {
    {
      _2411 *= ((*shape)(_2412));
    }
  }
  return _2411;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _8010;
  for (int _2413 = (int)0, _8011 = (int)((shape)->size(0)); _2413 < _8011 ; ++_2413)
  {
    _8010.push_back(((*shape)(_2413)));
  }
  auto _8012 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8010.size()),_8010.begin(),_8010.end()));
  return _8012;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2414) { return mosek::fusion::p_Set::size(_2414); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2414){
  _checked_ptr_1<int> _ptr__2414(_2414 ? _2414->raw() : nullptr, _2414 ? _2414->size(0) : 0);
  long long _2415 = (long long)1;
  int _8013 = (int)0;
  int _8014 = (int)((_2414)->size(0));
  for (int _2416 = _8013; _2416 < _8014; ++_2416)
  {
    {
      _2415 *= _ptr__2414[_2416];
    }
  }
  return _2415;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2417,    std::shared_ptr< monty::ndarray< int,1 > > _2418) { return mosek::fusion::p_Set::match(_2417,_2418); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2417,std::shared_ptr< monty::ndarray< int,1 > > _2418){
  _checked_ptr_1<int> _ptr__2417(_2417 ? _2417->raw() : nullptr, _2417 ? _2417->size(0) : 0);
  _checked_ptr_1<int> _ptr__2418(_2418 ? _2418->raw() : nullptr, _2418 ? _2418->size(0) : 0);
  if (((int)((_2417)->size(0)) != (int)((_2418)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _8015 = (int)0;
  int _8016 = (int)((_2417)->size(0));
  for (int _2419 = _8015; _2419 < _8016; ++_2419)
  {
    {
      if ((_ptr__2417[_2419] != _ptr__2418[_2419]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2420,    std::shared_ptr< monty::ndarray< int,1 > > _2421) { return mosek::fusion::p_Set::linearidx(_2420,_2421); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2420,std::shared_ptr< monty::ndarray< int,1 > > _2421){
  _checked_ptr_1<int> _ptr__2420(_2420 ? _2420->raw() : nullptr, _2420 ? _2420->size(0) : 0);
  _checked_ptr_1<int> _ptr__2421(_2421 ? _2421->raw() : nullptr, _2421 ? _2421->size(0) : 0);
  long long _2422 = _ptr__2421[(int)0];
  int _8017 = (int)1;
  int _8018 = (int)((_2421)->size(0));
  for (int _2423 = _8017; _2423 < _8018; ++_2423)
  {
    {
      _2422 = safe_add( safe_mul( _2422,_ptr__2420[_2423] ),_ptr__2421[_2423] );
    }
  }
  return _2422;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2424,    long long _2425) { return mosek::fusion::p_Set::idxtokey(_2424,_2425); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2424,long long _2425){
  _checked_ptr_1<int> _ptr__2424(_2424 ? _2424->raw() : nullptr, _2424 ? _2424->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2426 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2424)->size(0)))));
  _checked_ptr_1<int> _ptr__2426(_2426 ? _2426->raw() : nullptr,_2426 ? _2426->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2424,_2425,_2426);
  return _2426;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2427,    long long _2428,    std::shared_ptr< monty::ndarray< int,1 > > _2429) { mosek::fusion::p_Set::idxtokey(_2427,_2428,_2429); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2427,long long _2428,std::shared_ptr< monty::ndarray< int,1 > > _2429){
  _checked_ptr_1<int> _ptr__2427(_2427 ? _2427->raw() : nullptr, _2427 ? _2427->size(0) : 0);
  _checked_ptr_1<int> _ptr__2429(_2429 ? _2429->raw() : nullptr, _2429 ? _2429->size(0) : 0);
  int _2430 = (int)((_2427)->size(0));
  if ((_2430 > (int)0))
  {
    {
      long long _2431 = _2428;
      int _8019 = (int)0;
      int _8020 = (_2430 - (int)1);
      for (int _2432 = _8019; _2432 < _8020; ++_2432)
      {
        {
          _ptr__2429[((_2430 - _2432) - (int)1)] = (int)(_2431 % _ptr__2427[((_2430 - _2432) - (int)1)]);
          _2431 /= _ptr__2427[((_2430 - _2432) - (int)1)];
        }
      }
      _ptr__2429[(int)0] = (int)_2431;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2433,    long long _2434) { return mosek::fusion::p_Set::indexToString(_2433,_2434); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2433,long long _2434){
  _checked_ptr_1<int> _ptr__2433(_2433 ? _2433->raw() : nullptr, _2433 ? _2433->size(0) : 0);
  int _2435 = (int)((_2433)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2436 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2435 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2435 == (int)1))
  {
    {
      return _2436->__mosek_2fusion_2Utils_2StringBuffer__a(_2434)->toString();
    }
  }
  else
  {
    {
      long long _2437 = _2434;
      std::shared_ptr< monty::ndarray< int,1 > > _2438 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2435)));
      _checked_ptr_1<int> _ptr__2438(_2438 ? _2438->raw() : nullptr,_2438 ? _2438->size(0) : 0);
      int _8021 = (int)1;
      int _8022 = _2435;
      for (int _2439 = _8021; _2439 < _8022; ++_2439)
      {
        {
          _ptr__2438[(_2435 - _2439)] = (int)(_2437 % _ptr__2433[(_2435 - _2439)]);
          _2437 /= _ptr__2433[(_2435 - _2439)];
        }
      }
      _ptr__2438[(int)0] = (int)_2437;
      _2436->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2438[(int)0]);
      int _8023 = (int)1;
      int _8024 = _2435;
      for (int _2440 = _8023; _2440 < _8024; ++_2440)
      {
        {
          _2436->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2438[_2440]);
        }
      }
      return _2436->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2441) { return mosek::fusion::p_Set::keyToString(_2441); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2441){
  _checked_ptr_1<int> _ptr__2441(_2441 ? _2441->raw() : nullptr, _2441 ? _2441->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2442 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2442->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2441[(int)0]);
  int _8025 = (int)1;
  int _8026 = (int)((_2441)->size(0));
  for (int _2443 = _8025; _2443 < _8026; ++_2443)
  {
    {
      _2442->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2441[_2443]);
    }
  }
  return _2442->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2444,    long long _2445,    std::shared_ptr< monty::ndarray< int,1 > > _2446) { mosek::fusion::p_Set::indexToKey(_2444,_2445,_2446); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2444,long long _2445,std::shared_ptr< monty::ndarray< int,1 > > _2446){
  _checked_ptr_1<int> _ptr__2444(_2444 ? _2444->raw() : nullptr, _2444 ? _2444->size(0) : 0);
  _checked_ptr_1<int> _ptr__2446(_2446 ? _2446->raw() : nullptr, _2446 ? _2446->size(0) : 0);
  int _2447 = (int)((_2444)->size(0));
  if ((_2447 == (int)1))
  {
    {
      _ptr__2446[(int)0] = (int)_2445;
    }
  }
  else
  {
    {
      long long _2448 = _2445;
      int _8027 = (int)1;
      int _8028 = _2447;
      for (int _2449 = _8027; _2449 < _8028; ++_2449)
      {
        {
          _ptr__2446[(_2447 - _2449)] = (int)(_2448 % _ptr__2444[(_2447 - _2449)]);
          _2448 /= _ptr__2444[(_2447 - _2449)];
        }
      }
      _ptr__2446[(int)0] = (int)_2448;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2450) { return mosek::fusion::p_Set::strides(_2450); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2450){
  _checked_ptr_1<int> _ptr__2450(_2450 ? _2450->raw() : nullptr, _2450 ? _2450->size(0) : 0);
  int _2451 = (int)((_2450)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2452 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2451)));
  _checked_ptr_1<long long> _ptr__2452(_2452 ? _2452->raw() : nullptr,_2452 ? _2452->size(0) : 0);
  _ptr__2452[(_2451 - (int)1)] = (int)1;
  int _8029 = (int)1;
  int _8030 = _2451;
  for (int _2453 = _8029; _2453 < _8030; ++_2453)
  {
    {
      _ptr__2452[((_2451 - _2453) - (int)1)] = safe_mul( _ptr__2452[(_2451 - _2453)],_ptr__2450[(_2451 - _2453)] );
    }
  }
  return _2452;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2454,    std::shared_ptr< monty::ndarray< int,1 > > _2455) { return mosek::fusion::p_Set::make(_2454,_2455); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2454,std::shared_ptr< monty::ndarray< int,1 > > _2455){
  _checked_ptr_1<int> _ptr__2454(_2454 ? _2454->raw() : nullptr, _2454 ? _2454->size(0) : 0);
  _checked_ptr_1<int> _ptr__2455(_2455 ? _2455->raw() : nullptr, _2455 ? _2455->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2456 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2454)->size(0)),(int)((_2455)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2456(_2456 ? _2456->raw() : nullptr,_2456 ? _2456->size(0) : 0);
  int _8031 = (int)0;
  int _8032 = (int)((_2454)->size(0));
  for (int _2457 = _8031; _2457 < _8032; ++_2457)
  {
    {
      _ptr__2456[_2457] = _ptr__2454[_2457];
    }
  }
  int _8033 = (int)0;
  int _8034 = (int)((_2455)->size(0));
  for (int _2458 = _8033; _2458 < _8034; ++_2458)
  {
    {
      _ptr__2456[safe_add( (int)((_2454)->size(0)),_2458 )] = _ptr__2455[_2458];
    }
  }
  return _2456;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2459) { return mosek::fusion::p_Set::make(_2459); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2459){
  _checked_ptr_1<int> _ptr__2459(_2459 ? _2459->raw() : nullptr, _2459 ? _2459->size(0) : 0);
  std::vector<int> _8035;
  for (int _2460 = (int)0, _8036 = (int)((_2459)->size(0)); _2460 < _8036 ; ++_2460)
  {
    _8035.push_back(_ptr__2459[_2460]);
  }
  auto _8037 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8035.size()),_8035.begin(),_8035.end()));
  return _8037;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2461,    int _2462,    int _2463) { return mosek::fusion::p_Set::make(_2461,_2462,_2463); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2461,int _2462,int _2463){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2461),(int)(_2462),(int)(_2463)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2464,    int _2465) { return mosek::fusion::p_Set::make(_2464,_2465); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2464,int _2465){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2464),(int)(_2465)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2466) { return mosek::fusion::p_Set::make(_2466); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2466){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2466)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2467) { return mosek::fusion::p_Set::make(_2467); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2467){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2467)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2468,    double _2469,    std::shared_ptr< monty::ndarray< int,1 > > _2470){ return new mosek::fusion::ConeDomain(_2468,_2469,_2470); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2468,    double _2469,    std::shared_ptr< monty::ndarray< int,1 > > _2470) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2468,_2469,_2470); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2468,    double _2469,    std::shared_ptr< monty::ndarray< int,1 > > _2470){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2470(_2470 ? _2470->raw() : nullptr, _2470 ? _2470->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _8038;
    bool _8039 = (NULL != _2470.get());
    if (_8039)
    {
      _8038 = ::mosek::fusion::p_Set::make(_2470);
    }
    else
    {
      _8038 = nullptr;
    }
    shape = _8038;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2469;
    key = _2468;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2469;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2471,    std::shared_ptr< monty::ndarray< int,1 > > _2472){ return new mosek::fusion::ConeDomain(_2471,_2472); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2471,    std::shared_ptr< monty::ndarray< int,1 > > _2472) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2471,_2472); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2471,    std::shared_ptr< monty::ndarray< int,1 > > _2472){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2472(_2472 ? _2472->raw() : nullptr, _2472 ? _2472->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2471,1.0,_2472);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2473){
  _checked_ptr_1<int> _ptr__2473(_2473 ? _2473->raw() : nullptr, _2473 ? _2473->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2473,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2474) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2474); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2474) { return __mosek_2fusion_2ConeDomain__axis(_2474); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2474){
  axisidx = _2474;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2475,    int _2476){ return new mosek::fusion::LinPSDDomain(_2475,_2476); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2475,    int _2476) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2475,_2476); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2475,    int _2476){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2475(_2475 ? _2475->raw() : nullptr, _2475 ? _2475->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2476;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2475);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2477){ return new mosek::fusion::LinPSDDomain(_2477); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2477) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2477); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2477){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2477(_2477 ? _2477->raw() : nullptr, _2477 ? _2477->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2477);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    int _2480,    int _2481){ return new mosek::fusion::PSDDomain(_2478,_2479,_2480,_2481); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    int _2480,    int _2481) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2478,_2479,_2480,_2481); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2478,    std::shared_ptr< monty::ndarray< int,1 > > _2479,    int _2480,    int _2481){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2479(_2479 ? _2479->raw() : nullptr, _2479 ? _2479->size(0) : 0);
    axisIsSet = true;
    shape = _2479;
    key = _2478;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2480;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2481;
    int _2482 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2480) && (((int)((shape)->size(0)) > _2481) && ((_2480 >= (int)0) && ((_2481 >= (int)0) && (_2480 != _2481)))))) && (((*shape)(_2480)) == ((*shape)(_2481)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2483,    std::shared_ptr< monty::ndarray< int,1 > > _2484){ return new mosek::fusion::PSDDomain(_2483,_2484); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2483,    std::shared_ptr< monty::ndarray< int,1 > > _2484) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2483,_2484); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2483,    std::shared_ptr< monty::ndarray< int,1 > > _2484){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2484(_2484 ? _2484->raw() : nullptr, _2484 ? _2484->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2483,_2484,((int)((_2484)->size(0)) - (int)2),((int)((_2484)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2485){ return new mosek::fusion::PSDDomain(_2485); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2485) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2485); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2485){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2485;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2486,int _2487) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2486,_2487); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2486,int _2487) { return __mosek_2fusion_2PSDDomain__axis(_2486,_2487); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2486,int _2487){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2486;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2487;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2486 >= (int)0) && ((_2487 >= (int)0) && (_2486 != _2487))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2486) && (((int)((shape)->size(0)) > _2487) && ((_2486 >= (int)0) && ((_2487 >= (int)0) && (_2486 != _2487)))))) && (((*shape)(_2486)) == ((*shape)(_2487))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2488){ return new mosek::fusion::SymmetricRangeDomain(_2488); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2488) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2488); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2488){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2488);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _8040;
    bool _8041 = (NULL == shape.get());
    if (_8041)
    {
      _8040 = (int)0;
    }
    else
    {
      _8040 = ((*shape)((int)0));
    }
    dim = _8040;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< double,1 > > _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492){ return new mosek::fusion::RangeDomain(_2489,_2490,_2491,_2492); }mosek::fusion::RangeDomain::RangeDomain  (bool _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< double,1 > > _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2489,_2490,_2491,_2492); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2489,    std::shared_ptr< monty::ndarray< double,1 > > _2490,    std::shared_ptr< monty::ndarray< double,1 > > _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2490(_2490 ? _2490->raw() : nullptr, _2490 ? _2490->size(0) : 0);
    _checked_ptr_1<double> _ptr__2491(_2491 ? _2491->raw() : nullptr, _2491 ? _2491->size(0) : 0);
    _checked_ptr_1<int> _ptr__2492(_2492 ? _2492->raw() : nullptr, _2492 ? _2492->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2489,_2490,_2491,_2492,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497){ return new mosek::fusion::RangeDomain(_2493,_2494,_2495,_2496,_2497); }mosek::fusion::RangeDomain::RangeDomain  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2493,_2494,_2495,_2496,_2497); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    std::shared_ptr< monty::ndarray< int,1 > > _2496,    std::shared_ptr< monty::ndarray< int,2 > > _2497){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2494(_2494 ? _2494->raw() : nullptr, _2494 ? _2494->size(0) : 0);
    _checked_ptr_1<double> _ptr__2495(_2495 ? _2495->raw() : nullptr, _2495 ? _2495->size(0) : 0);
    _checked_ptr_1<int> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2493,_2494,_2495,_2496,_2497,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2498,    std::shared_ptr< monty::ndarray< double,1 > > _2499,    std::shared_ptr< monty::ndarray< double,1 > > _2500,    std::shared_ptr< monty::ndarray< int,1 > > _2501,    std::shared_ptr< monty::ndarray< int,2 > > _2502,    int _2503){ return new mosek::fusion::RangeDomain(_2498,_2499,_2500,_2501,_2502,_2503); }mosek::fusion::RangeDomain::RangeDomain  (bool _2498,    std::shared_ptr< monty::ndarray< double,1 > > _2499,    std::shared_ptr< monty::ndarray< double,1 > > _2500,    std::shared_ptr< monty::ndarray< int,1 > > _2501,    std::shared_ptr< monty::ndarray< int,2 > > _2502,    int _2503) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2498,_2499,_2500,_2501,_2502,_2503); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2498,    std::shared_ptr< monty::ndarray< double,1 > > _2499,    std::shared_ptr< monty::ndarray< double,1 > > _2500,    std::shared_ptr< monty::ndarray< int,1 > > _2501,    std::shared_ptr< monty::ndarray< int,2 > > _2502,    int _2503){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2499(_2499 ? _2499->raw() : nullptr, _2499 ? _2499->size(0) : 0);
    _checked_ptr_1<double> _ptr__2500(_2500 ? _2500->raw() : nullptr, _2500 ? _2500->size(0) : 0);
    _checked_ptr_1<int> _ptr__2501(_2501 ? _2501->raw() : nullptr, _2501 ? _2501->size(0) : 0);
    cardinal_flag = false;
    shape = _2501;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2498;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2500;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2499;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2502;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2504){ return new mosek::fusion::RangeDomain(_2504); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2504) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2504); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2504){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2504)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2504)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2504)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2504)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2504)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2504)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2504)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2505) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2505); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2505) { return __mosek_2fusion_2RangeDomain__sparse(_2505); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2505){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2505)->size(0)),(int)((_2505)->size(1)))));
  {
    int _2506 = (int)0;
    for(;(_2506 < (int)((_2505)->size(0)));++ _2506)
    {
      {
        {
          int _2507 = (int)0;
          for(;(_2507 < (int)((_2505)->size(1)));++ _2507)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2506,_2507)) = ((*_2505)(_2506,_2507));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2508) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2508); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2508) { return __mosek_2fusion_2RangeDomain__sparse(_2508); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2508){
  _checked_ptr_1<int> _ptr__2508(_2508 ? _2508->raw() : nullptr, _2508 ? _2508->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2508)->size(0)),(int)1)));
  int _8042 = (int)0;
  int _8043 = (int)((_2508)->size(0));
  for (int _2509 = _8042; _2509 < _8043; ++_2509)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2509,(int)0)) = _ptr__2508[_2509];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2510,int _2511,int _2512) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2510,_2511,_2512); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2510,int _2511,int _2512) { return __mosek_2fusion_2RangeDomain__withShape(_2510,_2511,_2512); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2510,int _2511,int _2512){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2510),(int)(_2511),(int)(_2512)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2513,int _2514) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2513,_2514); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2513,int _2514) { return __mosek_2fusion_2RangeDomain__withShape(_2513,_2514); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2513,int _2514){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2513),(int)(_2514)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2515) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2515); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2515) { return __mosek_2fusion_2RangeDomain__withShape(_2515); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2515){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2515)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2516) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2516); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2516) { return __mosek_2fusion_2RangeDomain__withShape(_2516); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2516){
  _checked_ptr_1<int> _ptr__2516(_2516 ? _2516->raw() : nullptr, _2516 ? _2516->size(0) : 0);
  shape = _2516;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2517){
  _checked_ptr_1<int> _ptr__2517(_2517 ? _2517->raw() : nullptr, _2517 ? _2517->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2517)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _8044 = (int)0;
      int _8045 = (int)((shape)->size(0));
      for (int _2518 = _8044; _2518 < _8045; ++_2518)
      {
        {
          if ((((*shape)(_2518)) != _ptr__2517[_2518]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2519){ return new mosek::fusion::SymmetricLinearDomain(_2519); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2519) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2519); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2519){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2519;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2519)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2519)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2519)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2519)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _8046;
    bool _8047 = (NULL == shape.get());
    if (_8047)
    {
      _8046 = (int)0;
    }
    else
    {
      _8046 = ((*shape)((int)0));
    }
    dim = _8046;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2520) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2520); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2520) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2520); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2520){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2520)->size(0)),(int)((_2520)->size(1)))));
  {
    int _2521 = (int)0;
    for(;(_2521 < (int)((_2520)->size(0)));++ _2521)
    {
      {
        {
          int _2522 = (int)0;
          for(;(_2522 < (int)((_2520)->size(1)));++ _2522)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2521,_2522)) = ((*_2520)(_2521,_2522));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2523) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2523); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2523) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2523); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2523){
  _checked_ptr_1<int> _ptr__2523(_2523 ? _2523->raw() : nullptr, _2523 ? _2523->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2523)->size(0)),(int)1)));
  int _8048 = (int)0;
  int _8049 = (int)((_2523)->size(0));
  for (int _2524 = _8048; _2524 < _8049; ++_2524)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2524,(int)0)) = _ptr__2523[_2524];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2525){
  _checked_ptr_1<int> _ptr__2525(_2525 ? _2525->raw() : nullptr, _2525 ? _2525->size(0) : 0);
  int _8050 = (int)0;
  int _8051 = (int)((_2525)->size(0));
  for (int _2526 = _8050; _2526 < _8051; ++_2526)
  {
    {
      if ((_ptr__2525[_2526] == ((*shape)(_2526))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2527,    bool _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530){ return new mosek::fusion::LinearDomain(_2527,_2528,_2529,_2530); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2527,    bool _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2527,_2528,_2529,_2530); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2527,    bool _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2529(_2529 ? _2529->raw() : nullptr, _2529 ? _2529->size(0) : 0);
    _checked_ptr_1<int> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2527,_2528,_2529,_2530,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2531,    bool _2532,    std::shared_ptr< monty::ndarray< double,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534,    std::shared_ptr< monty::ndarray< int,2 > > _2535,    int _2536){ return new mosek::fusion::LinearDomain(_2531,_2532,_2533,_2534,_2535,_2536); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2531,    bool _2532,    std::shared_ptr< monty::ndarray< double,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534,    std::shared_ptr< monty::ndarray< int,2 > > _2535,    int _2536) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2531,_2532,_2533,_2534,_2535,_2536); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2531,    bool _2532,    std::shared_ptr< monty::ndarray< double,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534,    std::shared_ptr< monty::ndarray< int,2 > > _2535,    int _2536){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
    _checked_ptr_1<int> _ptr__2534(_2534 ? _2534->raw() : nullptr, _2534 ? _2534->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2532;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2534;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2531;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2533;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2535;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2537){ return new mosek::fusion::LinearDomain(_2537); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2537) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2537); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2537){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2537)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2537)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2537)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2537)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2537)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2537)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2537)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2538) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2538); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2538) { return __mosek_2fusion_2LinearDomain__sparse(_2538); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2538){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2538)->size(0)),(int)((_2538)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2539 = (int)0;
    for(;(_2539 < (int)((_2538)->size(0)));++ _2539)
    {
      {
        {
          int _2540 = (int)0;
          for(;(_2540 < (int)((_2538)->size(1)));++ _2540)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2539,_2540)) = ((*_2538)(_2539,_2540));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2541) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2541); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2541) { return __mosek_2fusion_2LinearDomain__sparse(_2541); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2541){
  _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr, _2541 ? _2541->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2541)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _8052 = (int)0;
  int _8053 = (int)((_2541)->size(0));
  for (int _2542 = _8052; _2542 < _8053; ++_2542)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2542,(int)0)) = _ptr__2541[_2542];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2543,int _2544,int _2545) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2543,_2544,_2545); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2543,int _2544,int _2545) { return __mosek_2fusion_2LinearDomain__withShape(_2543,_2544,_2545); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2543,int _2544,int _2545){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2543),(int)(_2544),(int)(_2545)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2546,int _2547) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2546,_2547); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2546,int _2547) { return __mosek_2fusion_2LinearDomain__withShape(_2546,_2547); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2546,int _2547){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2546),(int)(_2547)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2548) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2548); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2548) { return __mosek_2fusion_2LinearDomain__withShape(_2548); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2548){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2548)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2549) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2549); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2549) { return __mosek_2fusion_2LinearDomain__withShape(_2549); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2549){
  _checked_ptr_1<int> _ptr__2549(_2549 ? _2549->raw() : nullptr, _2549 ? _2549->size(0) : 0);
  shape = _2549;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2550){
  _checked_ptr_1<int> _ptr__2550(_2550 ? _2550->raw() : nullptr, _2550 ? _2550->size(0) : 0);
  if ((!scalable))
  {
    {
      int _8054 = (int)0;
      int _8055 = (int)((_2550)->size(0));
      for (int _2551 = _8054; _2551 < _8055; ++_2551)
      {
        {
          if ((_ptr__2550[_2551] == ((*shape)(_2551))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2552){
  _checked_ptr_1<int> _ptr__2552(_2552 ? _2552->raw() : nullptr, _2552 ? _2552->size(0) : 0);
  long long _2553 = (long long)1;
  int _8056 = (int)0;
  int _8057 = (int)((_2552)->size(0));
  for (int _2554 = _8056; _2554 < _8057; ++_2554)
  {
    {
      _2553 *= _ptr__2552[_2554];
    }
  }
  return _2553;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _2555,monty::rc_ptr< ::mosek::fusion::Matrix > _2556){
  if (((mosek::fusion::p_Matrix::_get_impl(_2555)->dimi != mosek::fusion::p_Matrix::_get_impl(_2556)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_2555)->dimj != mosek::fusion::p_Matrix::_get_impl(_2556)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_2555->isSparse() && _2556->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2557 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2555->numNonzeros())));
      _checked_ptr_1<int> _ptr__2557(_2557 ? _2557->raw() : nullptr,_2557 ? _2557->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2555->numNonzeros())));
      _checked_ptr_1<int> _ptr__2558(_2558 ? _2558->raw() : nullptr,_2558 ? _2558->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2559 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2555->numNonzeros())));
      _checked_ptr_1<double> _ptr__2559(_2559 ? _2559->raw() : nullptr,_2559 ? _2559->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2560 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2556->numNonzeros())));
      _checked_ptr_1<int> _ptr__2560(_2560 ? _2560->raw() : nullptr,_2560 ? _2560->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2561 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2556->numNonzeros())));
      _checked_ptr_1<int> _ptr__2561(_2561 ? _2561->raw() : nullptr,_2561 ? _2561->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2556->numNonzeros())));
      _checked_ptr_1<double> _ptr__2562(_2562 ? _2562->raw() : nullptr,_2562 ? _2562->size(0) : 0);
      _2555->getDataAsTriplets(_2557,_2558,_2559);
      _2556->getDataAsTriplets(_2560,_2561,_2562);
      long long _2563 = (int)0;
      {
        int _2564 = (int)0;
        int _2565 = (int)0;
        while ( ((_2565 < (int)((_2557)->size(0))) && (_2564 < (int)((_2560)->size(0)))) )
        {
          {
            if (((_ptr__2557[_2565] < _ptr__2560[_2564]) || ((_ptr__2557[_2565] == _ptr__2560[_2564]) && (_ptr__2558[_2565] < _ptr__2561[_2564]))))
            {
              {
                ++ _2563;
                ++ _2565;
              }
            }
            else
            {
              {
                if (((_ptr__2557[_2565] > _ptr__2560[_2564]) || ((_ptr__2557[_2565] == _ptr__2560[_2564]) && (_ptr__2558[_2565] > _ptr__2561[_2564]))))
                {
                  {
                    ++ _2563;
                    ++ _2564;
                  }
                }
                else
                {
                  {
                    ++ _2563;
                    ++ _2565;
                    ++ _2564;
                  }
                }
              }
            }
          }
        }
        _2563 += ((int)((_2557)->size(0)) - _2565);
        _2563 += ((int)((_2560)->size(0)) - _2564);
      }
      std::shared_ptr< monty::ndarray< int,2 > > _2566 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2563,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _2567 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2563)));
      _checked_ptr_1<double> _ptr__2567(_2567 ? _2567->raw() : nullptr,_2567 ? _2567->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2568 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2563)));
      _checked_ptr_1<double> _ptr__2568(_2568 ? _2568->raw() : nullptr,_2568 ? _2568->size(0) : 0);
      {
        int _2569 = (int)0;
        int _2570 = (int)0;
        int _2571 = (int)0;
        while ( ((_2571 < (int)((_2557)->size(0))) && (_2570 < (int)((_2560)->size(0)))) )
        {
          {
            if (((_ptr__2557[_2571] < _ptr__2560[_2570]) || ((_ptr__2557[_2571] == _ptr__2560[_2570]) && (_ptr__2558[_2571] < _ptr__2561[_2570]))))
            {
              {
                ((*_2566)(_2569,(int)0)) = _ptr__2557[_2571];
                ((*_2566)(_2569,(int)1)) = _ptr__2558[_2571];
                _ptr__2567[_2569] = _ptr__2559[_2571];
                _ptr__2568[_2569] = 0.0;
                ++ _2569;
                ++ _2571;
              }
            }
            else
            {
              {
                if (((_ptr__2557[_2571] > _ptr__2560[_2570]) || ((_ptr__2557[_2571] == _ptr__2560[_2570]) && (_ptr__2558[_2571] > _ptr__2561[_2570]))))
                {
                  {
                    ((*_2566)(_2569,(int)0)) = _ptr__2560[_2570];
                    ((*_2566)(_2569,(int)1)) = _ptr__2561[_2570];
                    _ptr__2567[_2569] = 0.0;
                    _ptr__2568[_2569] = _ptr__2562[_2570];
                    ++ _2569;
                    ++ _2570;
                  }
                }
                else
                {
                  {
                    ((*_2566)(_2569,(int)0)) = _ptr__2560[_2570];
                    ((*_2566)(_2569,(int)1)) = _ptr__2561[_2570];
                    _ptr__2567[_2569] = _ptr__2559[_2570];
                    _ptr__2568[_2569] = _ptr__2562[_2570];
                    ++ _2569;
                    ++ _2571;
                    ++ _2570;
                  }
                }
              }
            }
          }
        }
        while ( (_2571 < (int)((_2557)->size(0))) )
        {
          {
            ((*_2566)(_2569,(int)0)) = _ptr__2557[_2571];
            ((*_2566)(_2569,(int)1)) = _ptr__2558[_2571];
            _ptr__2567[_2569] = _ptr__2559[_2571];
            _ptr__2568[_2569] = 0.0;
            ++ _2569;
            ++ _2571;
          }
        }
        while ( (_2570 < (int)((_2560)->size(0))) )
        {
          {
            ((*_2566)(_2569,(int)0)) = _ptr__2560[_2570];
            ((*_2566)(_2569,(int)1)) = _ptr__2561[_2570];
            _ptr__2567[_2569] = 0.0;
            _ptr__2568[_2569] = _ptr__2562[_2570];
            ++ _2569;
            ++ _2570;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2567,_2568,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2555)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2555)->dimj)}),_2566,(int)1);
    }
  }
  else
  {
    {
      int _2572 = mosek::fusion::p_Matrix::_get_impl(_2555)->dimj;
      int _2573 = mosek::fusion::p_Matrix::_get_impl(_2555)->dimi;
      int _2574 = safe_mul( _2573,_2572 );
      std::shared_ptr< monty::ndarray< double,1 > > _2575;
      _checked_ptr_1<double> _ptr__2575(_2575 ? _2575->raw() : nullptr,_2575 ? _2575->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2576;
      _checked_ptr_1<double> _ptr__2576(_2576 ? _2576->raw() : nullptr,_2576 ? _2576->size(0) : 0);
      if (_2555->isSparse())
      {
        {
          _2575 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2574)));
          _ptr__2575.update(_2575 ? _2575->raw() : nullptr, _2575 ? _2575->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2577 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2555->numNonzeros())));
          _checked_ptr_1<int> _ptr__2577(_2577 ? _2577->raw() : nullptr,_2577 ? _2577->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2578 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2555->numNonzeros())));
          _checked_ptr_1<int> _ptr__2578(_2578 ? _2578->raw() : nullptr,_2578 ? _2578->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2579 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2555->numNonzeros())));
          _checked_ptr_1<double> _ptr__2579(_2579 ? _2579->raw() : nullptr,_2579 ? _2579->size(0) : 0);
          _2555->getDataAsTriplets(_2577,_2578,_2579);
          int _8058 = (int)0;
          int _8059 = (int)((_2577)->size(0));
          for (int _2580 = _8058; _2580 < _8059; ++_2580)
          {
            {
              _ptr__2575[safe_add( safe_mul( _ptr__2577[_2580],_2572 ),_ptr__2578[_2580] )] = _ptr__2579[_2580];
            }
          }
        }
      }
      else
      {
        {
          _2575 = _2555->getDataAsArray();
          _ptr__2575.update(_2575 ? _2575->raw() : nullptr, _2575 ? _2575->size(0) : 0);
        }
      }
      if (_2556->isSparse())
      {
        {
          _2576 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2574)));
          _ptr__2576.update(_2576 ? _2576->raw() : nullptr, _2576 ? _2576->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2556->numNonzeros())));
          _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr,_2581 ? _2581->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2556->numNonzeros())));
          _checked_ptr_1<int> _ptr__2582(_2582 ? _2582->raw() : nullptr,_2582 ? _2582->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2583 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2556->numNonzeros())));
          _checked_ptr_1<double> _ptr__2583(_2583 ? _2583->raw() : nullptr,_2583 ? _2583->size(0) : 0);
          _2556->getDataAsTriplets(_2581,_2582,_2583);
          int _8060 = (int)0;
          int _8061 = (int)((_2581)->size(0));
          for (int _2584 = _8060; _2584 < _8061; ++_2584)
          {
            {
              _ptr__2576[safe_add( safe_mul( _ptr__2581[_2584],_2572 ),_ptr__2582[_2584] )] = _ptr__2583[_2584];
            }
          }
        }
      }
      else
      {
        {
          _2576 = _2556->getDataAsArray();
          _ptr__2576.update(_2576 ? _2576->raw() : nullptr, _2576 ? _2576->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2575,_2576,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2555)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2555)->dimj)}),nullptr,(int)1);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _2585,std::shared_ptr< monty::ndarray< double,2 > > _2586){
  if ((((int)((_2585)->size(0)) != (int)((_2586)->size(0))) || ((int)((_2585)->size(1)) != (int)((_2586)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int _2587 = (int)((_2585)->size(1));
  int _2588 = (int)((_2585)->size(0));
  int _2589 = safe_mul( _2588,_2587 );
  std::shared_ptr< monty::ndarray< double,1 > > _2590 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2589)));
  _checked_ptr_1<double> _ptr__2590(_2590 ? _2590->raw() : nullptr,_2590 ? _2590->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2591 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2589)));
  _checked_ptr_1<double> _ptr__2591(_2591 ? _2591->raw() : nullptr,_2591 ? _2591->size(0) : 0);
  int _2592 = (int)0;
  int _8062 = (int)0;
  int _8063 = _2588;
  for (int _2593 = _8062; _2593 < _8063; ++_2593)
  {
    {
      int _8064 = (int)0;
      int _8065 = _2587;
      for (int _2594 = _8064; _2594 < _8065; ++_2594)
      {
        {
          _ptr__2590[_2592] = ((*_2585)(_2593,_2594));
          _ptr__2591[_2592] = ((*_2586)(_2593,_2594));
          ++ _2592;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2590,_2591,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2588),(int)(_2587)}),nullptr,(int)1);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _2595,monty::rc_ptr< ::mosek::fusion::Matrix > _2596){
  if (_2596->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2597 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2596->numNonzeros())));
      _checked_ptr_1<int> _ptr__2597(_2597 ? _2597->raw() : nullptr,_2597 ? _2597->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2598 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2596->numNonzeros())));
      _checked_ptr_1<int> _ptr__2598(_2598 ? _2598->raw() : nullptr,_2598 ? _2598->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2599 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2596->numNonzeros())));
      _checked_ptr_1<double> _ptr__2599(_2599 ? _2599->raw() : nullptr,_2599 ? _2599->size(0) : 0);
      _2596->getDataAsTriplets(_2597,_2598,_2599);
      std::shared_ptr< monty::ndarray< int,2 > > _2600 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2597)->size(0)),(int)2)));
      int _8066 = (int)0;
      int _8067 = (int)((_2597)->size(0));
      for (int _2601 = _8066; _2601 < _8067; ++_2601)
      {
        {
          ((*_2600)(_2601,(int)0)) = _ptr__2597[_2601];
          ((*_2600)(_2601,(int)1)) = _ptr__2598[_2601];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2595,false,_2599,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2596)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2596)->dimj)}),_2600,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2595,false,_2596->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2596)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2596)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _2602){
  _checked_ptr_1<int> _ptr__2602(_2602 ? _2602->raw() : nullptr, _2602 ? _2602->size(0) : 0);
  long long _2603 = (int)1;
  int _8068 = (int)0;
  int _8069 = (int)((_2602)->size(0));
  for (int _2604 = _8068; _2604 < _8069; ++_2604)
  {
    {
      _2603 *= _ptr__2602[_2604];
    }
  }
  return _2603;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _2605,std::shared_ptr< monty::ndarray< double,1 > > _2606,std::shared_ptr< monty::ndarray< double,1 > > _2607,std::shared_ptr< monty::ndarray< int,2 > > _2608,std::shared_ptr< monty::ndarray< int,1 > > _2609){
  _checked_ptr_1<double> _ptr__2606(_2606 ? _2606->raw() : nullptr, _2606 ? _2606->size(0) : 0);
  _checked_ptr_1<double> _ptr__2607(_2607 ? _2607->raw() : nullptr, _2607 ? _2607->size(0) : 0);
  _checked_ptr_1<int> _ptr__2609(_2609 ? _2609->raw() : nullptr, _2609 ? _2609->size(0) : 0);
  if (((!_2605) && ((int)((_2606)->size(0)) != (int)((_2607)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _2608.get()) && ((int)((_2608)->size(0)) != (int)((_2606)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _8070 = (int)0;
  int _8071 = (int)((_2607)->size(0));
  for (int _2610 = _8070; _2610 < _8071; ++_2610)
  {
    {
      if ((_ptr__2606[_2610] > _ptr__2607[_2610]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _2609.get()) && (::mosek::fusion::p_Domain::dimsize(_2609) != (int)((_2606)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_2605,_2606,_2607,_2609)->__mosek_2fusion_2RangeDomain__sparse(_2608);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2611) { return mosek::fusion::p_Domain::symmetric(_2611); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2611){
  return _2611->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2612) { return mosek::fusion::p_Domain::symmetric(_2612); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2612){
  return _2612->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2613,    std::shared_ptr< monty::ndarray< int,2 > > _2614) { return mosek::fusion::p_Domain::sparse(_2613,_2614); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2613,std::shared_ptr< monty::ndarray< int,2 > > _2614){
  return _2613->__mosek_2fusion_2RangeDomain__sparse(_2614);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2615,    std::shared_ptr< monty::ndarray< int,1 > > _2616) { return mosek::fusion::p_Domain::sparse(_2615,_2616); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2615,std::shared_ptr< monty::ndarray< int,1 > > _2616){
  _checked_ptr_1<int> _ptr__2616(_2616 ? _2616->raw() : nullptr, _2616 ? _2616->size(0) : 0);
  return _2615->__mosek_2fusion_2RangeDomain__sparse(_2616);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2617,    std::shared_ptr< monty::ndarray< int,2 > > _2618) { return mosek::fusion::p_Domain::sparse(_2617,_2618); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2617,std::shared_ptr< monty::ndarray< int,2 > > _2618){
  return _2617->__mosek_2fusion_2LinearDomain__sparse(_2618);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620) { return mosek::fusion::p_Domain::sparse(_2619,_2620); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2619,std::shared_ptr< monty::ndarray< int,1 > > _2620){
  _checked_ptr_1<int> _ptr__2620(_2620 ? _2620->raw() : nullptr, _2620 ? _2620->size(0) : 0);
  return _2619->__mosek_2fusion_2LinearDomain__sparse(_2620);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2621) { return mosek::fusion::p_Domain::integral(_2621); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2621){
  return _2621->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2622) { return mosek::fusion::p_Domain::integral(_2622); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2622){
  return _2622->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2623) { return mosek::fusion::p_Domain::integral(_2623); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2623){
  return _2623->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2624,    int _2625) { return mosek::fusion::p_Domain::axis(_2624,_2625); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2624,int _2625){
  return _2624->__mosek_2fusion_2ConeDomain__axis(_2625);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627) { return mosek::fusion::p_Domain::inDPowerCone(_2626,_2627); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2626,std::shared_ptr< monty::ndarray< int,1 > > _2627){
  _checked_ptr_1<int> _ptr__2627(_2627 ? _2627->raw() : nullptr, _2627 ? _2627->size(0) : 0);
  std::vector<int> _8072;
  for (int _2628 = (int)0, _8073 = (int)((_2627)->size(0)); _2628 < _8073 ; ++_2628)
  {
    _8072.push_back(_ptr__2627[_2628]);
  }
  auto _8074 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8072.size()),_8072.begin(),_8072.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2626,_8074);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2629,    int _2630) { return mosek::fusion::p_Domain::inDPowerCone(_2629,_2630); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2629,int _2630){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2629,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2630),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2631) { return mosek::fusion::p_Domain::inDPowerCone(_2631); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2631){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2631,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2632,    std::shared_ptr< monty::ndarray< int,1 > > _2633) { return mosek::fusion::p_Domain::inPPowerCone(_2632,_2633); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2632,std::shared_ptr< monty::ndarray< int,1 > > _2633){
  _checked_ptr_1<int> _ptr__2633(_2633 ? _2633->raw() : nullptr, _2633 ? _2633->size(0) : 0);
  std::vector<int> _8075;
  for (int _2634 = (int)0, _8076 = (int)((_2633)->size(0)); _2634 < _8076 ; ++_2634)
  {
    _8075.push_back(_ptr__2633[_2634]);
  }
  auto _8077 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8075.size()),_8075.begin(),_8075.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2632,_8077);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2635,    int _2636) { return mosek::fusion::p_Domain::inPPowerCone(_2635,_2636); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2635,int _2636){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2635,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2636),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2637) { return mosek::fusion::p_Domain::inPPowerCone(_2637); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2637){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2637,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2638) { return mosek::fusion::p_Domain::inDExpCone(_2638); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2638){
  _checked_ptr_1<int> _ptr__2638(_2638 ? _2638->raw() : nullptr, _2638 ? _2638->size(0) : 0);
  std::vector<int> _8078;
  for (int _2639 = (int)0, _8079 = (int)((_2638)->size(0)); _2639 < _8079 ; ++_2639)
  {
    _8078.push_back(_ptr__2638[_2639]);
  }
  auto _8080 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8078.size()),_8078.begin(),_8078.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_8080);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _2640) { return mosek::fusion::p_Domain::inDExpCone(_2640); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _2640){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2640),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2641) { return mosek::fusion::p_Domain::inPExpCone(_2641); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2641){
  _checked_ptr_1<int> _ptr__2641(_2641 ? _2641->raw() : nullptr, _2641 ? _2641->size(0) : 0);
  std::vector<int> _8081;
  for (int _2642 = (int)0, _8082 = (int)((_2641)->size(0)); _2642 < _8082 ; ++_2642)
  {
    _8081.push_back(_ptr__2641[_2642]);
  }
  auto _8083 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8081.size()),_8081.begin(),_8081.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_8083);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _2643) { return mosek::fusion::p_Domain::inPExpCone(_2643); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _2643){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2643),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2644) { return mosek::fusion::p_Domain::inRotatedQCone(_2644); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _2644){
  _checked_ptr_1<int> _ptr__2644(_2644 ? _2644->raw() : nullptr, _2644 ? _2644->size(0) : 0);
  std::vector<int> _8084;
  for (int _2645 = (int)0, _8085 = (int)((_2644)->size(0)); _2645 < _8085 ; ++_2645)
  {
    _8084.push_back(_ptr__2644[_2645]);
  }
  auto _8086 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8084.size()),_8084.begin(),_8084.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_8086);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2646,    int _2647) { return mosek::fusion::p_Domain::inRotatedQCone(_2646,_2647); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2646,int _2647){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2646),(int)(_2647)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2648) { return mosek::fusion::p_Domain::inRotatedQCone(_2648); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2648){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2648)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2649) { return mosek::fusion::p_Domain::inQCone(_2649); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _2649){
  _checked_ptr_1<int> _ptr__2649(_2649 ? _2649->raw() : nullptr, _2649 ? _2649->size(0) : 0);
  std::vector<int> _8087;
  for (int _2650 = (int)0, _8088 = (int)((_2649)->size(0)); _2650 < _8088 ; ++_2650)
  {
    _8087.push_back(_ptr__2649[_2650]);
  }
  auto _8089 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8087.size()),_8087.begin(),_8087.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_8089);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2651,    int _2652) { return mosek::fusion::p_Domain::inQCone(_2651,_2652); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2651,int _2652){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2651),(int)(_2652)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2653) { return mosek::fusion::p_Domain::inQCone(_2653); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2653){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2653)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2654,    int _2655) { return mosek::fusion::p_Domain::isLinPSD(_2654,_2655); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2654,int _2655){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2654,safe_add( _2654,(int)1 ) ) / (int)2),_2655));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2656) { return mosek::fusion::p_Domain::isLinPSD(_2656); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2656){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2656,safe_add( _2656,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2657,    int _2658) { return mosek::fusion::p_Domain::isTrilPSD(_2657,_2658); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2657,int _2658){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2658),(int)(_2657),(int)(_2657)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2659) { return mosek::fusion::p_Domain::isTrilPSD(_2659); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2659){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2659),(int)(_2659)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2660,    int _2661) { return mosek::fusion::p_Domain::inPSDCone(_2660,_2661); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2660,int _2661){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2661),(int)(_2660),(int)(_2660)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2662) { return mosek::fusion::p_Domain::inPSDCone(_2662); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2662){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2662),(int)(_2662)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _2663) { return mosek::fusion::p_Domain::binary(_2663); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _2663){
  _checked_ptr_1<int> _ptr__2663(_2663 ? _2663->raw() : nullptr, _2663 ? _2663->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_2663)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2664,    int _2665) { return mosek::fusion::p_Domain::binary(_2664,_2665); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2664,int _2665){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2664),(int)(_2665)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2666) { return mosek::fusion::p_Domain::binary(_2666); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2666){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2666)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2667,    monty::rc_ptr< ::mosek::fusion::Matrix > _2668) { return mosek::fusion::p_Domain::inRange(_2667,_2668); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _2667,monty::rc_ptr< ::mosek::fusion::Matrix > _2668){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_2668,_2667);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,2 > > _2669,    std::shared_ptr< monty::ndarray< double,2 > > _2670) { return mosek::fusion::p_Domain::inRange(_2669,_2670); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _2669,std::shared_ptr< monty::ndarray< double,2 > > _2670){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_2670,_2669);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2671,    std::shared_ptr< monty::ndarray< double,1 > > _2672,    std::shared_ptr< monty::ndarray< int,1 > > _2673) { return mosek::fusion::p_Domain::inRange(_2671,_2672,_2673); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2671,std::shared_ptr< monty::ndarray< double,1 > > _2672,std::shared_ptr< monty::ndarray< int,1 > > _2673){
  _checked_ptr_1<double> _ptr__2671(_2671 ? _2671->raw() : nullptr, _2671 ? _2671->size(0) : 0);
  _checked_ptr_1<double> _ptr__2672(_2672 ? _2672->raw() : nullptr, _2672 ? _2672->size(0) : 0);
  _checked_ptr_1<int> _ptr__2673(_2673 ? _2673->raw() : nullptr, _2673 ? _2673->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2671,_2672,_2673);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2674,    double _2675,    std::shared_ptr< monty::ndarray< int,1 > > _2676) { return mosek::fusion::p_Domain::inRange(_2674,_2675,_2676); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2674,double _2675,std::shared_ptr< monty::ndarray< int,1 > > _2676){
  _checked_ptr_1<double> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
  _checked_ptr_1<int> _ptr__2676(_2676 ? _2676->raw() : nullptr, _2676 ? _2676->size(0) : 0);
  std::vector<double> _8090;
  for (int _2677 = (int)0, _8091 = (int)((_2674)->size(0)); _2677 < _8091 ; ++_2677)
  {
    _8090.push_back(_2675);
  }
  auto _8092 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8090.size()),_8090.begin(),_8090.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2674,_8092,_2676);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2678,    std::shared_ptr< monty::ndarray< double,1 > > _2679,    std::shared_ptr< monty::ndarray< int,1 > > _2680) { return mosek::fusion::p_Domain::inRange(_2678,_2679,_2680); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2678,std::shared_ptr< monty::ndarray< double,1 > > _2679,std::shared_ptr< monty::ndarray< int,1 > > _2680){
  _checked_ptr_1<double> _ptr__2679(_2679 ? _2679->raw() : nullptr, _2679 ? _2679->size(0) : 0);
  _checked_ptr_1<int> _ptr__2680(_2680 ? _2680->raw() : nullptr, _2680 ? _2680->size(0) : 0);
  std::vector<double> _8093;
  for (int _2681 = (int)0, _8094 = (int)((_2679)->size(0)); _2681 < _8094 ; ++_2681)
  {
    _8093.push_back(_2678);
  }
  auto _8095 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8093.size()),_8093.begin(),_8093.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8095,_2679,_2680);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2682,    double _2683,    std::shared_ptr< monty::ndarray< int,1 > > _2684) { return mosek::fusion::p_Domain::inRange(_2682,_2683,_2684); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2682,double _2683,std::shared_ptr< monty::ndarray< int,1 > > _2684){
  _checked_ptr_1<int> _ptr__2684(_2684 ? _2684->raw() : nullptr, _2684 ? _2684->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2682)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2683)}),_2684);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2685,    std::shared_ptr< monty::ndarray< double,1 > > _2686) { return mosek::fusion::p_Domain::inRange(_2685,_2686); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2685,std::shared_ptr< monty::ndarray< double,1 > > _2686){
  _checked_ptr_1<double> _ptr__2685(_2685 ? _2685->raw() : nullptr, _2685 ? _2685->size(0) : 0);
  _checked_ptr_1<double> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2685,_2686,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2685)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2687,    double _2688) { return mosek::fusion::p_Domain::inRange(_2687,_2688); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2687,double _2688){
  _checked_ptr_1<double> _ptr__2687(_2687 ? _2687->raw() : nullptr, _2687 ? _2687->size(0) : 0);
  std::vector<double> _8096;
  for (int _2689 = (int)0, _8097 = (int)((_2687)->size(0)); _2689 < _8097 ; ++_2689)
  {
    _8096.push_back(_2688);
  }
  auto _8098 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8096.size()),_8096.begin(),_8096.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2687,_8098,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2687)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2690,    std::shared_ptr< monty::ndarray< double,1 > > _2691) { return mosek::fusion::p_Domain::inRange(_2690,_2691); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2690,std::shared_ptr< monty::ndarray< double,1 > > _2691){
  _checked_ptr_1<double> _ptr__2691(_2691 ? _2691->raw() : nullptr, _2691 ? _2691->size(0) : 0);
  std::vector<double> _8099;
  for (int _2692 = (int)0, _8100 = (int)((_2691)->size(0)); _2692 < _8100 ; ++_2692)
  {
    _8099.push_back(_2690);
  }
  auto _8101 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8099.size()),_8099.begin(),_8099.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8101,_2691,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2691)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2693,    double _2694) { return mosek::fusion::p_Domain::inRange(_2693,_2694); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2693,double _2694){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2693)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2694)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2695) { return mosek::fusion::p_Domain::greaterThan(_2695); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2695){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_2695);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2696,    std::shared_ptr< monty::ndarray< int,1 > > _2697) { return mosek::fusion::p_Domain::greaterThan(_2696,_2697); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2696,std::shared_ptr< monty::ndarray< int,1 > > _2697){
  _checked_ptr_1<double> _ptr__2696(_2696 ? _2696->raw() : nullptr, _2696 ? _2696->size(0) : 0);
  _checked_ptr_1<int> _ptr__2697(_2697 ? _2697->raw() : nullptr, _2697 ? _2697->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2696),_2697);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2698) { return mosek::fusion::p_Domain::greaterThan(_2698); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _2698){
  std::vector<double> _8102;
  for (int _2699 = (int)0, _8103 = (int)((_2698)->size(0)); _2699 < _8103 ; ++_2699)
  {
    for (int _2700 = (int)0, _8104 = (int)((_2698)->size(1)); _2700 < _8104 ; ++_2700)
    {
      _8102.push_back(((*_2698)(_2699,_2700)));
    }
  }
  auto _8105 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8102.size()),_8102.begin(),_8102.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_8105,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2698)->size(0))),(int)((int)((_2698)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2701) { return mosek::fusion::p_Domain::greaterThan(_2701); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2701){
  _checked_ptr_1<double> _ptr__2701(_2701 ? _2701->raw() : nullptr, _2701 ? _2701->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2701),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2701)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2702,    std::shared_ptr< monty::ndarray< int,1 > > _2703) { return mosek::fusion::p_Domain::greaterThan(_2702,_2703); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2702,std::shared_ptr< monty::ndarray< int,1 > > _2703){
  _checked_ptr_1<int> _ptr__2703(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
  std::vector<double> _8106;
  for (long long _2704 = (int)0, _8107 = ::mosek::fusion::p_Domain::prod(_2703); _2704 < _8107 ; ++_2704)
  {
    _8106.push_back(_2702);
  }
  auto _8108 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8106.size()),_8106.begin(),_8106.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8108,_2703);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2705,    int _2706,    int _2707) { return mosek::fusion::p_Domain::greaterThan(_2705,_2706,_2707); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2705,int _2706,int _2707){
  std::vector<double> _8109;
  for (int _2708 = (int)0, _8110 = safe_mul( _2707,_2706 ); _2708 < _8110 ; ++_2708)
  {
    _8109.push_back(_2705);
  }
  auto _8111 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8109.size()),_8109.begin(),_8109.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8111,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2706),(int)(_2707)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2709,    int _2710) { return mosek::fusion::p_Domain::greaterThan(_2709,_2710); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2709,int _2710){
  std::vector<double> _8112;
  for (int _2711 = (int)0, _8113 = _2710; _2711 < _8113 ; ++_2711)
  {
    _8112.push_back(_2709);
  }
  auto _8114 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8112.size()),_8112.begin(),_8112.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8114,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2710)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2712) { return mosek::fusion::p_Domain::greaterThan(_2712); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2712){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2712)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2713) { return mosek::fusion::p_Domain::lessThan(_2713); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2713){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_2713);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2714,    std::shared_ptr< monty::ndarray< int,1 > > _2715) { return mosek::fusion::p_Domain::lessThan(_2714,_2715); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2714,std::shared_ptr< monty::ndarray< int,1 > > _2715){
  _checked_ptr_1<double> _ptr__2714(_2714 ? _2714->raw() : nullptr, _2714 ? _2714->size(0) : 0);
  _checked_ptr_1<int> _ptr__2715(_2715 ? _2715->raw() : nullptr, _2715 ? _2715->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2714),_2715);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2716) { return mosek::fusion::p_Domain::lessThan(_2716); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _2716){
  std::vector<double> _8115;
  for (int _2717 = (int)0, _8116 = (int)((_2716)->size(0)); _2717 < _8116 ; ++_2717)
  {
    for (int _2718 = (int)0, _8117 = (int)((_2716)->size(1)); _2718 < _8117 ; ++_2718)
    {
      _8115.push_back(((*_2716)(_2717,_2718)));
    }
  }
  auto _8118 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8115.size()),_8115.begin(),_8115.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_8118,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2716)->size(0))),(int)((int)((_2716)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2719) { return mosek::fusion::p_Domain::lessThan(_2719); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2719){
  _checked_ptr_1<double> _ptr__2719(_2719 ? _2719->raw() : nullptr, _2719 ? _2719->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2719),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2719)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2720,    std::shared_ptr< monty::ndarray< int,1 > > _2721) { return mosek::fusion::p_Domain::lessThan(_2720,_2721); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2720,std::shared_ptr< monty::ndarray< int,1 > > _2721){
  _checked_ptr_1<int> _ptr__2721(_2721 ? _2721->raw() : nullptr, _2721 ? _2721->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2720)}),_2721);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2722,    int _2723,    int _2724) { return mosek::fusion::p_Domain::lessThan(_2722,_2723,_2724); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2722,int _2723,int _2724){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2722)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2723),(int)(_2724)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2725,    int _2726) { return mosek::fusion::p_Domain::lessThan(_2725,_2726); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2725,int _2726){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2725)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2726)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2727) { return mosek::fusion::p_Domain::lessThan(_2727); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2727){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2727)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2728) { return mosek::fusion::p_Domain::equalsTo(_2728); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _2728){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_2728);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2729,    std::shared_ptr< monty::ndarray< int,1 > > _2730) { return mosek::fusion::p_Domain::equalsTo(_2729,_2730); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2729,std::shared_ptr< monty::ndarray< int,1 > > _2730){
  _checked_ptr_1<double> _ptr__2729(_2729 ? _2729->raw() : nullptr, _2729 ? _2729->size(0) : 0);
  _checked_ptr_1<int> _ptr__2730(_2730 ? _2730->raw() : nullptr, _2730 ? _2730->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2729),_2730);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _2731) { return mosek::fusion::p_Domain::equalsTo(_2731); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _2731){
  std::vector<double> _8119;
  for (int _2732 = (int)0, _8120 = (int)((_2731)->size(0)); _2732 < _8120 ; ++_2732)
  {
    for (int _2733 = (int)0, _8121 = (int)((_2731)->size(1)); _2733 < _8121 ; ++_2733)
    {
      _8119.push_back(((*_2731)(_2732,_2733)));
    }
  }
  auto _8122 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8119.size()),_8119.begin(),_8119.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_8122,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2731)->size(0))),(int)((int)((_2731)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2734) { return mosek::fusion::p_Domain::equalsTo(_2734); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2734){
  _checked_ptr_1<double> _ptr__2734(_2734 ? _2734->raw() : nullptr, _2734 ? _2734->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2734),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2734)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2735,    std::shared_ptr< monty::ndarray< int,1 > > _2736) { return mosek::fusion::p_Domain::equalsTo(_2735,_2736); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2735,std::shared_ptr< monty::ndarray< int,1 > > _2736){
  _checked_ptr_1<int> _ptr__2736(_2736 ? _2736->raw() : nullptr, _2736 ? _2736->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2735)}),_2736);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2737,    int _2738,    int _2739) { return mosek::fusion::p_Domain::equalsTo(_2737,_2738,_2739); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2737,int _2738,int _2739){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2737)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2738),(int)(_2739)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2740,    int _2741) { return mosek::fusion::p_Domain::equalsTo(_2740,_2741); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2740,int _2741){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2740)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2741)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2742) { return mosek::fusion::p_Domain::equalsTo(_2742); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2742){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2742)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _2743) { return mosek::fusion::p_Domain::unbounded(_2743); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _2743){
  _checked_ptr_1<int> _ptr__2743(_2743 ? _2743->raw() : nullptr, _2743 ? _2743->size(0) : 0);
  std::vector<int> _8123;
  for (int _2744 = (int)0, _8124 = (int)((_2743)->size(0)); _2744 < _8124 ; ++_2744)
  {
    _8123.push_back(_ptr__2743[_2744]);
  }
  auto _8125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8123.size()),_8123.begin(),_8123.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_8125);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2745,    int _2746) { return mosek::fusion::p_Domain::unbounded(_2745,_2746); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2745,int _2746){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2745),(int)(_2746)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2747) { return mosek::fusion::p_Domain::unbounded(_2747); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2747){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2747)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2748,    std::shared_ptr< monty::ndarray< long long,1 > > _2749,    std::shared_ptr< monty::ndarray< double,1 > > _2750){ return new mosek::fusion::ExprConst(_2748,_2749,_2750); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2748,    std::shared_ptr< monty::ndarray< long long,1 > > _2749,    std::shared_ptr< monty::ndarray< double,1 > > _2750) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2748,_2749,_2750); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2748,    std::shared_ptr< monty::ndarray< long long,1 > > _2749,    std::shared_ptr< monty::ndarray< double,1 > > _2750){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2748(_2748 ? _2748->raw() : nullptr, _2748 ? _2748->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2749(_2749 ? _2749->raw() : nullptr, _2749 ? _2749->size(0) : 0);
    _checked_ptr_1<double> _ptr__2750(_2750 ? _2750->raw() : nullptr, _2750 ? _2750->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2748);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_2750);
    std::shared_ptr< monty::ndarray< long long,1 > > _8126;
    bool _8127 = (NULL != _2749.get());
    if (_8127)
    {
      _8126 = ::mosek::fusion::Utils::Tools::arraycopy(_2749);
    }
    else
    {
      _8126 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8126;
    ::mosek::fusion::p_ExprConst::validate(_2748,_2750,_2749);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2751,    std::shared_ptr< monty::ndarray< long long,1 > > _2752,    double _2753){ return new mosek::fusion::ExprConst(_2751,_2752,_2753); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2751,    std::shared_ptr< monty::ndarray< long long,1 > > _2752,    double _2753) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2751,_2752,_2753); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2751,    std::shared_ptr< monty::ndarray< long long,1 > > _2752,    double _2753){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2751(_2751 ? _2751->raw() : nullptr, _2751 ? _2751->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2752(_2752 ? _2752->raw() : nullptr, _2752 ? _2752->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2751);
    long long _8128;
    bool _8129 = (NULL == _2752.get());
    if (_8129)
    {
      _8128 = ::mosek::fusion::p_Set::size(_2751);
    }
    else
    {
      _8128 = (int)((_2752)->size(0));
    }
    long long _2754 = _8128;
    std::vector<double> _8130;
    for (long long _2755 = (int)0, _8131 = _2754; _2755 < _8131 ; ++_2755)
    {
      _8130.push_back(_2753);
    }
    auto _8132 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8130.size()),_8130.begin(),_8130.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _8132;
    std::shared_ptr< monty::ndarray< long long,1 > > _8133;
    bool _8134 = (NULL != _2752.get());
    if (_8134)
    {
      _8133 = ::mosek::fusion::Utils::Tools::arraycopy(_2752);
    }
    else
    {
      _8133 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8133;
    ::mosek::fusion::p_ExprConst::validate(_2751,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_2752);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2756,monty::rc_ptr< ::mosek::fusion::WorkStack > _2757,monty::rc_ptr< ::mosek::fusion::WorkStack > _2758) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_2756,_2757,_2758); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2756,monty::rc_ptr< ::mosek::fusion::WorkStack > _2757,monty::rc_ptr< ::mosek::fusion::WorkStack > _2758){
  std::shared_ptr< monty::ndarray< int,1 > > _2759 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__2759(_2759 ? _2759->raw() : nullptr,_2759 ? _2759->size(0) : 0);
  int _2760 = (int)((_2759)->size(0));
  int _2761 = (int)((bfix)->size(0));
  bool _2762 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_2759)));
  _2756->alloc_expr(_2760,_2761,(int)0,_2762);
  int _2763 = mosek::fusion::p_WorkStack::_get_impl(_2756)->shape_base;
  int _2764 = mosek::fusion::p_WorkStack::_get_impl(_2756)->ptr_base;
  int _2765 = mosek::fusion::p_WorkStack::_get_impl(_2756)->sp_base;
  int _2766 = mosek::fusion::p_WorkStack::_get_impl(_2756)->nidxs_base;
  int _2767 = mosek::fusion::p_WorkStack::_get_impl(_2756)->bfix_base;
  int _2768 = mosek::fusion::p_WorkStack::_get_impl(_2756)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _2769 = mosek::fusion::p_WorkStack::_get_impl(_2756)->i32;
  _checked_ptr_1<int> _ptr__2769(_2769 ? _2769->raw() : nullptr,_2769 ? _2769->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2770 = mosek::fusion::p_WorkStack::_get_impl(_2756)->i64;
  _checked_ptr_1<long long> _ptr__2770(_2770 ? _2770->raw() : nullptr,_2770 ? _2770->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2771 = mosek::fusion::p_WorkStack::_get_impl(_2756)->f64;
  _checked_ptr_1<double> _ptr__2771(_2771 ? _2771->raw() : nullptr,_2771 ? _2771->size(0) : 0);
  int _8135 = (int)0;
  int _8136 = _2760;
  for (int _2772 = _8135; _2772 < _8136; ++_2772)
  {
    {
      _ptr__2769[safe_add( _2763,_2772 )] = _ptr__2759[_2772];
    }
  }
  if (_2762)
  {
    {
      int _8137 = (int)0;
      int _8138 = (int)((sparsity)->size(0));
      for (int _2773 = _8137; _2773 < _8138; ++_2773)
      {
        {
          _ptr__2770[safe_add( _2765,_2773 )] = ((*sparsity)(_2773));
        }
      }
    }
  }
  {}
  int _8139 = (int)0;
  int _8140 = _2761;
  for (int _2774 = _8139; _2774 < _8140; ++_2774)
  {
    {
      _ptr__2771[safe_add( _2767,_2774 )] = ((*bfix)(_2774));
    }
  }
  int _8141 = (int)0;
  int _8142 = safe_add( _2761,(int)1 );
  for (int _2775 = _8141; _2775 < _8142; ++_2775)
  {
    {
      _ptr__2769[safe_add( _2764,_2775 )] = (int)0;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _2776,std::shared_ptr< monty::ndarray< double,1 > > _2777,std::shared_ptr< monty::ndarray< long long,1 > > _2778){
  _checked_ptr_1<int> _ptr__2776(_2776 ? _2776->raw() : nullptr, _2776 ? _2776->size(0) : 0);
  _checked_ptr_1<double> _ptr__2777(_2777 ? _2777->raw() : nullptr, _2777 ? _2777->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2778(_2778 ? _2778->raw() : nullptr, _2778 ? _2778->size(0) : 0);
  long long _2779 = ::mosek::fusion::p_Set::size(_2776);
  if ((NULL != _2778.get()))
  {
    {
      if (((int)((_2778)->size(0)) != (int)((_2777)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _2780 = false;
      int _8143 = (int)0;
      int _8144 = (int)((_2778)->size(0));
      for (int _2781 = _8143; _2781 < _8144; ++_2781)
      {
        {
          if (((_ptr__2778[_2781] < (int)0) || (_ptr__2778[_2781] >= _2779)))
          {
            {
              _2780 = true;
            }
          }
          {}
        }
      }
      if (_2780)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_2777)->size(0)) != _2779))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2782,    std::shared_ptr< monty::ndarray< int,2 > > _2783){ return new mosek::fusion::ExprPick(_2782,_2783); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2782,    std::shared_ptr< monty::ndarray< int,2 > > _2783) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2782,_2783); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2782,    std::shared_ptr< monty::ndarray< int,2 > > _2783){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2783)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _2784 = _2782->getShape();
    _checked_ptr_1<int> _ptr__2784(_2784 ? _2784->raw() : nullptr,_2784 ? _2784->size(0) : 0);
    int _2785 = (int)((_2784)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2782;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2783)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _2786 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__2786(_2786 ? _2786->raw() : nullptr,_2786 ? _2786->size(0) : 0);
    if (((int)((_2783)->size(1)) != _2785))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _2787 = false;
    int _8145 = (int)0;
    int _8146 = (int)((_2783)->size(0));
    for (int _2788 = _8145; _2788 < _8146; ++_2788)
    {
      {
        int _8147 = (int)0;
        int _8148 = _2785;
        for (int _2789 = _8147; _2789 < _8148; ++_2789)
        {
          {
            if (((((*_2783)(_2788,_2789)) < (int)0) || (((*_2783)(_2788,_2789)) >= _ptr__2784[_2789])))
            {
              {
                _2787 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_2787)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2790 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2785)));
      _checked_ptr_1<long long> _ptr__2790(_2790 ? _2790->raw() : nullptr,_2790 ? _2790->size(0) : 0);
      _ptr__2790[(_2785 - (int)1)] = (int)1;
      int _8149 = (int)1;
      int _8150 = _2785;
      for (int _2791 = _8149; _2791 < _8150; ++_2791)
      {
        {
          _ptr__2790[((_2785 - _2791) - (int)1)] = safe_mul( _ptr__2790[(_2785 - _2791)],_ptr__2784[(_2785 - _2791)] );
        }
      }
      int _8151 = (int)0;
      int _8152 = (int)((_2783)->size(0));
      for (int _2792 = _8151; _2792 < _8152; ++_2792)
      {
        {
          long long _2793 = (long long)0;
          int _8153 = (int)0;
          int _8154 = _2785;
          for (int _2794 = _8153; _2794 < _8154; ++_2794)
          {
            {
              _2793 += safe_mul( _ptr__2790[_2794],((*_2783)(_2792,_2794)) );
            }
          }
          _ptr__2786[_2792] = _2793;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2795,    std::shared_ptr< monty::ndarray< long long,1 > > _2796){ return new mosek::fusion::ExprPick(_2795,_2796); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2795,    std::shared_ptr< monty::ndarray< long long,1 > > _2796) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2795,_2796); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2795,    std::shared_ptr< monty::ndarray< long long,1 > > _2796){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2796(_2796 ? _2796->raw() : nullptr, _2796 ? _2796->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2796)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2795;
    std::shared_ptr< monty::ndarray< int,1 > > _2797 = _2795->getShape();
    _checked_ptr_1<int> _ptr__2797(_2797 ? _2797->raw() : nullptr,_2797 ? _2797->size(0) : 0);
    long long _2798 = ::mosek::fusion::p_Set::size(_2797);
    bool _2799 = false;
    int _8155 = (int)0;
    int _8156 = (int)((_2796)->size(0));
    for (int _2800 = _8155; _2800 < _8156; ++_2800)
    {
      {
        if (((_ptr__2796[_2800] < (int)0) || (_ptr__2796[_2800] >= _2798)))
        {
          {
            _2799 = true;
          }
        }
        {}
      }
    }
    if (_2799)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_2796);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2801,monty::rc_ptr< ::mosek::fusion::WorkStack > _2802,monty::rc_ptr< ::mosek::fusion::WorkStack > _2803) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_2801,_2802,_2803); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2801,monty::rc_ptr< ::mosek::fusion::WorkStack > _2802,monty::rc_ptr< ::mosek::fusion::WorkStack > _2803){
  expr->eval(_2802,_2801,_2803);
  _2802->pop_expr();
  int _2804 = mosek::fusion::p_WorkStack::_get_impl(_2802)->nd;
  int _2805 = mosek::fusion::p_WorkStack::_get_impl(_2802)->shape_base;
  int _2806 = mosek::fusion::p_WorkStack::_get_impl(_2802)->nelem;
  int _2807 = mosek::fusion::p_WorkStack::_get_impl(_2802)->nnz;
  bool _2808 = mosek::fusion::p_WorkStack::_get_impl(_2802)->hassp;
  int _2809 = mosek::fusion::p_WorkStack::_get_impl(_2802)->ptr_base;
  int _2810 = mosek::fusion::p_WorkStack::_get_impl(_2802)->sp_base;
  int _2811 = mosek::fusion::p_WorkStack::_get_impl(_2802)->nidxs_base;
  int _2812 = mosek::fusion::p_WorkStack::_get_impl(_2802)->bfix_base;
  int _2813 = mosek::fusion::p_WorkStack::_get_impl(_2802)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _2814 = mosek::fusion::p_WorkStack::_get_impl(_2802)->i32;
  _checked_ptr_1<int> _ptr__2814(_2814 ? _2814->raw() : nullptr,_2814 ? _2814->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2815 = mosek::fusion::p_WorkStack::_get_impl(_2802)->i64;
  _checked_ptr_1<long long> _ptr__2815(_2815 ? _2815->raw() : nullptr,_2815 ? _2815->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2816 = mosek::fusion::p_WorkStack::_get_impl(_2802)->f64;
  _checked_ptr_1<double> _ptr__2816(_2816 ? _2816->raw() : nullptr,_2816 ? _2816->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2817 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__2817(_2817 ? _2817->raw() : nullptr,_2817 ? _2817->size(0) : 0);
  if ((!_2808))
  {
    {
      int _2818 = (int)((_2817)->size(0));
      int _2819 = (int)1;
      int _2820 = (int)0;
      int _8157 = (int)0;
      int _8158 = (int)((_2817)->size(0));
      for (int _2821 = _8157; _2821 < _8158; ++_2821)
      {
        {
          _2820 += (_ptr__2814[safe_add( safe_add( _2809,_ptr__2817[_2821] ),(int)1 )] - _ptr__2814[safe_add( _2809,_ptr__2817[_2821] )]);
        }
      }
      _2801->alloc_expr(_2819,_2818,_2820,false);
      int _2822 = mosek::fusion::p_WorkStack::_get_impl(_2801)->cof_base;
      int _2823 = mosek::fusion::p_WorkStack::_get_impl(_2801)->bfix_base;
      int _2824 = mosek::fusion::p_WorkStack::_get_impl(_2801)->nidxs_base;
      int _2825 = mosek::fusion::p_WorkStack::_get_impl(_2801)->ptr_base;
      int _2826 = mosek::fusion::p_WorkStack::_get_impl(_2801)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2827 = mosek::fusion::p_WorkStack::_get_impl(_2801)->i32;
      _checked_ptr_1<int> _ptr__2827(_2827 ? _2827->raw() : nullptr,_2827 ? _2827->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2828 = mosek::fusion::p_WorkStack::_get_impl(_2801)->i64;
      _checked_ptr_1<long long> _ptr__2828(_2828 ? _2828->raw() : nullptr,_2828 ? _2828->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2829 = mosek::fusion::p_WorkStack::_get_impl(_2801)->f64;
      _checked_ptr_1<double> _ptr__2829(_2829 ? _2829->raw() : nullptr,_2829 ? _2829->size(0) : 0);
      _ptr__2827[_2826] = (int)((_2817)->size(0));
      int _2830 = (int)0;
      _ptr__2827[_2825] = (int)0;
      int _8159 = (int)0;
      int _8160 = (int)((_2817)->size(0));
      for (int _2831 = _8159; _2831 < _8160; ++_2831)
      {
        {
          int _8161 = _ptr__2814[safe_add( _2809,_ptr__2817[_2831] )];
          int _8162 = _ptr__2814[safe_add( safe_add( _2809,_ptr__2817[_2831] ),(int)1 )];
          for (int _2832 = _8161; _2832 < _8162; ++_2832)
          {
            {
              _ptr__2828[safe_add( _2824,_2830 )] = _ptr__2815[safe_add( _2811,_2832 )];
              _ptr__2829[safe_add( _2822,_2830 )] = _ptr__2816[safe_add( _2813,_2832 )];
              ++ _2830;
            }
          }
          _ptr__2829[safe_add( _2823,_2831 )] = _ptr__2816[safe_add( _2812,_ptr__2817[_2831] )];
          _ptr__2827[safe_add( safe_add( _2825,_2831 ),(int)1 )] = _2830;
        }
      }
    }
  }
  else
  {
    {
      int _2833 = (int)1;
      int _2834 = (int)((_2817)->size(0));
      int _2835 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _2836 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__2836(_2836 ? _2836->raw() : nullptr,_2836 ? _2836->size(0) : 0);
      int _2837 = _2803->alloci32((int)((_2836)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _2838 = mosek::fusion::p_WorkStack::_get_impl(_2803)->i32;
      _checked_ptr_1<int> _ptr__2838(_2838 ? _2838->raw() : nullptr,_2838 ? _2838->size(0) : 0);
      int _8163 = (int)0;
      int _8164 = (int)((_2836)->size(0));
      for (int _2839 = _8163; _2839 < _8164; ++_2839)
      {
        {
          int _2840 = _2806;
          int _2841 = (int)0;
          while ( (_2841 < (_2840 - (int)1)) )
          {
            {
              int _2842 = (safe_add( safe_add( _2840,_2841 ),(int)1 ) / (int)2);
              if ((_ptr__2815[safe_add( _2810,_2842 )] >= _ptr__2836[_2839]))
              {
                {
                  _2840 = _2842;
                }
              }
              else
              {
                {
                  _2841 = _2842;
                }
              }
            }
          }
          ++ _2841;
          if (((_2841 < _2806) && (_ptr__2815[safe_add( _2810,_2841 )] == _ptr__2836[_2839])))
          {
            {
              _ptr__2838[safe_add( _2837,_2839 )] = _2841;
              _2835 += (_ptr__2814[safe_add( safe_add( _2809,_2841 ),(int)1 )] - _ptr__2814[safe_add( _2809,_2841 )]);
            }
          }
          else
          {
            {
              _ptr__2838[safe_add( _2837,_2839 )] = (-(int)1);
            }
          }
        }
      }
      _2801->alloc_expr(_2833,_2834,_2835,false);
      int _2843 = mosek::fusion::p_WorkStack::_get_impl(_2801)->ptr_base;
      int _2844 = mosek::fusion::p_WorkStack::_get_impl(_2801)->nidxs_base;
      int _2845 = mosek::fusion::p_WorkStack::_get_impl(_2801)->cof_base;
      int _2846 = mosek::fusion::p_WorkStack::_get_impl(_2801)->bfix_base;
      int _2847 = mosek::fusion::p_WorkStack::_get_impl(_2801)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2848 = mosek::fusion::p_WorkStack::_get_impl(_2801)->i32;
      _checked_ptr_1<int> _ptr__2848(_2848 ? _2848->raw() : nullptr,_2848 ? _2848->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2849 = mosek::fusion::p_WorkStack::_get_impl(_2801)->i64;
      _checked_ptr_1<long long> _ptr__2849(_2849 ? _2849->raw() : nullptr,_2849 ? _2849->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2850 = mosek::fusion::p_WorkStack::_get_impl(_2801)->f64;
      _checked_ptr_1<double> _ptr__2850(_2850 ? _2850->raw() : nullptr,_2850 ? _2850->size(0) : 0);
      _ptr__2848[_2847] = (int)((_2836)->size(0));
      _ptr__2848[_2843] = (int)0;
      int _2851 = (int)0;
      int _8165 = (int)0;
      int _8166 = (int)((_2836)->size(0));
      for (int _2852 = _8165; _2852 < _8166; ++_2852)
      {
        {
          if ((_ptr__2838[safe_add( _2837,_2852 )] >= (int)0))
          {
            {
              int _2853 = _ptr__2838[safe_add( _2837,_2852 )];
              int _8167 = _ptr__2814[safe_add( _2809,_2853 )];
              int _8168 = _ptr__2814[safe_add( safe_add( _2809,_2853 ),(int)1 )];
              for (int _2854 = _8167; _2854 < _8168; ++_2854)
              {
                {
                  _ptr__2849[safe_add( _2844,_2851 )] = _ptr__2815[safe_add( _2811,_2854 )];
                  _ptr__2850[safe_add( _2845,_2851 )] = _ptr__2816[safe_add( _2813,_2854 )];
                  ++ _2851;
                }
              }
              _ptr__2850[safe_add( _2846,_2852 )] = _ptr__2816[safe_add( _2812,_2853 )];
            }
          }
          else
          {
            {
              _ptr__2850[safe_add( _2846,_2852 )] = 0.0;
            }
          }
          _ptr__2848[safe_add( safe_add( _2843,_2852 ),(int)1 )] = _2851;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2855,    std::shared_ptr< monty::ndarray< int,1 > > _2856,    std::shared_ptr< monty::ndarray< int,1 > > _2857){ return new mosek::fusion::ExprSlice(_2855,_2856,_2857); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2855,    std::shared_ptr< monty::ndarray< int,1 > > _2856,    std::shared_ptr< monty::ndarray< int,1 > > _2857) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_2855,_2856,_2857); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2855,    std::shared_ptr< monty::ndarray< int,1 > > _2856,    std::shared_ptr< monty::ndarray< int,1 > > _2857){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2856(_2856 ? _2856->raw() : nullptr, _2856 ? _2856->size(0) : 0);
    _checked_ptr_1<int> _ptr__2857(_2857 ? _2857->raw() : nullptr, _2857 ? _2857->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_2855->getShape(),_2856,_2857));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _2855;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _2856;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _2857;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2858,monty::rc_ptr< ::mosek::fusion::WorkStack > _2859,monty::rc_ptr< ::mosek::fusion::WorkStack > _2860) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_2858,_2859,_2860); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2858,monty::rc_ptr< ::mosek::fusion::WorkStack > _2859,monty::rc_ptr< ::mosek::fusion::WorkStack > _2860){
  expr->eval(_2859,_2858,_2860);
  int _2861 = _2859->popi32();
  int _2862 = _2859->popi32(_2861);
  int _2863 = _2859->popi32();
  int _2864 = _2859->popi32();
  bool _2865 = (_2859->popi32() != (int)0);
  int _2866 = _2859->popi32(safe_add( _2863,(int)1 ));
  int _8169;
  bool _8170 = _2865;
  if (_8170)
  {
    _8169 = _2859->popi64(_2863);
  }
  else
  {
    _8169 = (-(int)1);
  }
  int _2867 = _8169;
  int _2868 = _2859->popi64(_2864);
  int _2869 = _2859->popf64(_2863);
  int _2870 = _2859->popf64(_2864);
  std::shared_ptr< monty::ndarray< int,1 > > _2871 = mosek::fusion::p_WorkStack::_get_impl(_2859)->i32;
  _checked_ptr_1<int> _ptr__2871(_2871 ? _2871->raw() : nullptr,_2871 ? _2871->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2872 = mosek::fusion::p_WorkStack::_get_impl(_2859)->i64;
  _checked_ptr_1<long long> _ptr__2872(_2872 ? _2872->raw() : nullptr,_2872 ? _2872->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2873 = mosek::fusion::p_WorkStack::_get_impl(_2859)->f64;
  _checked_ptr_1<double> _ptr__2873(_2873 ? _2873->raw() : nullptr,_2873 ? _2873->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2874 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2861)));
  _checked_ptr_1<long long> _ptr__2874(_2874 ? _2874->raw() : nullptr,_2874 ? _2874->size(0) : 0);
  _ptr__2874[(_2861 - (int)1)] = (int)1;
  int _8171 = (int)1;
  int _8172 = _2861;
  for (int _2875 = _8171; _2875 < _8172; ++_2875)
  {
    {
      _ptr__2874[((_2861 - _2875) - (int)1)] = safe_mul( _ptr__2874[(_2861 - _2875)],_ptr__2871[(safe_add( _2862,_2861 ) - _2875)] );
    }
  }
  int _2876 = (int)0;
  int _2877 = (int)0;
  if (_2865)
  {
    {
      int _8173 = (int)0;
      int _8174 = _2863;
      for (int _2878 = _8173; _2878 < _8174; ++_2878)
      {
        {
          bool _2879 = true;
          int _8175 = (int)0;
          int _8176 = _2861;
          for (int _2880 = _8175; _2880 < _8176; ++_2880)
          {
            {
              long long _2881 = ((_ptr__2872[safe_add( _2867,_2878 )] / _ptr__2874[_2880]) % _ptr__2871[safe_add( _2862,_2880 )]);
              _2879 = (_2879 && ((_2881 >= ((*first)(_2880))) && (_2881 < ((*last)(_2880)))));
            }
          }
          if (_2879)
          {
            {
              _2877 += (_ptr__2871[safe_add( safe_add( _2866,_2878 ),(int)1 )] - _ptr__2871[safe_add( _2866,_2878 )]);
              ++ _2876;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _2876 = (int)1;
      int _8177 = (int)0;
      int _8178 = _2861;
      for (int _2882 = _8177; _2882 < _8178; ++_2882)
      {
        {
          _2876 *= (((*last)(_2882)) - ((*first)(_2882)));
        }
      }
      int _8179 = (int)0;
      int _8180 = _2863;
      for (int _2883 = _8179; _2883 < _8180; ++_2883)
      {
        {
          bool _2884 = true;
          int _8181 = (int)0;
          int _8182 = _2861;
          for (int _2885 = _8181; _2885 < _8182; ++_2885)
          {
            {
              long long _2886 = ((_2883 / _ptr__2874[_2885]) % _ptr__2871[safe_add( _2862,_2885 )]);
              _2884 = (_2884 && ((_2886 >= ((*first)(_2885))) && (_2886 < ((*last)(_2885)))));
            }
          }
          if (_2884)
          {
            {
              _2877 += (_ptr__2871[safe_add( safe_add( _2866,_2883 ),(int)1 )] - _ptr__2871[safe_add( _2866,_2883 )]);
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _8183;
  for (int _2888 = (int)0, _8184 = _2861; _2888 < _8184 ; ++_2888)
  {
    _8183.push_back((((*last)(_2888)) - ((*first)(_2888))));
  }
  auto _8185 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8183.size()),_8183.begin(),_8183.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _2887 = _8185;
  _checked_ptr_1<int> _ptr__2887(_2887 ? _2887->raw() : nullptr,_2887 ? _2887->size(0) : 0);
  int _2889 = _2858->allocf64(_2877);
  int _2890 = _2858->allocf64(_2876);
  int _2891 = _2858->alloci64(_2877);
  int _8186;
  bool _8187 = _2865;
  if (_8187)
  {
    _8186 = _2858->alloci64(_2876);
  }
  else
  {
    _8186 = (-(int)1);
  }
  int _2892 = _8186;
  int _2893 = _2858->alloci32(safe_add( _2876,(int)1 ));
  int _8188;
  bool _8189 = _2865;
  if (_8189)
  {
    _8188 = (int)1;
  }
  else
  {
    _8188 = (int)0;
  }
  _2858->pushi32(_8188);
  _2858->pushi32(_2877);
  _2858->pushi32(_2876);
  int _8190 = (int)0;
  int _8191 = _2861;
  for (int _2894 = _8190; _2894 < _8191; ++_2894)
  {
    {
      _2858->pushi32(_ptr__2887[_2894]);
    }
  }
  _2858->pushi32(_2861);
  std::shared_ptr< monty::ndarray< int,1 > > _2895 = mosek::fusion::p_WorkStack::_get_impl(_2858)->i32;
  _checked_ptr_1<int> _ptr__2895(_2895 ? _2895->raw() : nullptr,_2895 ? _2895->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2896 = mosek::fusion::p_WorkStack::_get_impl(_2858)->i64;
  _checked_ptr_1<long long> _ptr__2896(_2896 ? _2896->raw() : nullptr,_2896 ? _2896->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2897 = mosek::fusion::p_WorkStack::_get_impl(_2858)->f64;
  _checked_ptr_1<double> _ptr__2897(_2897 ? _2897->raw() : nullptr,_2897 ? _2897->size(0) : 0);
  _ptr__2895[_2893] = (int)0;
  std::shared_ptr< monty::ndarray< long long,1 > > _2898 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2861)));
  _checked_ptr_1<long long> _ptr__2898(_2898 ? _2898->raw() : nullptr,_2898 ? _2898->size(0) : 0);
  _ptr__2898[(_2861 - (int)1)] = (int)1;
  int _8192 = (int)1;
  int _8193 = _2861;
  for (int _2899 = _8192; _2899 < _8193; ++_2899)
  {
    {
      _ptr__2898[((_2861 - _2899) - (int)1)] = safe_mul( _ptr__2898[(_2861 - _2899)],_ptr__2887[(_2861 - _2899)] );
    }
  }
  int _2900 = (int)0;
  int _2901 = (int)0;
  if (_2865)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2902 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2861)));
      _checked_ptr_1<int> _ptr__2902(_2902 ? _2902->raw() : nullptr,_2902 ? _2902->size(0) : 0);
      int _8194 = (int)0;
      int _8195 = _2863;
      for (int _2903 = _8194; _2903 < _8195; ++_2903)
      {
        {
          bool _2904 = true;
          int _8196 = (int)0;
          int _8197 = _2861;
          for (int _2905 = _8196; _2905 < _8197; ++_2905)
          {
            {
              _ptr__2902[_2905] = (int)((_ptr__2872[safe_add( _2867,_2903 )] / _ptr__2874[_2905]) % _ptr__2871[safe_add( _2862,_2905 )]);
              _2904 = (_2904 && ((_ptr__2902[_2905] >= ((*first)(_2905))) && (_ptr__2902[_2905] < ((*last)(_2905)))));
            }
          }
          if (_2904)
          {
            {
              int _8198 = _ptr__2871[safe_add( _2866,_2903 )];
              int _8199 = _ptr__2871[safe_add( safe_add( _2866,_2903 ),(int)1 )];
              for (int _2906 = _8198; _2906 < _8199; ++_2906)
              {
                {
                  _ptr__2896[safe_add( _2891,_2901 )] = _ptr__2872[safe_add( _2868,_2906 )];
                  _ptr__2897[safe_add( _2889,_2901 )] = _ptr__2873[safe_add( _2870,_2906 )];
                  ++ _2901;
                }
              }
              long long _2907 = (long long)0;
              int _8200 = (int)0;
              int _8201 = _2861;
              for (int _2908 = _8200; _2908 < _8201; ++_2908)
              {
                {
                  _2907 += safe_mul( _ptr__2898[_2908],(_ptr__2902[_2908] - ((*first)(_2908))) );
                }
              }
              _ptr__2896[safe_add( _2892,_2900 )] = _2907;
              _ptr__2897[safe_add( _2890,_2900 )] = _ptr__2873[safe_add( _2869,_2903 )];
              _ptr__2895[safe_add( safe_add( _2893,_2900 ),(int)1 )] = _2901;
              ++ _2900;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _8202 = (int)0;
      int _8203 = _2863;
      for (int _2909 = _8202; _2909 < _8203; ++_2909)
      {
        {
          bool _2910 = true;
          int _8204 = (int)0;
          int _8205 = _2861;
          for (int _2911 = _8204; _2911 < _8205; ++_2911)
          {
            {
              long long _2912 = ((_2909 / _ptr__2874[_2911]) % _ptr__2871[safe_add( _2862,_2911 )]);
              _2910 = (_2910 && ((_2912 >= ((*first)(_2911))) && (_2912 < ((*last)(_2911)))));
            }
          }
          if (_2910)
          {
            {
              int _8206 = _ptr__2871[safe_add( _2866,_2909 )];
              int _8207 = _ptr__2871[safe_add( safe_add( _2866,_2909 ),(int)1 )];
              for (int _2913 = _8206; _2913 < _8207; ++_2913)
              {
                {
                  _ptr__2896[safe_add( _2891,_2901 )] = _ptr__2872[safe_add( _2868,_2913 )];
                  _ptr__2897[safe_add( _2889,_2901 )] = _ptr__2873[safe_add( _2870,_2913 )];
                  ++ _2901;
                }
              }
              _ptr__2897[safe_add( _2890,_2900 )] = _ptr__2873[safe_add( _2869,_2909 )];
              _ptr__2895[safe_add( safe_add( _2893,_2900 ),(int)1 )] = _2901;
              ++ _2900;
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _2914,std::shared_ptr< monty::ndarray< int,1 > > _2915,std::shared_ptr< monty::ndarray< int,1 > > _2916){
  _checked_ptr_1<int> _ptr__2914(_2914 ? _2914->raw() : nullptr, _2914 ? _2914->size(0) : 0);
  _checked_ptr_1<int> _ptr__2915(_2915 ? _2915->raw() : nullptr, _2915 ? _2915->size(0) : 0);
  _checked_ptr_1<int> _ptr__2916(_2916 ? _2916->raw() : nullptr, _2916 ? _2916->size(0) : 0);
  if ((((int)((_2914)->size(0)) != (int)((_2915)->size(0))) || ((int)((_2914)->size(0)) != (int)((_2916)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _8208 = (int)0;
  int _8209 = (int)((_2914)->size(0));
  for (int _2917 = _8208; _2917 < _8209; ++_2917)
  {
    {
      if (((_ptr__2915[_2917] < (int)0) || ((_ptr__2916[_2917] < _ptr__2915[_2917]) || (_ptr__2916[_2917] > _ptr__2914[_2917]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _8210;
  for (int _2918 = (int)0, _8211 = (int)((_2914)->size(0)); _2918 < _8211 ; ++_2918)
  {
    _8210.push_back((_ptr__2916[_2918] - _ptr__2915[_2918]));
  }
  auto _8212 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8210.size()),_8210.begin(),_8210.end()));
  return _8212;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2919 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _8213 = (int)1;
  int _8214 = (int)((first)->size(0));
  for (int _2920 = _8213; _2920 < _8214; ++_2920)
  {
    {
      _2919->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_2920)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_2920)));
    }
  }
  _2919->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2919->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2921,    monty::rc_ptr< ::mosek::fusion::Expression > _2922){ return new mosek::fusion::ExprPermuteDims(_2921,_2922); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2921,    monty::rc_ptr< ::mosek::fusion::Expression > _2922) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2921,_2922); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2921,    monty::rc_ptr< ::mosek::fusion::Expression > _2922){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2921(_2921 ? _2921->raw() : nullptr, _2921 ? _2921->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_2921,_2922,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _2923 = _2922->getShape();
    _checked_ptr_1<int> _ptr__2923(_2923 ? _2923->raw() : nullptr,_2923 ? _2923->size(0) : 0);
    if (((int)((_2921)->size(0)) != (int)((_2923)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _8215;
    for (int _2925 = (int)0, _8216 = (int)((_2921)->size(0)); _2925 < _8216 ; ++_2925)
    {
      _8215.push_back((int)0);
    }
    auto _8217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8215.size()),_8215.begin(),_8215.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _2924 = _8217;
    _checked_ptr_1<int> _ptr__2924(_2924 ? _2924->raw() : nullptr,_2924 ? _2924->size(0) : 0);
    int _8218 = (int)0;
    int _8219 = (int)((_2924)->size(0));
    for (int _2926 = _8218; _2926 < _8219; ++_2926)
    {
      {
        if (((_ptr__2921[_2926] < (int)0) || (_ptr__2921[_2926] > (int)((_2923)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__2924[_ptr__2921[_2926]];
      }
    }
    int _8220 = (int)0;
    int _8221 = (int)((_2924)->size(0));
    for (int _2927 = _8220; _2927 < _8221; ++_2927)
    {
      {
        if (((_ptr__2924[_2927] < (int)1) || (_ptr__2924[_2927] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2928,    monty::rc_ptr< ::mosek::fusion::Expression > _2929,    int _2930){ return new mosek::fusion::ExprPermuteDims(_2928,_2929,_2930); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2928,    monty::rc_ptr< ::mosek::fusion::Expression > _2929,    int _2930) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2928,_2929,_2930); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2928,    monty::rc_ptr< ::mosek::fusion::Expression > _2929,    int _2930){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2928(_2928 ? _2928->raw() : nullptr, _2928 ? _2928->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_2928,_2929->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _2929;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_2928);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2931,monty::rc_ptr< ::mosek::fusion::WorkStack > _2932,monty::rc_ptr< ::mosek::fusion::WorkStack > _2933) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_2931,_2932,_2933); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2931,monty::rc_ptr< ::mosek::fusion::WorkStack > _2932,monty::rc_ptr< ::mosek::fusion::WorkStack > _2933){
  expr->eval(_2932,_2931,_2933);
  int _2934 = _2932->popi32();
  int _2935 = _2932->popi32(_2934);
  std::shared_ptr< monty::ndarray< long long,1 > > _2936 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2934)));
  _checked_ptr_1<long long> _ptr__2936(_2936 ? _2936->raw() : nullptr,_2936 ? _2936->size(0) : 0);
  _ptr__2936[(_2934 - (int)1)] = (int)1;
  int _8222 = (int)1;
  int _8223 = _2934;
  for (int _2937 = _8222; _2937 < _8223; ++_2937)
  {
    {
      _ptr__2936[((_2934 - _2937) - (int)1)] = safe_mul( _ptr__2936[(_2934 - _2937)],((*mosek::fusion::p_WorkStack::_get_impl(_2932)->i32)((safe_add( _2935,_2934 ) - _2937))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2938 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2934)));
  _checked_ptr_1<int> _ptr__2938(_2938 ? _2938->raw() : nullptr,_2938 ? _2938->size(0) : 0);
  _ptr__2938[(_2934 - (int)1)] = (int)1;
  int _8224 = (int)1;
  int _8225 = _2934;
  for (int _2939 = _8224; _2939 < _8225; ++_2939)
  {
    {
      _ptr__2938[((_2934 - _2939) - (int)1)] = safe_mul( _ptr__2938[(_2934 - _2939)],((*mosek::fusion::p_WorkStack::_get_impl(_2932)->i32)(safe_add( _2935,((*dperm)((_2934 - _2939))) ))) );
    }
  }
  int _2940 = _2932->popi32();
  int _2941 = _2932->popi32();
  bool _2942 = (_2932->popi32() != (int)0);
  int _2943 = _2932->popi32(safe_add( _2940,(int)1 ));
  int _8226;
  bool _8227 = (!_2942);
  if (_8227)
  {
    _8226 = (-(int)1);
  }
  else
  {
    _8226 = _2932->popi64(_2940);
  }
  int _2944 = _8226;
  int _2945 = _2932->popi64(_2941);
  int _2946 = _2932->popf64(_2940);
  int _2947 = _2932->popf64(_2941);
  std::shared_ptr< monty::ndarray< int,1 > > _2948 = mosek::fusion::p_WorkStack::_get_impl(_2932)->i32;
  _checked_ptr_1<int> _ptr__2948(_2948 ? _2948->raw() : nullptr,_2948 ? _2948->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2949 = mosek::fusion::p_WorkStack::_get_impl(_2932)->i64;
  _checked_ptr_1<long long> _ptr__2949(_2949 ? _2949->raw() : nullptr,_2949 ? _2949->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2950 = mosek::fusion::p_WorkStack::_get_impl(_2932)->f64;
  _checked_ptr_1<double> _ptr__2950(_2950 ? _2950->raw() : nullptr,_2950 ? _2950->size(0) : 0);
  if (_2942)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2951 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2940)));
      _checked_ptr_1<long long> _ptr__2951(_2951 ? _2951->raw() : nullptr,_2951 ? _2951->size(0) : 0);
      {
        int _8228 = (int)0;
        int _8229 = _2940;
        for (int _2952 = _8228; _2952 < _8229; ++_2952)
        {
          {
            long long _2953 = (long long)0;
            int _8230 = (int)0;
            int _8231 = _2934;
            for (int _2954 = _8230; _2954 < _8231; ++_2954)
            {
              {
                _2953 += safe_mul( ((_ptr__2949[safe_add( _2944,_2952 )] / _ptr__2936[_2954]) % _ptr__2948[safe_add( _2935,_2954 )]),_ptr__2938[((*dperm)(_2954))] );
              }
            }
            _ptr__2951[_2952] = _2953;
          }
        }
      }
      std::vector<long long> _8232;
      for (int _2956 = (int)0, _8233 = _2940; _2956 < _8233 ; ++_2956)
      {
        _8232.push_back(_2956);
      }
      auto _8234 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8232.size()),_8232.begin(),_8232.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2955 = _8234;
      _checked_ptr_1<long long> _ptr__2955(_2955 ? _2955->raw() : nullptr,_2955 ? _2955->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2955,_2951,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2940));
      int _2957 = _2931->alloci32(safe_add( _2940,(int)1 ));
      int _2958 = _2931->alloci64(_2941);
      int _2959 = _2931->alloci64(_2940);
      int _2960 = _2931->allocf64(_2941);
      int _2961 = _2931->allocf64(_2940);
      _2931->pushi32((int)1);
      _2931->pushi32(_2941);
      _2931->pushi32(_2940);
      int _8235 = (int)0;
      int _8236 = _2934;
      for (int _2962 = _8235; _2962 < _8236; ++_2962)
      {
        {
          _2931->pushi32(_ptr__2948[safe_add( _2935,((*dperm)(_2962)) )]);
        }
      }
      _2931->pushi32(_2934);
      std::shared_ptr< monty::ndarray< int,1 > > _2963 = mosek::fusion::p_WorkStack::_get_impl(_2931)->i32;
      _checked_ptr_1<int> _ptr__2963(_2963 ? _2963->raw() : nullptr,_2963 ? _2963->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2964 = mosek::fusion::p_WorkStack::_get_impl(_2931)->i64;
      _checked_ptr_1<long long> _ptr__2964(_2964 ? _2964->raw() : nullptr,_2964 ? _2964->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2965 = mosek::fusion::p_WorkStack::_get_impl(_2931)->f64;
      _checked_ptr_1<double> _ptr__2965(_2965 ? _2965->raw() : nullptr,_2965 ? _2965->size(0) : 0);
      _ptr__2963[_2957] = (int)0;
      int _2966 = (int)0;
      int _2967 = (int)0;
      int _8237 = (int)0;
      int _8238 = _2940;
      for (int _2968 = _8237; _2968 < _8238; ++_2968)
      {
        {
          long long _2969 = _ptr__2955[_2968];
          int _8239 = _ptr__2948[safe_add( _2943,_2969 )];
          int _8240 = _ptr__2948[safe_add( safe_add( _2943,_2969 ),(int)1 )];
          for (int _2970 = _8239; _2970 < _8240; ++_2970)
          {
            {
              _ptr__2964[safe_add( _2958,_2967 )] = _ptr__2949[safe_add( _2945,_2970 )];
              _ptr__2965[safe_add( _2960,_2967 )] = _ptr__2950[safe_add( _2947,_2970 )];
              ++ _2967;
            }
          }
          _ptr__2964[safe_add( _2959,_2968 )] = _ptr__2951[_2969];
          _ptr__2965[safe_add( _2961,_2968 )] = _ptr__2950[safe_add( _2946,_2969 )];
          ++ _2966;
          _ptr__2963[safe_add( safe_add( _2957,_2968 ),(int)1 )] = _2967;
        }
      }
    }
  }
  else
  {
    {
      int _2971 = _2931->alloci32(safe_add( _2940,(int)1 ));
      int _2972 = _2931->alloci64(_2941);
      int _2973 = _2931->allocf64(_2941);
      int _2974 = _2931->allocf64(_2940);
      _2931->pushi32((int)0);
      _2931->pushi32(_2941);
      _2931->pushi32(_2940);
      int _8241 = (int)0;
      int _8242 = _2934;
      for (int _2975 = _8241; _2975 < _8242; ++_2975)
      {
        {
          _2931->pushi32(_ptr__2948[safe_add( _2935,((*dperm)(_2975)) )]);
        }
      }
      _2931->pushi32(_2934);
      std::shared_ptr< monty::ndarray< int,1 > > _2976 = mosek::fusion::p_WorkStack::_get_impl(_2931)->i32;
      _checked_ptr_1<int> _ptr__2976(_2976 ? _2976->raw() : nullptr,_2976 ? _2976->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2977 = mosek::fusion::p_WorkStack::_get_impl(_2931)->i64;
      _checked_ptr_1<long long> _ptr__2977(_2977 ? _2977->raw() : nullptr,_2977 ? _2977->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2978 = mosek::fusion::p_WorkStack::_get_impl(_2931)->f64;
      _checked_ptr_1<double> _ptr__2978(_2978 ? _2978->raw() : nullptr,_2978 ? _2978->size(0) : 0);
      _ptr__2976[_2971] = (int)0;
      int _2979 = (int)0;
      int _2980 = (int)0;
      int _8243 = (int)0;
      int _8244 = _2940;
      for (int _2981 = _8243; _2981 < _8244; ++_2981)
      {
        {
          long long _2982 = (long long)0;
          int _8245 = (int)0;
          int _8246 = _2934;
          for (int _2983 = _8245; _2983 < _8246; ++_2983)
          {
            {
              _2982 += safe_mul( ((_2981 / _ptr__2936[((*dperm)(_2983))]) % _ptr__2948[safe_add( _2935,((*dperm)(_2983)) )]),_ptr__2938[_2983] );
            }
          }
          int _8247 = _ptr__2948[safe_add( _2943,_2982 )];
          int _8248 = _ptr__2948[safe_add( safe_add( _2943,_2982 ),(int)1 )];
          for (int _2984 = _8247; _2984 < _8248; ++_2984)
          {
            {
              _ptr__2977[safe_add( _2972,_2980 )] = _ptr__2949[safe_add( _2945,_2984 )];
              _ptr__2978[safe_add( _2973,_2980 )] = _ptr__2950[safe_add( _2947,_2984 )];
              ++ _2980;
            }
          }
          _ptr__2978[safe_add( _2974,_2979 )] = _ptr__2950[safe_add( _2946,_2982 )];
          ++ _2979;
          _ptr__2976[safe_add( _2971,_2979 )] = _2980;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _2985,std::shared_ptr< monty::ndarray< int,1 > > _2986){
  _checked_ptr_1<int> _ptr__2985(_2985 ? _2985->raw() : nullptr, _2985 ? _2985->size(0) : 0);
  _checked_ptr_1<int> _ptr__2986(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
  std::vector<int> _8249;
  for (int _2987 = (int)0, _8250 = (int)((_2985)->size(0)); _2987 < _8250 ; ++_2987)
  {
    _8249.push_back(_ptr__2986[_ptr__2985[_2987]]);
  }
  auto _8251 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8249.size()),_8249.begin(),_8249.end()));
  return _8251;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2988){ return new mosek::fusion::ExprTranspose(_2988); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2988) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_2988); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2988){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_2988->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _2988;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2989,monty::rc_ptr< ::mosek::fusion::WorkStack > _2990,monty::rc_ptr< ::mosek::fusion::WorkStack > _2991) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_2989,_2990,_2991); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2989,monty::rc_ptr< ::mosek::fusion::WorkStack > _2990,monty::rc_ptr< ::mosek::fusion::WorkStack > _2991){
  expr->eval(_2990,_2989,_2991);
  _2990->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_2990)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _2992 = mosek::fusion::p_WorkStack::_get_impl(_2990)->shape_base;
      int _2993 = mosek::fusion::p_WorkStack::_get_impl(_2990)->nelem;
      int _2994 = mosek::fusion::p_WorkStack::_get_impl(_2990)->nnz;
      bool _2995 = mosek::fusion::p_WorkStack::_get_impl(_2990)->hassp;
      int _2996 = mosek::fusion::p_WorkStack::_get_impl(_2990)->ptr_base;
      int _2997 = mosek::fusion::p_WorkStack::_get_impl(_2990)->sp_base;
      int _2998 = mosek::fusion::p_WorkStack::_get_impl(_2990)->nidxs_base;
      int _2999 = mosek::fusion::p_WorkStack::_get_impl(_2990)->bfix_base;
      int _3000 = mosek::fusion::p_WorkStack::_get_impl(_2990)->cof_base;
      int _3001 = ((*mosek::fusion::p_WorkStack::_get_impl(_2990)->i32)(_2992));
      int _3002 = ((*mosek::fusion::p_WorkStack::_get_impl(_2990)->i32)(safe_add( _2992,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _3003 = mosek::fusion::p_WorkStack::_get_impl(_2990)->i32;
      _checked_ptr_1<int> _ptr__3003(_3003 ? _3003->raw() : nullptr,_3003 ? _3003->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3004 = mosek::fusion::p_WorkStack::_get_impl(_2990)->i64;
      _checked_ptr_1<long long> _ptr__3004(_3004 ? _3004->raw() : nullptr,_3004 ? _3004->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3005 = mosek::fusion::p_WorkStack::_get_impl(_2990)->f64;
      _checked_ptr_1<double> _ptr__3005(_3005 ? _3005->raw() : nullptr,_3005 ? _3005->size(0) : 0);
      _2989->alloc_expr((int)2,_2993,_2994,_2995);
      int _3006 = mosek::fusion::p_WorkStack::_get_impl(_2989)->ptr_base;
      int _3007 = mosek::fusion::p_WorkStack::_get_impl(_2989)->nidxs_base;
      int _3008 = mosek::fusion::p_WorkStack::_get_impl(_2989)->sp_base;
      int _3009 = mosek::fusion::p_WorkStack::_get_impl(_2989)->cof_base;
      int _3010 = mosek::fusion::p_WorkStack::_get_impl(_2989)->bfix_base;
      int _3011 = mosek::fusion::p_WorkStack::_get_impl(_2989)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _3012 = mosek::fusion::p_WorkStack::_get_impl(_2989)->i32;
      _checked_ptr_1<int> _ptr__3012(_3012 ? _3012->raw() : nullptr,_3012 ? _3012->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3013 = mosek::fusion::p_WorkStack::_get_impl(_2989)->i64;
      _checked_ptr_1<long long> _ptr__3013(_3013 ? _3013->raw() : nullptr,_3013 ? _3013->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3014 = mosek::fusion::p_WorkStack::_get_impl(_2989)->f64;
      _checked_ptr_1<double> _ptr__3014(_3014 ? _3014->raw() : nullptr,_3014 ? _3014->size(0) : 0);
      _ptr__3012[_3011] = _3002;
      _ptr__3012[safe_add( _3011,(int)1 )] = _3001;
      if (_2995)
      {
        {
          int _3015 = _2991->alloci32(_2993);
          int _3016 = _2991->alloci32(safe_add( _3002,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _3017 = mosek::fusion::p_WorkStack::_get_impl(_2991)->i32;
          _checked_ptr_1<int> _ptr__3017(_3017 ? _3017->raw() : nullptr,_3017 ? _3017->size(0) : 0);
          {
            int _8252 = (int)0;
            int _8253 = safe_add( _3002,(int)1 );
            for (int _3018 = _8252; _3018 < _8253; ++_3018)
            {
              {
                _ptr__3017[safe_add( _3016,_3018 )] = (int)0;
              }
            }
            int _8254 = (int)0;
            int _8255 = _2993;
            for (int _3019 = _8254; _3019 < _8255; ++_3019)
            {
              {
                ++ _ptr__3017[safe_add( safe_add( _3016,(_ptr__3004[safe_add( _2997,_3019 )] % _3002) ),(int)1 )];
              }
            }
            int _8256 = (int)0;
            int _8257 = _3002;
            for (int _3020 = _8256; _3020 < _8257; ++_3020)
            {
              {
                _ptr__3017[safe_add( safe_add( _3016,_3020 ),(int)1 )] += _ptr__3017[safe_add( _3016,_3020 )];
              }
            }
            int _8258 = (int)0;
            int _8259 = _2993;
            for (int _3021 = _8258; _3021 < _8259; ++_3021)
            {
              {
                long long _3022 = (_ptr__3004[safe_add( _2997,_3021 )] % _3002);
                _ptr__3017[safe_add( _3015,_ptr__3017[safe_add( _3016,_3022 )] )] = _3021;
                ++ _ptr__3017[safe_add( _3016,_3022 )];
              }
            }
            _ptr__3012[_3006] = (int)0;
            int _3023 = (int)0;
            int _8260 = (int)0;
            int _8261 = _2993;
            for (int _3024 = _8260; _3024 < _8261; ++_3024)
            {
              {
                int _3025 = _ptr__3017[safe_add( _3015,_3024 )];
                int _8262 = _ptr__3003[safe_add( _2996,_3025 )];
                int _8263 = _ptr__3003[safe_add( safe_add( _2996,_3025 ),(int)1 )];
                for (int _3026 = _8262; _3026 < _8263; ++_3026)
                {
                  {
                    _ptr__3013[safe_add( _3007,_3023 )] = _ptr__3004[safe_add( _2998,_3026 )];
                    _ptr__3014[safe_add( _3009,_3023 )] = _ptr__3005[safe_add( _3000,_3026 )];
                    ++ _3023;
                  }
                }
                long long _3027 = (_ptr__3004[safe_add( _2997,_3025 )] / _3002);
                long long _3028 = (_ptr__3004[safe_add( _2997,_3025 )] % _3002);
                _ptr__3012[safe_add( safe_add( _3006,_3024 ),(int)1 )] = _3023;
                _ptr__3013[safe_add( _3008,_3024 )] = safe_add( safe_mul( _3028,_3001 ),_3027 );
                _ptr__3014[safe_add( _3010,_3024 )] = _ptr__3005[safe_add( _2999,_3025 )];
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__3012[_3006] = (int)0;
          int _3029 = (int)0;
          int _3030 = (int)0;
          int _8264 = (int)0;
          int _8265 = _3002;
          for (int _3031 = _8264; _3031 < _8265; ++_3031)
          {
            {
              int _8266 = (int)0;
              int _8267 = _3001;
              for (int _3032 = _8266; _3032 < _8267; ++_3032)
              {
                {
                  int _3033 = safe_add( safe_mul( _3032,_3002 ),_3031 );
                  int _8268 = _ptr__3003[safe_add( _2996,_3033 )];
                  int _8269 = _ptr__3003[safe_add( safe_add( _2996,_3033 ),(int)1 )];
                  for (int _3034 = _8268; _3034 < _8269; ++_3034)
                  {
                    {
                      _ptr__3013[safe_add( _3007,_3029 )] = _ptr__3004[safe_add( _2998,_3034 )];
                      _ptr__3014[safe_add( _3009,_3029 )] = _ptr__3005[safe_add( _3000,_3034 )];
                      ++ _3029;
                    }
                  }
                  _ptr__3014[safe_add( _3010,_3030 )] = _ptr__3005[safe_add( _2999,_3033 )];
                  _ptr__3012[safe_add( safe_add( _3006,_3030 ),(int)1 )] = _3029;
                  ++ _3030;
                }
              }
            }
          }
        }
      }
      _2991->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _3035){
  _checked_ptr_1<int> _ptr__3035(_3035 ? _3035->raw() : nullptr, _3035 ? _3035->size(0) : 0);
  if (((int)((_3035)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__3035[(int)1]),(int)(_ptr__3035[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3036,    int _3037){ return new mosek::fusion::ExprStack(_3036,_3037); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3036,    int _3037) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_3036,_3037); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3036,    int _3037){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_3036,_3037));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8270;
    for (int _3038 = (int)0, _8271 = (int)((_3036)->size(0)); _3038 < _8271 ; ++_3038)
    {
      _8270.push_back(((*_3036)(_3038)));
    }
    auto _8272 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8270.size()),_8270.begin(),_8270.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _8272;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _3037;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3039,monty::rc_ptr< ::mosek::fusion::WorkStack > _3040,monty::rc_ptr< ::mosek::fusion::WorkStack > _3041) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_3039,_3040,_3041); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3039,monty::rc_ptr< ::mosek::fusion::WorkStack > _3040,monty::rc_ptr< ::mosek::fusion::WorkStack > _3041){
  int _3042 = (int)((exprs)->size(0));
  if ((_3042 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_3039,_3040,_3041);
    }
  }
  else
  {
    {
      int _8273 = (int)0;
      int _8274 = _3042;
      for (int _3043 = _8273; _3043 < _8274; ++_3043)
      {
        {
          ((*exprs)(((_3042 - _3043) - (int)1)))->eval(_3040,_3039,_3041);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3044 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3044(_3044 ? _3044->raw() : nullptr,_3044 ? _3044->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3045 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3045(_3045 ? _3045->raw() : nullptr,_3045 ? _3045->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3046 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3046(_3046 ? _3046->raw() : nullptr,_3046 ? _3046->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3047 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3047(_3047 ? _3047->raw() : nullptr,_3047 ? _3047->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _3048 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_3042)));
      std::shared_ptr< monty::ndarray< int,1 > > _3049 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3049(_3049 ? _3049->raw() : nullptr,_3049 ? _3049->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3050 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3050(_3050 ? _3050->raw() : nullptr,_3050 ? _3050->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3051(_3051 ? _3051->raw() : nullptr,_3051 ? _3051->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3052 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3052(_3052 ? _3052->raw() : nullptr,_3052 ? _3052->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3053 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3053(_3053 ? _3053->raw() : nullptr,_3053 ? _3053->size(0) : 0);
      int _8275 = (int)0;
      int _8276 = _3042;
      for (int _3054 = _8275; _3054 < _8276; ++_3054)
      {
        {
          _3040->pop_expr();
          _ptr__3044[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->nd;
          _ptr__3045[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->shape_base;
          _ptr__3046[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->nelem;
          _ptr__3047[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->nnz;
          ((*_3048)(_3054)) = mosek::fusion::p_WorkStack::_get_impl(_3040)->hassp;
          _ptr__3049[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->ptr_base;
          _ptr__3051[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->sp_base;
          _ptr__3050[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->nidxs_base;
          _ptr__3053[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->bfix_base;
          _ptr__3052[_3054] = mosek::fusion::p_WorkStack::_get_impl(_3040)->cof_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3055 = mosek::fusion::p_WorkStack::_get_impl(_3040)->i32;
      _checked_ptr_1<int> _ptr__3055(_3055 ? _3055->raw() : nullptr,_3055 ? _3055->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3056 = mosek::fusion::p_WorkStack::_get_impl(_3040)->i64;
      _checked_ptr_1<long long> _ptr__3056(_3056 ? _3056->raw() : nullptr,_3056 ? _3056->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3057 = mosek::fusion::p_WorkStack::_get_impl(_3040)->f64;
      _checked_ptr_1<double> _ptr__3057(_3057 ? _3057->raw() : nullptr,_3057 ? _3057->size(0) : 0);
      int _3058 = _ptr__3044[(int)0];
      int _3059 = _ptr__3045[(int)0];
      bool _3060 = (!((*_3048)((int)0)));
      bool _3061 = false;
      int _8277 = (int)1;
      int _8278 = _3042;
      for (int _3062 = _8277; _3062 < _8278; ++_3062)
      {
        {
          {
            _3061 = (_3061 || ((dim != _3062) && (_ptr__3044[_3062] != _3058)));
            if ((!_3061))
            {
              {
                int _8279 = (int)0;
                int _8280 = dim;
                for (int _3063 = _8279; _3063 < _8280; ++_3063)
                {
                  {
                    _3061 = (_3061 || (_ptr__3055[safe_add( _3059,_3063 )] != _ptr__3055[safe_add( _ptr__3045[_3062],_3063 )]));
                  }
                }
              }
            }
            {}
            if ((!_3061))
            {
              {
                int _8281 = safe_add( dim,(int)1 );
                int _8282 = _3058;
                for (int _3064 = _8281; _3064 < _8282; ++_3064)
                {
                  {
                    _3061 = (_3061 || (_ptr__3055[safe_add( _3059,_3064 )] != _ptr__3055[safe_add( _ptr__3045[_3062],_3064 )]));
                  }
                }
              }
            }
            {}
          }
          _3060 = (_3060 && (!((*_3048)(_3062))));
        }
      }
      if (_3061)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _3065 = (int)0;
      if ((dim < _3058))
      {
        {
          int _8283 = (int)0;
          int _8284 = _3042;
          for (int _3066 = _8283; _3066 < _8284; ++_3066)
          {
            {
              _3065 += _ptr__3055[safe_add( _ptr__3045[_3066],dim )];
            }
          }
        }
      }
      else
      {
        {
          _3065 = _3042;
        }
      }
      int _8285;
      bool _8286 = (dim < _3058);
      if (_8286)
      {
        _8285 = _3058;
      }
      else
      {
        _8285 = safe_add( _3058,(int)1 );
      }
      int _3067 = _8285;
      if ((_3067 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Oops!!"));
        }
      }
      {}
      int _3068 = (int)0;
      int _3069 = (int)0;
      {
        int _8287 = (int)0;
        int _8288 = _3042;
        for (int _3070 = _8287; _3070 < _8288; ++_3070)
        {
          {
            _3069 += _ptr__3047[_3070];
          }
        }
        int _8289 = (int)0;
        int _8290 = _3042;
        for (int _3071 = _8289; _3071 < _8290; ++_3071)
        {
          {
            _3068 += _ptr__3046[_3071];
          }
        }
      }
      int _3072 = (int)1;
      int _8291 = (int)0;
      int _8292 = dim;
      for (int _3073 = _8291; _3073 < _8292; ++_3073)
      {
        {
          _3072 *= _ptr__3055[safe_add( _3059,_3073 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _8293;
      bool _8294 = (dim < _3058);
      if (_8294)
      {
        std::vector<int> _8295;
        for (int _3075 = (int)0, _8296 = _3042; _3075 < _8296 ; ++_3075)
        {
          _8295.push_back(_ptr__3055[safe_add( _ptr__3045[_3075],dim )]);
        }
        auto _8297 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8295.size()),_8295.begin(),_8295.end()));
        _8293 = _8297;
      }
      else
      {
        std::vector<int> _8298;
        for (int _3076 = (int)0, _8299 = _3042; _3076 < _8299 ; ++_3076)
        {
          _8298.push_back((int)1);
        }
        auto _8300 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8298.size()),_8298.begin(),_8298.end()));
        _8293 = _8300;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3074 = _8293;
      _checked_ptr_1<int> _ptr__3074(_3074 ? _3074->raw() : nullptr,_3074 ? _3074->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3077 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3042)));
      _checked_ptr_1<int> _ptr__3077(_3077 ? _3077->raw() : nullptr,_3077 ? _3077->size(0) : 0);
      _ptr__3077[(int)0] = (int)0;
      int _8301 = (int)1;
      int _8302 = _3042;
      for (int _3078 = _8301; _3078 < _8302; ++_3078)
      {
        {
          _ptr__3077[_3078] = safe_add( _ptr__3077[(_3078 - (int)1)],_ptr__3074[(_3078 - (int)1)] );
        }
      }
      int _3079 = (int)0;
      int _8303 = (int)0;
      int _8304 = _3042;
      for (int _3080 = _8303; _3080 < _8304; ++_3080)
      {
        {
          _3079 += _ptr__3074[_3080];
        }
      }
      int _3081 = (int)1;
      int _8305 = safe_add( dim,(int)1 );
      int _8306 = _3058;
      for (int _3082 = _8305; _3082 < _8306; ++_3082)
      {
        {
          _3081 *= _ptr__3055[safe_add( _3059,_3082 )];
        }
      }
      if (_3060)
      {
        {
          _3039->alloc_expr(_3067,_3068,_3069,false);
          int _3083 = mosek::fusion::p_WorkStack::_get_impl(_3039)->ptr_base;
          int _3084 = mosek::fusion::p_WorkStack::_get_impl(_3039)->shape_base;
          int _3085 = mosek::fusion::p_WorkStack::_get_impl(_3039)->nidxs_base;
          int _3086 = mosek::fusion::p_WorkStack::_get_impl(_3039)->cof_base;
          int _3087 = mosek::fusion::p_WorkStack::_get_impl(_3039)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3088 = mosek::fusion::p_WorkStack::_get_impl(_3039)->i32;
          _checked_ptr_1<int> _ptr__3088(_3088 ? _3088->raw() : nullptr,_3088 ? _3088->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3089 = mosek::fusion::p_WorkStack::_get_impl(_3039)->i64;
          _checked_ptr_1<long long> _ptr__3089(_3089 ? _3089->raw() : nullptr,_3089 ? _3089->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3090 = mosek::fusion::p_WorkStack::_get_impl(_3039)->f64;
          _checked_ptr_1<double> _ptr__3090(_3090 ? _3090->raw() : nullptr,_3090 ? _3090->size(0) : 0);
          int _8307 = (int)0;
          int _8308 = _3058;
          for (int _3091 = _8307; _3091 < _8308; ++_3091)
          {
            {
              _ptr__3088[safe_add( _3084,_3091 )] = _ptr__3055[safe_add( _3059,_3091 )];
            }
          }
          _ptr__3088[safe_add( _3084,dim )] = _3065;
          {
            _ptr__3088[_3083] = (int)0;
            {
              int _3092 = (int)0;
              int _8309 = (int)0;
              int _8310 = _3042;
              for (int _3093 = _8309; _3093 < _8310; ++_3093)
              {
                {
                  int _3094 = _ptr__3049[_3093];
                  int _3095 = (int)0;
                  int _8311 = (int)0;
                  int _8312 = _3072;
                  for (int _3096 = _8311; _3096 < _8312; ++_3096)
                  {
                    {
                      int _8313 = (int)0;
                      int _8314 = _ptr__3074[_3093];
                      for (int _3097 = _8313; _3097 < _8314; ++_3097)
                      {
                        {
                          int _8315 = (int)0;
                          int _8316 = _3081;
                          for (int _3098 = _8315; _3098 < _8316; ++_3098)
                          {
                            {
                              int _3099 = safe_add( safe_add( _3098,safe_mul( safe_add( _3097,_3092 ),_3081 ) ),safe_mul( safe_mul( _3096,_3079 ),_3081 ) );
                              int _3100 = (_ptr__3055[safe_add( safe_add( _3094,_3095 ),(int)1 )] - _ptr__3055[safe_add( _3094,_3095 )]);
                              _ptr__3088[safe_add( safe_add( _3083,_3099 ),(int)1 )] = _3100;
                              _ptr__3090[safe_add( _3087,_3099 )] = _ptr__3057[safe_add( _ptr__3053[_3093],_3095 )];
                              ++ _3095;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3092 += _ptr__3074[_3093];
                }
              }
              int _8317 = (int)0;
              int _8318 = _3068;
              for (int _3101 = _8317; _3101 < _8318; ++_3101)
              {
                {
                  _ptr__3088[safe_add( safe_add( _3083,_3101 ),(int)1 )] += _ptr__3088[safe_add( _3083,_3101 )];
                }
              }
            }
            {
              int _3102 = (int)0;
              int _8319 = (int)0;
              int _8320 = _3042;
              for (int _3103 = _8319; _3103 < _8320; ++_3103)
              {
                {
                  int _3104 = _ptr__3049[_3103];
                  int _3105 = (int)0;
                  int _8321 = (int)0;
                  int _8322 = _3072;
                  for (int _3106 = _8321; _3106 < _8322; ++_3106)
                  {
                    {
                      int _8323 = (int)0;
                      int _8324 = _ptr__3074[_3103];
                      for (int _3107 = _8323; _3107 < _8324; ++_3107)
                      {
                        {
                          int _8325 = (int)0;
                          int _8326 = _3081;
                          for (int _3108 = _8325; _3108 < _8326; ++_3108)
                          {
                            {
                              int _3109 = safe_add( safe_add( _3108,safe_mul( safe_add( _3107,_3102 ),_3081 ) ),safe_mul( safe_mul( _3106,_3079 ),_3081 ) );
                              int _3110 = _ptr__3055[safe_add( _3104,_3105 )];
                              int _3111 = (_ptr__3055[safe_add( safe_add( _3104,_3105 ),(int)1 )] - _3110);
                              int _8327 = (int)0;
                              int _8328 = _3111;
                              for (int _3112 = _8327; _3112 < _8328; ++_3112)
                              {
                                {
                                  _ptr__3089[safe_add( safe_add( _3085,_ptr__3088[safe_add( _3083,_3109 )] ),_3112 )] = _ptr__3056[safe_add( safe_add( _ptr__3050[_3103],_3110 ),_3112 )];
                                }
                              }
                              int _8329 = (int)0;
                              int _8330 = _3111;
                              for (int _3113 = _8329; _3113 < _8330; ++_3113)
                              {
                                {
                                  _ptr__3090[safe_add( safe_add( _3086,_ptr__3088[safe_add( _3083,_3109 )] ),_3113 )] = _ptr__3057[safe_add( safe_add( _ptr__3052[_3103],_3110 ),_3113 )];
                                }
                              }
                              ++ _3105;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3102 += _ptr__3074[_3103];
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3114 = (int)1;
          int _8331 = (int)0;
          int _8332 = dim;
          for (int _3115 = _8331; _3115 < _8332; ++_3115)
          {
            {
              _3114 *= _ptr__3055[safe_add( _3059,_3115 )];
            }
          }
          _3114 *= _3065;
          int _8333 = safe_add( dim,(int)1 );
          int _8334 = _3058;
          for (int _3116 = _8333; _3116 < _8334; ++_3116)
          {
            {
              _3114 *= _ptr__3055[safe_add( _3059,_3116 )];
            }
          }
          bool _3117 = (_3068 < _3114);
          _3039->alloc_expr(_3067,_3068,_3069,_3117);
          int _3118 = mosek::fusion::p_WorkStack::_get_impl(_3039)->ptr_base;
          int _3119 = mosek::fusion::p_WorkStack::_get_impl(_3039)->nidxs_base;
          int _8335;
          bool _8336 = _3117;
          if (_8336)
          {
            _8335 = mosek::fusion::p_WorkStack::_get_impl(_3039)->sp_base;
          }
          else
          {
            _8335 = _3039->alloci64(_3068);
          }
          int _3120 = _8335;
          int _3121 = mosek::fusion::p_WorkStack::_get_impl(_3039)->cof_base;
          int _3122 = mosek::fusion::p_WorkStack::_get_impl(_3039)->bfix_base;
          int _3123 = mosek::fusion::p_WorkStack::_get_impl(_3039)->shape_base;
          int _8337 = (int)0;
          int _8338 = _3058;
          for (int _3124 = _8337; _3124 < _8338; ++_3124)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_3039)->i32)(safe_add( _3123,_3124 ))) = _ptr__3055[safe_add( _3059,_3124 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_3039)->i32)(safe_add( _3123,dim ))) = _3065;
          int _3125 = _3041->alloci32(safe_add( _3068,(int)1 ));
          int _3126 = _3041->alloci64(_3069);
          int _3127 = _3041->alloci64(_3068);
          int _3128 = _3041->allocf64(_3069);
          int _3129 = _3041->allocf64(_3068);
          std::shared_ptr< monty::ndarray< int,1 > > _3130 = mosek::fusion::p_WorkStack::_get_impl(_3039)->i32;
          _checked_ptr_1<int> _ptr__3130(_3130 ? _3130->raw() : nullptr,_3130 ? _3130->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3131 = mosek::fusion::p_WorkStack::_get_impl(_3039)->i64;
          _checked_ptr_1<long long> _ptr__3131(_3131 ? _3131->raw() : nullptr,_3131 ? _3131->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3132 = mosek::fusion::p_WorkStack::_get_impl(_3039)->f64;
          _checked_ptr_1<double> _ptr__3132(_3132 ? _3132->raw() : nullptr,_3132 ? _3132->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _3133 = mosek::fusion::p_WorkStack::_get_impl(_3041)->i32;
          _checked_ptr_1<int> _ptr__3133(_3133 ? _3133->raw() : nullptr,_3133 ? _3133->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3134 = mosek::fusion::p_WorkStack::_get_impl(_3041)->i64;
          _checked_ptr_1<long long> _ptr__3134(_3134 ? _3134->raw() : nullptr,_3134 ? _3134->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3135 = mosek::fusion::p_WorkStack::_get_impl(_3041)->f64;
          _checked_ptr_1<double> _ptr__3135(_3135 ? _3135->raw() : nullptr,_3135 ? _3135->size(0) : 0);
          {
            int _3136 = (int)0;
            int _3137 = (int)0;
            int _8339 = (int)0;
            int _8340 = _3042;
            for (int _3138 = _8339; _3138 < _8340; ++_3138)
            {
              {
                ::mosek::fusion::Utils::Tools::arraycopy(_3056,_ptr__3050[_3138],_3134,safe_add( _3126,_3137 ),_ptr__3047[_3138]);
                ::mosek::fusion::Utils::Tools::arraycopy(_3057,_ptr__3052[_3138],_3135,safe_add( _3128,_3137 ),_ptr__3047[_3138]);
                ::mosek::fusion::Utils::Tools::arraycopy(_3057,_ptr__3053[_3138],_3135,safe_add( _3129,_3136 ),_ptr__3046[_3138]);
                _3137 += _ptr__3047[_3138];
                _3136 += _ptr__3046[_3138];
              }
            }
          }
          {
            _ptr__3133[_3125] = (int)0;
            int _3139 = (int)0;
            int _3140 = (int)0;
            int _8341 = (int)0;
            int _8342 = _3042;
            for (int _3141 = _8341; _3141 < _8342; ++_3141)
            {
              {
                int _3142 = _ptr__3074[_3141];
                int _3143 = safe_mul( _3142,_3081 );
                int _3144 = _3081;
                if (((*_3048)(_3141)))
                {
                  {
                    int _8343 = (int)0;
                    int _8344 = _ptr__3046[_3141];
                    for (int _3145 = _8343; _3145 < _8344; ++_3145)
                    {
                      {
                        long long _3146 = (_ptr__3056[safe_add( _ptr__3051[_3141],_3145 )] / _3143);
                        long long _3147 = ((_ptr__3056[safe_add( _ptr__3051[_3141],_3145 )] / _3144) % _3142);
                        long long _3148 = (_ptr__3056[safe_add( _ptr__3051[_3141],_3145 )] % _3081);
                        _ptr__3134[safe_add( _3127,_3140 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3146,_3065 ),_3147 ),_ptr__3077[_3141] ),_3081 ),_3148 );
                        _ptr__3133[safe_add( safe_add( _3125,_3140 ),(int)1 )] = safe_add( _3139,_ptr__3055[safe_add( safe_add( _ptr__3049[_3141],_3145 ),(int)1 )] );
                        ++ _3140;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _3149 = (int)0;
                    int _8345 = (int)0;
                    int _8346 = _3072;
                    for (int _3150 = _8345; _3150 < _8346; ++_3150)
                    {
                      {
                        int _8347 = (int)0;
                        int _8348 = _3142;
                        for (int _3151 = _8347; _3151 < _8348; ++_3151)
                        {
                          {
                            int _8349 = (int)0;
                            int _8350 = _3081;
                            for (int _3152 = _8349; _3152 < _8350; ++_3152)
                            {
                              {
                                _ptr__3134[safe_add( _3127,_3140 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3150,_3065 ),_3151 ),_ptr__3077[_3141] ),_3081 ),_3152 );
                                _ptr__3133[safe_add( safe_add( _3125,_3140 ),(int)1 )] = safe_add( _3139,_ptr__3055[safe_add( safe_add( _ptr__3049[_3141],_3149 ),(int)1 )] );
                                ++ _3140;
                                ++ _3149;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _3139 += _ptr__3047[_3141];
              }
            }
          }
          if ((dim > (int)0))
          {
            {
              int _3153 = (int)0;
              int _8351 = (int)0;
              int _8352 = _3067;
              for (int _3154 = _8351; _3154 < _8352; ++_3154)
              {
                {
                  if ((_3153 < _ptr__3130[safe_add( _3123,_3154 )]))
                  {
                    {
                      _3153 = _ptr__3130[safe_add( _3123,_3154 )];
                    }
                  }
                  {}
                }
              }
              std::shared_ptr< monty::ndarray< long long,1 > > _3155 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3067)));
              _checked_ptr_1<long long> _ptr__3155(_3155 ? _3155->raw() : nullptr,_3155 ? _3155->size(0) : 0);
              _ptr__3155[(_3067 - (int)1)] = (int)1;
              int _8353 = (int)1;
              int _8354 = _3067;
              for (int _3156 = _8353; _3156 < _8354; ++_3156)
              {
                {
                  _ptr__3155[((_3067 - _3156) - (int)1)] = safe_mul( _ptr__3155[(_3067 - _3156)],_ptr__3130[(safe_add( _3123,_3067 ) - _3156)] );
                }
              }
              int _3157 = _3041->alloci32(_3068);
              int _3158 = _3041->alloci32(_3068);
              int _3159 = _3041->alloci32(safe_add( _3153,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _3160 = mosek::fusion::p_WorkStack::_get_impl(_3041)->i32;
              _checked_ptr_1<int> _ptr__3160(_3160 ? _3160->raw() : nullptr,_3160 ? _3160->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _3161 = mosek::fusion::p_WorkStack::_get_impl(_3041)->i64;
              _checked_ptr_1<long long> _ptr__3161(_3161 ? _3161->raw() : nullptr,_3161 ? _3161->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _3162 = mosek::fusion::p_WorkStack::_get_impl(_3041)->f64;
              _checked_ptr_1<double> _ptr__3162(_3162 ? _3162->raw() : nullptr,_3162 ? _3162->size(0) : 0);
              {
                int _8355 = (int)0;
                int _8356 = _3068;
                for (int _3163 = _8355; _3163 < _8356; ++_3163)
                {
                  {
                    _ptr__3160[safe_add( _3157,_3163 )] = _3163;
                  }
                }
                int _8357 = (int)0;
                int _8358 = _3067;
                for (int _3164 = _8357; _3164 < _8358; ++_3164)
                {
                  {
                    int _3165 = ((_3067 - _3164) - (int)1);
                    int _3166 = _ptr__3130[safe_add( _3123,_3165 )];
                    int _8359 = (int)0;
                    int _8360 = safe_add( _3166,(int)1 );
                    for (int _3167 = _8359; _3167 < _8360; ++_3167)
                    {
                      {
                        _ptr__3160[safe_add( _3159,_3167 )] = (int)0;
                      }
                    }
                    int _8361 = (int)0;
                    int _8362 = _3068;
                    for (int _3168 = _8361; _3168 < _8362; ++_3168)
                    {
                      {
                        int _3169 = _ptr__3160[safe_add( _3157,_3168 )];
                        long long _3170 = ((_ptr__3161[safe_add( _3127,_3169 )] / _ptr__3155[_3165]) % _3166);
                        ++ _ptr__3160[safe_add( safe_add( _3159,_3170 ),(int)1 )];
                      }
                    }
                    {
                      int _8363 = (int)0;
                      int _8364 = _3166;
                      for (int _3171 = _8363; _3171 < _8364; ++_3171)
                      {
                        {
                          _ptr__3160[safe_add( safe_add( _3159,_3171 ),(int)1 )] += _ptr__3160[safe_add( _3159,_3171 )];
                        }
                      }
                      int _8365 = (int)0;
                      int _8366 = _3068;
                      for (int _3172 = _8365; _3172 < _8366; ++_3172)
                      {
                        {
                          int _3173 = _ptr__3160[safe_add( _3157,_3172 )];
                          long long _3174 = ((_ptr__3161[safe_add( _3127,_3173 )] / _ptr__3155[_3165]) % _3166);
                          _ptr__3160[safe_add( _3158,_ptr__3160[safe_add( _3159,_3174 )] )] = _3173;
                          ++ _ptr__3160[safe_add( _3159,_3174 )];
                        }
                      }
                    }
                    int _3175 = _3157;
                    _3157 = _3158;
                    _3158 = _3175;
                  }
                }
                int _3176 = (int)0;
                _ptr__3130[_3118] = (int)0;
                int _8367 = (int)0;
                int _8368 = _3068;
                for (int _3177 = _8367; _3177 < _8368; ++_3177)
                {
                  {
                    int _3178 = _ptr__3160[safe_add( _3157,_3177 )];
                    int _3179 = _ptr__3160[safe_add( _3125,_3178 )];
                    int _3180 = _ptr__3160[safe_add( safe_add( _3125,_3178 ),(int)1 )];
                    int _3181 = (_3180 - _3179);
                    _ptr__3130[safe_add( safe_add( _3118,_3177 ),(int)1 )] = safe_add( _ptr__3130[safe_add( _3118,_3177 )],_3181 );
                    _ptr__3132[safe_add( _3122,_3177 )] = _ptr__3162[safe_add( _3129,_3178 )];
                    _ptr__3131[safe_add( _3120,_3177 )] = _ptr__3161[safe_add( _3127,_3178 )];
                    int _8369 = _3179;
                    int _8370 = _3180;
                    for (int _3182 = _8369; _3182 < _8370; ++_3182)
                    {
                      {
                        _ptr__3131[safe_add( _3119,_3176 )] = _ptr__3161[safe_add( _3126,_3182 )];
                        _ptr__3132[safe_add( _3121,_3176 )] = _ptr__3162[safe_add( _3128,_3182 )];
                        ++ _3176;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              int _3183 = (int)0;
              _ptr__3130[_3118] = (int)0;
              int _8371 = (int)0;
              int _8372 = _3068;
              for (int _3184 = _8371; _3184 < _8372; ++_3184)
              {
                {
                  int _3185 = _ptr__3133[safe_add( _3125,_3184 )];
                  int _3186 = _ptr__3133[safe_add( safe_add( _3125,_3184 ),(int)1 )];
                  int _3187 = (_3186 - _3185);
                  _ptr__3130[safe_add( safe_add( _3118,_3184 ),(int)1 )] = safe_add( _ptr__3130[safe_add( _3118,_3184 )],_3187 );
                  _ptr__3132[safe_add( _3122,_3184 )] = _ptr__3135[safe_add( _3129,_3184 )];
                  _ptr__3131[safe_add( _3120,_3184 )] = _ptr__3134[safe_add( _3127,_3184 )];
                  int _8373 = _3185;
                  int _8374 = _3186;
                  for (int _3188 = _8373; _3188 < _8374; ++_3188)
                  {
                    {
                      _ptr__3131[safe_add( _3119,_3183 )] = _ptr__3134[safe_add( _3126,_3188 )];
                      _ptr__3132[safe_add( _3121,_3183 )] = _ptr__3135[safe_add( _3128,_3188 )];
                      ++ _3183;
                    }
                  }
                }
              }
            }
          }
          if ((!_3117))
          {
            {
              _3039->popi64(_3068);
            }
          }
          {}
          _3041->clear();
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3189,int _3190){
  if (((int)((_3189)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_3189)->size(0)) == (int)1))
  {
    {
      return ((*_3189)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _8375;
      for (int _3192 = (int)0, _8376 = (int)((_3189)->size(0)); _3192 < _8376 ; ++_3192)
      {
        _8375.push_back(((*_3189)(_3192))->getShape());
      }
      auto _8377 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_8375.size()),_8375.begin(),_8375.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _3191 = _8377;
      std::shared_ptr< monty::ndarray< int,1 > > _3193 = ((*_3191)((int)0));
      _checked_ptr_1<int> _ptr__3193(_3193 ? _3193->raw() : nullptr,_3193 ? _3193->size(0) : 0);
      int _3194 = (int)((_3193)->size(0));
      int _8378 = (int)1;
      int _8379 = (int)((_3191)->size(0));
      for (int _3195 = _8378; _3195 < _8379; ++_3195)
      {
        {
          if ((_3194 != (int)((((*_3191)(_3195)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _8380 = (int)0;
          int _8381 = _3190;
          for (int _3196 = _8380; _3196 < _8381; ++_3196)
          {
            {
              if ((_ptr__3193[_3196] != ((*((*_3191)(_3195)))(_3196))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _8382 = safe_add( _3190,(int)1 );
          int _8383 = _3194;
          for (int _3197 = _8382; _3197 < _8383; ++_3197)
          {
            {
              if ((_ptr__3193[_3197] != ((*((*_3191)(_3195)))(_3197))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_3190 == _3194))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3198 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3194,(int)1 ))));
          _checked_ptr_1<int> _ptr__3198(_3198 ? _3198->raw() : nullptr,_3198 ? _3198->size(0) : 0);
          int _8384 = (int)0;
          int _8385 = _3194;
          for (int _3199 = _8384; _3199 < _8385; ++_3199)
          {
            {
              _ptr__3198[_3199] = _ptr__3193[_3199];
            }
          }
          _ptr__3198[_3194] = (int)((_3191)->size(0));
          return _3198;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3200 = _3193;
          _checked_ptr_1<int> _ptr__3200(_3200 ? _3200->raw() : nullptr,_3200 ? _3200->size(0) : 0);
          int _8386 = (int)1;
          int _8387 = (int)((_3191)->size(0));
          for (int _3201 = _8386; _3201 < _8387; ++_3201)
          {
            {
              _ptr__3200[_3190] += ((*((*_3191)(_3201)))(_3190));
            }
          }
          return _3200;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3202 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _8388 = (int)1;
  int _8389 = (int)((exprs)->size(0));
  for (int _3203 = _8388; _3203 < _8389; ++_3203)
  {
    {
      _3202->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_3203))->toString());
    }
  }
  _3202->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _3202->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3204,    std::shared_ptr< monty::ndarray< long long,1 > > _3205,    std::shared_ptr< monty::ndarray< double,1 > > _3206){ return new mosek::fusion::ExprInner(_3204,_3205,_3206); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3204,    std::shared_ptr< monty::ndarray< long long,1 > > _3205,    std::shared_ptr< monty::ndarray< double,1 > > _3206) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3204,_3205,_3206); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3204,    std::shared_ptr< monty::ndarray< long long,1 > > _3205,    std::shared_ptr< monty::ndarray< double,1 > > _3206){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__3205(_3205 ? _3205->raw() : nullptr, _3205 ? _3205->size(0) : 0);
    _checked_ptr_1<double> _ptr__3206(_3206 ? _3206->raw() : nullptr, _3206 ? _3206->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _3204;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _3205;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _3206;
    if (((int)((_3205)->size(0)) != (int)((_3206)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _3207 = _3204->getShape();
    _checked_ptr_1<int> _ptr__3207(_3207 ? _3207->raw() : nullptr,_3207 ? _3207->size(0) : 0);
    long long _3208 = ::mosek::fusion::p_Set::size(_3207);
    bool _3209 = false;
    bool _3210 = false;
    {
      int _8390 = (int)1;
      int _8391 = (int)((_3205)->size(0));
      for (int _3211 = _8390; _3211 < _8391; ++_3211)
      {
        {
          if ((_ptr__3205[_3211] <= _ptr__3205[(_3211 - (int)1)]))
          {
            {
              _3209 = true;
            }
          }
          {}
        }
      }
      if (((int)((_3205)->size(0)) > (int)0))
      {
        {
          if (((_ptr__3205[(int)0] < (int)0) || (_ptr__3205[((int)((_3205)->size(0)) - (int)1)] > _3208)))
          {
            {
              _3210 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_3209)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_3210)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3212,    std::shared_ptr< monty::ndarray< double,1 > > _3213){ return new mosek::fusion::ExprInner(_3212,_3213); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3212,    std::shared_ptr< monty::ndarray< double,1 > > _3213) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3212,_3213); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3212,    std::shared_ptr< monty::ndarray< double,1 > > _3213){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3213(_3213 ? _3213->raw() : nullptr, _3213 ? _3213->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3212,::mosek::fusion::p_ExprInner::range((int)((_3213)->size(0))),_3213);
    std::shared_ptr< monty::ndarray< int,1 > > _3214 = _3212->getShape();
    _checked_ptr_1<int> _ptr__3214(_3214 ? _3214->raw() : nullptr,_3214 ? _3214->size(0) : 0);
    if ((((int)((_3214)->size(0)) != (int)1) || (_ptr__3214[(int)0] != (int)((_3213)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3215,    std::shared_ptr< monty::ndarray< int,2 > > _3216,    std::shared_ptr< monty::ndarray< double,1 > > _3217){ return new mosek::fusion::ExprInner(_3215,_3216,_3217); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3215,    std::shared_ptr< monty::ndarray< int,2 > > _3216,    std::shared_ptr< monty::ndarray< double,1 > > _3217) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3215,_3216,_3217); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3215,    std::shared_ptr< monty::ndarray< int,2 > > _3216,    std::shared_ptr< monty::ndarray< double,1 > > _3217){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3217(_3217 ? _3217->raw() : nullptr, _3217 ? _3217->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3215,::mosek::fusion::p_ExprInner::convert(_3215->getShape(),_3216),_3217);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3218,monty::rc_ptr< ::mosek::fusion::WorkStack > _3219,monty::rc_ptr< ::mosek::fusion::WorkStack > _3220) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_3218,_3219,_3220); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3218,monty::rc_ptr< ::mosek::fusion::WorkStack > _3219,monty::rc_ptr< ::mosek::fusion::WorkStack > _3220){
  expr->eval(_3219,_3218,_3220);
  int _3221 = _3219->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _3222 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3221)));
  _checked_ptr_1<int> _ptr__3222(_3222 ? _3222->raw() : nullptr,_3222 ? _3222->size(0) : 0);
  _3219->popi32(_3221,_3222,(int)0);
  int _3223 = _3219->popi32();
  int _3224 = _3219->popi32();
  bool _3225 = (_3219->popi32() != (int)0);
  int _3226 = _3219->popi32(safe_add( _3223,(int)1 ));
  int _8392;
  bool _8393 = _3225;
  if (_8393)
  {
    _8392 = _3219->popi64(_3223);
  }
  else
  {
    _8392 = (int)0;
  }
  int _3227 = _8392;
  int _3228 = _3219->popi64(_3224);
  int _3229 = _3219->popf64(_3223);
  int _3230 = _3219->popf64(_3224);
  std::shared_ptr< monty::ndarray< int,1 > > _3231 = mosek::fusion::p_WorkStack::_get_impl(_3219)->i32;
  _checked_ptr_1<int> _ptr__3231(_3231 ? _3231->raw() : nullptr,_3231 ? _3231->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3232 = mosek::fusion::p_WorkStack::_get_impl(_3219)->i64;
  _checked_ptr_1<long long> _ptr__3232(_3232 ? _3232->raw() : nullptr,_3232 ? _3232->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3233 = mosek::fusion::p_WorkStack::_get_impl(_3219)->f64;
  _checked_ptr_1<double> _ptr__3233(_3233 ? _3233->raw() : nullptr,_3233 ? _3233->size(0) : 0);
  int _3234 = (int)0;
  if (_3225)
  {
    {
      int _3235 = (int)0;
      int _3236 = (int)0;
      while ( ((_3236 < (int)((vsub)->size(0))) && (_3235 < _3223)) )
      {
        {
          if ((_ptr__3232[safe_add( _3227,_3235 )] < ((*vsub)(_3236))))
          {
            {
              ++ _3235;
            }
          }
          else if((_ptr__3232[safe_add( _3227,_3235 )] > ((*vsub)(_3236))))
          {
            {
              ++ _3236;
            }
          }
          else
          {
            {
              _3234 += (_ptr__3231[safe_add( safe_add( _3226,_3235 ),(int)1 )] - _ptr__3231[safe_add( _3226,_3235 )]);
              ++ _3236;
              ++ _3235;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8394 = (int)0;
      int _8395 = (int)((vsub)->size(0));
      for (int _3237 = _8394; _3237 < _8395; ++_3237)
      {
        {
          _3234 += (_ptr__3231[safe_add( safe_add( _3226,((*vsub)(_3237)) ),(int)1 )] - _ptr__3231[safe_add( _3226,((*vsub)(_3237)) )]);
        }
      }
    }
  }
  int _3238 = _3218->alloci32((int)2);
  int _3239 = _3218->alloci64(_3234);
  int _3240 = _3218->allocf64(_3234);
  int _3241 = _3218->allocf64((int)1);
  _3218->pushi32((int)0);
  _3218->pushi32(_3234);
  _3218->pushi32((int)1);
  _3218->pushi32((int)0);
  std::shared_ptr< monty::ndarray< int,1 > > _3242 = mosek::fusion::p_WorkStack::_get_impl(_3218)->i32;
  _checked_ptr_1<int> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3243 = mosek::fusion::p_WorkStack::_get_impl(_3218)->i64;
  _checked_ptr_1<long long> _ptr__3243(_3243 ? _3243->raw() : nullptr,_3243 ? _3243->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3244 = mosek::fusion::p_WorkStack::_get_impl(_3218)->f64;
  _checked_ptr_1<double> _ptr__3244(_3244 ? _3244->raw() : nullptr,_3244 ? _3244->size(0) : 0);
  _ptr__3242[_3238] = (int)0;
  _ptr__3242[safe_add( _3238,(int)1 )] = _3234;
  int _3245 = (int)0;
  double _3246 = 0.0;
  if (_3225)
  {
    {
      int _3247 = (int)0;
      int _3248 = (int)0;
      while ( ((_3248 < (int)((vsub)->size(0))) && (_3247 < _3223)) )
      {
        {
          if ((_ptr__3232[safe_add( _3227,_3247 )] < ((*vsub)(_3248))))
          {
            {
              ++ _3247;
            }
          }
          else if((_ptr__3232[safe_add( _3227,_3247 )] > ((*vsub)(_3248))))
          {
            {
              ++ _3248;
            }
          }
          else
          {
            {
              int _3249 = _ptr__3231[safe_add( _3226,_3247 )];
              int _3250 = _ptr__3231[safe_add( safe_add( _3226,_3247 ),(int)1 )];
              int _8396 = _3249;
              int _8397 = _3250;
              for (int _3251 = _8396; _3251 < _8397; ++_3251)
              {
                {
                  _ptr__3243[safe_add( _3239,_3245 )] = _ptr__3232[safe_add( _3228,_3251 )];
                  _ptr__3244[safe_add( _3240,_3245 )] = (((*vcof)(_3248)) * _ptr__3233[safe_add( _3230,_3251 )]);
                  ++ _3245;
                }
              }
              _3246 += (((*vcof)(_3248)) * _ptr__3233[safe_add( _3229,_3247 )]);
              ++ _3248;
              ++ _3247;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8398 = (int)0;
      int _8399 = (int)((vsub)->size(0));
      for (int _3252 = _8398; _3252 < _8399; ++_3252)
      {
        {
          int _3253 = _ptr__3231[safe_add( _3226,((*vsub)(_3252)) )];
          int _3254 = _ptr__3231[safe_add( safe_add( _3226,((*vsub)(_3252)) ),(int)1 )];
          int _8400 = _3253;
          int _8401 = _3254;
          for (int _3255 = _8400; _3255 < _8401; ++_3255)
          {
            {
              _ptr__3243[safe_add( _3239,_3245 )] = _ptr__3232[safe_add( _3228,_3255 )];
              _ptr__3244[safe_add( _3240,_3245 )] = (((*vcof)(_3252)) * _ptr__3233[safe_add( _3230,_3255 )]);
              ++ _3245;
            }
          }
          _3246 += (((*vcof)(_3252)) * _ptr__3233[safe_add( _3229,((*vsub)(_3252)) )]);
        }
      }
    }
  }
  _ptr__3244[_3241] = _3246;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _3256){
  std::vector<long long> _8402;
  for (int _3257 = (int)0, _8403 = _3256; _3257 < _8403 ; ++_3257)
  {
    _8402.push_back(_3257);
  }
  auto _8404 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8402.size()),_8402.begin(),_8402.end()));
  return _8404;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _3258,std::shared_ptr< monty::ndarray< int,2 > > _3259){
  _checked_ptr_1<int> _ptr__3258(_3258 ? _3258->raw() : nullptr, _3258 ? _3258->size(0) : 0);
  int _3260 = (int)((_3258)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _3261 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3260)));
  _checked_ptr_1<long long> _ptr__3261(_3261 ? _3261->raw() : nullptr,_3261 ? _3261->size(0) : 0);
  _ptr__3261[(_3260 - (int)1)] = (int)1;
  int _8405 = (int)1;
  int _8406 = _3260;
  for (int _3262 = _8405; _3262 < _8406; ++_3262)
  {
    {
      _ptr__3261[((_3260 - _3262) - (int)1)] = safe_mul( _ptr__3261[(_3260 - _3262)],_ptr__3258[(_3260 - _3262)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3263 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3259)->size(0)))));
  _checked_ptr_1<long long> _ptr__3263(_3263 ? _3263->raw() : nullptr,_3263 ? _3263->size(0) : 0);
  int _8407 = (int)0;
  int _8408 = (int)((_3259)->size(0));
  for (int _3264 = _8407; _3264 < _8408; ++_3264)
  {
    {
      int _8409 = (int)0;
      int _8410 = _3260;
      for (int _3265 = _8409; _3265 < _8410; ++_3265)
      {
        {
          _ptr__3263[_3264] += safe_mul( _ptr__3261[_3265],((*_3259)(_3264,_3265)) );
        }
      }
    }
  }
  return _3263;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3266,    int _3267,    std::shared_ptr< monty::ndarray< int,1 > > _3268,    std::shared_ptr< monty::ndarray< int,1 > > _3269,    std::shared_ptr< monty::ndarray< double,1 > > _3270,    monty::rc_ptr< ::mosek::fusion::Expression > _3271,    int _3272){ return new mosek::fusion::ExprMulDiagRight(_3266,_3267,_3268,_3269,_3270,_3271,_3272); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3266,    int _3267,    std::shared_ptr< monty::ndarray< int,1 > > _3268,    std::shared_ptr< monty::ndarray< int,1 > > _3269,    std::shared_ptr< monty::ndarray< double,1 > > _3270,    monty::rc_ptr< ::mosek::fusion::Expression > _3271,    int _3272) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3266,_3267,_3268,_3269,_3270,_3271,_3272); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3266,    int _3267,    std::shared_ptr< monty::ndarray< int,1 > > _3268,    std::shared_ptr< monty::ndarray< int,1 > > _3269,    std::shared_ptr< monty::ndarray< double,1 > > _3270,    monty::rc_ptr< ::mosek::fusion::Expression > _3271,    int _3272){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3268(_3268 ? _3268->raw() : nullptr, _3268 ? _3268->size(0) : 0);
    _checked_ptr_1<int> _ptr__3269(_3269 ? _3269->raw() : nullptr, _3269 ? _3269->size(0) : 0);
    _checked_ptr_1<double> _ptr__3270(_3270 ? _3270->raw() : nullptr, _3270 ? _3270->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3267)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _3266;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _3267;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _3268;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _3269;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _3270;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _3271;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3273,    int _3274,    std::shared_ptr< monty::ndarray< int,1 > > _3275,    std::shared_ptr< monty::ndarray< int,1 > > _3276,    std::shared_ptr< monty::ndarray< double,1 > > _3277,    monty::rc_ptr< ::mosek::fusion::Expression > _3278){ return new mosek::fusion::ExprMulDiagRight(_3273,_3274,_3275,_3276,_3277,_3278); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3273,    int _3274,    std::shared_ptr< monty::ndarray< int,1 > > _3275,    std::shared_ptr< monty::ndarray< int,1 > > _3276,    std::shared_ptr< monty::ndarray< double,1 > > _3277,    monty::rc_ptr< ::mosek::fusion::Expression > _3278) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3273,_3274,_3275,_3276,_3277,_3278); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3273,    int _3274,    std::shared_ptr< monty::ndarray< int,1 > > _3275,    std::shared_ptr< monty::ndarray< int,1 > > _3276,    std::shared_ptr< monty::ndarray< double,1 > > _3277,    monty::rc_ptr< ::mosek::fusion::Expression > _3278){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3275(_3275 ? _3275->raw() : nullptr, _3275 ? _3275->size(0) : 0);
    _checked_ptr_1<int> _ptr__3276(_3276 ? _3276->raw() : nullptr, _3276 ? _3276->size(0) : 0);
    _checked_ptr_1<double> _ptr__3277(_3277 ? _3277->raw() : nullptr, _3277 ? _3277->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_3273,_3274,_3275,_3276,_3277,_3278,::mosek::fusion::p_ExprMulDiagRight::validate(_3273,_3274,_3275,_3276,_3277,_3278));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3279,monty::rc_ptr< ::mosek::fusion::WorkStack > _3280,monty::rc_ptr< ::mosek::fusion::WorkStack > _3281) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_3279,_3280,_3281); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3279,monty::rc_ptr< ::mosek::fusion::WorkStack > _3280,monty::rc_ptr< ::mosek::fusion::WorkStack > _3281){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_3280,_3279,_3281);
  int _3282 = (int)0;
  int _3283 = (int)99999;
  int _3284 = (int)0;
  bool _3285 = (_3280->peeki32((int)5) != (int)0);
  if (_3285)
  {
    {
      _3284 = _3280->peeki32((int)2);
      _3283 = _3280->alloci32(safe_add( _3284,(int)1 ));
      _3282 += safe_add( _3284,(int)1 );
    }
  }
  {}
  int _3286 = (int)((mval)->size(0));
  int _3287 = _3280->alloci32(_3286);
  int _3288 = _3280->alloci32(safe_add( mdim1,(int)1 ));
  _3282 += safe_add( safe_add( _3286,mdim1 ),(int)1 );
  {
    std::shared_ptr< monty::ndarray< int,1 > > _3289 = mosek::fusion::p_WorkStack::_get_impl(_3280)->i32;
    _checked_ptr_1<int> _ptr__3289(_3289 ? _3289->raw() : nullptr,_3289 ? _3289->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _3290 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj;
    _checked_ptr_1<int> _ptr__3290(_3290 ? _3290->raw() : nullptr,_3290 ? _3290->size(0) : 0);
    {
      int _8411 = (int)0;
      int _8412 = safe_add( mdim1,(int)1 );
      for (int _3291 = _8411; _3291 < _8412; ++_3291)
      {
        {
          _ptr__3289[safe_add( _3288,_3291 )] = (int)0;
        }
      }
      int _8413 = (int)0;
      int _8414 = _3286;
      for (int _3292 = _8413; _3292 < _8414; ++_3292)
      {
        {
          ++ _ptr__3289[safe_add( safe_add( _3288,_ptr__3290[_3292] ),(int)1 )];
        }
      }
      int _8415 = (int)0;
      int _8416 = mdim1;
      for (int _3293 = _8415; _3293 < _8416; ++_3293)
      {
        {
          _ptr__3289[safe_add( safe_add( _3288,_3293 ),(int)1 )] += _ptr__3289[safe_add( _3288,_3293 )];
        }
      }
      int _8417 = (int)0;
      int _8418 = _3286;
      for (int _3294 = _8417; _3294 < _8418; ++_3294)
      {
        {
          _ptr__3289[safe_add( _3287,_ptr__3289[safe_add( _3288,_ptr__3290[_3294] )] )] = _3294;
          ++ _ptr__3289[safe_add( _3288,_ptr__3290[_3294] )];
        }
      }
      int _8419 = (int)0;
      int _8420 = mdim1;
      for (int _3295 = _8419; _3295 < _8420; ++_3295)
      {
        {
          _ptr__3289[(safe_add( _3288,mdim1 ) - _3295)] = _ptr__3289[((safe_add( _3288,mdim1 ) - _3295) - (int)1)];
        }
      }
      _ptr__3289[_3288] = (int)0;
    }
  }
  _3280->popi32(_3282);
  int _3296 = _3280->popi32();
  if ((_3296 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3297 = _3280->popi32();
  int _3298 = _3280->popi32();
  int _3299 = _3280->popi32();
  int _3300 = _3280->popi32();
  bool _3301 = (_3280->popi32() != (int)0);
  int _3302 = _3280->popi32(safe_add( _3299,(int)1 ));
  int _8421;
  bool _8422 = _3301;
  if (_8422)
  {
    _8421 = _3280->popi64(_3299);
  }
  else
  {
    _8421 = (int)9999;
  }
  int _3303 = _8421;
  int _3304 = _3280->popi64(_3300);
  int _3305 = _3280->popf64(_3299);
  int _3306 = _3280->popf64(_3300);
  std::shared_ptr< monty::ndarray< int,1 > > _3307 = mosek::fusion::p_WorkStack::_get_impl(_3280)->i32;
  _checked_ptr_1<int> _ptr__3307(_3307 ? _3307->raw() : nullptr,_3307 ? _3307->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3308 = mosek::fusion::p_WorkStack::_get_impl(_3280)->i64;
  _checked_ptr_1<long long> _ptr__3308(_3308 ? _3308->raw() : nullptr,_3308 ? _3308->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3309 = mosek::fusion::p_WorkStack::_get_impl(_3280)->f64;
  _checked_ptr_1<double> _ptr__3309(_3309 ? _3309->raw() : nullptr,_3309 ? _3309->size(0) : 0);
  if (_3301)
  {
    {
      int _8423 = (int)0;
      int _8424 = safe_add( _3298,(int)1 );
      for (int _3310 = _8423; _3310 < _8424; ++_3310)
      {
        {
          _ptr__3307[safe_add( _3283,_3310 )] = (int)0;
        }
      }
      int _8425 = (int)0;
      int _8426 = _3299;
      for (int _3311 = _8425; _3311 < _8426; ++_3311)
      {
        {
          ++ _ptr__3307[safe_add( safe_add( _3283,(_ptr__3308[safe_add( _3303,_3311 )] / _3297) ),(int)1 )];
        }
      }
      int _8427 = (int)0;
      int _8428 = _3298;
      for (int _3312 = _8427; _3312 < _8428; ++_3312)
      {
        {
          _ptr__3307[safe_add( safe_add( _3283,_3312 ),(int)1 )] += _ptr__3307[safe_add( _3283,_3312 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3313 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3313(_3313 ? _3313->raw() : nullptr,_3313 ? _3313->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3314 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3314(_3314 ? _3314->raw() : nullptr,_3314 ? _3314->size(0) : 0);
      int _3315 = (int)0;
      int _3316 = (int)0;
      {
        int _8429 = (int)0;
        int _8430 = _3298;
        for (int _3317 = _8429; _3317 < _8430; ++_3317)
        {
          {
            int _3318 = _ptr__3307[safe_add( safe_add( _3288,_3317 ),(int)1 )];
            int _3319 = _ptr__3307[safe_add( _3288,_3317 )];
            int _3320 = _ptr__3307[safe_add( safe_add( _3283,_3317 ),(int)1 )];
            int _3321 = _ptr__3307[safe_add( _3283,_3317 )];
            bool _3322 = false;
            while ( ((_3321 < _3320) && (_3319 < _3318)) )
            {
              {
                int _3323 = _ptr__3307[safe_add( _3287,_3319 )];
                long long _3324 = (_ptr__3308[safe_add( _3303,_3321 )] % _3297);
                if ((_ptr__3313[_3323] < _3324))
                {
                  {
                    ++ _3319;
                  }
                }
                else if((_ptr__3313[_3323] > _3324))
                {
                  {
                    ++ _3321;
                  }
                }
                else
                {
                  {
                    _3322 = true;
                    _3315 += (_ptr__3307[safe_add( safe_add( _3302,_3321 ),(int)1 )] - _ptr__3307[safe_add( _3302,_3321 )]);
                    ++ _3321;
                    ++ _3319;
                  }
                }
              }
            }
            if (_3322)
            {
              {
                ++ _3316;
              }
            }
            {}
          }
        }
      }
      bool _3325 = (_3316 < _3298);
      int _3326 = _3279->alloci32(safe_add( _3316,(int)1 ));
      int _3327 = _3279->alloci64(_3315);
      int _3328 = _3279->alloci64(_3316);
      int _3329 = _3279->allocf64(_3315);
      int _3330 = _3279->allocf64(_3316);
      int _8431;
      bool _8432 = _3325;
      if (_8432)
      {
        _8431 = (int)1;
      }
      else
      {
        _8431 = (int)0;
      }
      _3279->pushi32(_8431);
      _3279->pushi32(_3315);
      _3279->pushi32(_3316);
      _3279->pushi32(_3298);
      _3279->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3331 = mosek::fusion::p_WorkStack::_get_impl(_3279)->i32;
      _checked_ptr_1<int> _ptr__3331(_3331 ? _3331->raw() : nullptr,_3331 ? _3331->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3332 = mosek::fusion::p_WorkStack::_get_impl(_3279)->i64;
      _checked_ptr_1<long long> _ptr__3332(_3332 ? _3332->raw() : nullptr,_3332 ? _3332->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3333 = mosek::fusion::p_WorkStack::_get_impl(_3279)->f64;
      _checked_ptr_1<double> _ptr__3333(_3333 ? _3333->raw() : nullptr,_3333 ? _3333->size(0) : 0);
      {
        int _3334 = (int)0;
        int _3335 = (int)0;
        _ptr__3331[_3326] = (int)0;
        int _8433 = (int)0;
        int _8434 = _3298;
        for (int _3336 = _8433; _3336 < _8434; ++_3336)
        {
          {
            int _3337 = _ptr__3307[safe_add( safe_add( _3288,_3336 ),(int)1 )];
            int _3338 = _ptr__3307[safe_add( _3288,_3336 )];
            int _3339 = _ptr__3307[safe_add( safe_add( _3283,_3336 ),(int)1 )];
            int _3340 = _ptr__3307[safe_add( _3283,_3336 )];
            bool _3341 = false;
            double _3342 = 0.0;
            while ( ((_3340 < _3339) && (_3338 < _3337)) )
            {
              {
                int _3343 = _ptr__3307[safe_add( _3287,_3338 )];
                long long _3344 = (_ptr__3308[safe_add( _3303,_3340 )] % _3297);
                if ((_ptr__3313[_3343] < _3344))
                {
                  {
                    ++ _3338;
                  }
                }
                else if((_ptr__3313[_3343] > _3344))
                {
                  {
                    ++ _3340;
                  }
                }
                else
                {
                  {
                    _3341 = true;
                    int _8435 = _ptr__3307[safe_add( _3302,_3340 )];
                    int _8436 = _ptr__3307[safe_add( safe_add( _3302,_3340 ),(int)1 )];
                    for (int _3345 = _8435; _3345 < _8436; ++_3345)
                    {
                      {
                        _ptr__3332[safe_add( _3327,_3335 )] = _ptr__3308[safe_add( _3304,_3345 )];
                        _ptr__3333[safe_add( _3329,_3335 )] = (_ptr__3309[safe_add( _3306,_3345 )] * _ptr__3314[_3343]);
                        ++ _3335;
                      }
                    }
                    _3342 += (_ptr__3309[safe_add( _3305,_3340 )] * _ptr__3314[_3343]);
                    ++ _3340;
                    ++ _3338;
                  }
                }
              }
            }
            if (_3341)
            {
              {
                _ptr__3331[safe_add( safe_add( _3326,_3334 ),(int)1 )] = _3335;
                _ptr__3332[safe_add( _3328,_3334 )] = _3336;
                _ptr__3333[safe_add( _3330,_3334 )] = _3342;
                ++ _3334;
              }
            }
            {}
          }
        }
      }
      if ((!_3325))
      {
        {
          _3279->popi64(_3316);
        }
      }
      {}
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3346 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3346(_3346 ? _3346->raw() : nullptr,_3346 ? _3346->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3347 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3347(_3347 ? _3347->raw() : nullptr,_3347 ? _3347->size(0) : 0);
      int _3348 = (int)0;
      int _3349 = (int)0;
      {
        int _8437 = (int)0;
        int _8438 = _3298;
        for (int _3350 = _8437; _3350 < _8438; ++_3350)
        {
          {
            bool _3351 = false;
            int _8439 = _ptr__3307[safe_add( _3288,_3350 )];
            int _8440 = _ptr__3307[safe_add( safe_add( _3288,_3350 ),(int)1 )];
            for (int _3352 = _8439; _3352 < _8440; ++_3352)
            {
              {
                int _3353 = _ptr__3307[safe_add( _3287,_3352 )];
                int _3354 = safe_add( safe_mul( _3350,_3297 ),_ptr__3346[_3353] );
                _3349 += (_ptr__3307[safe_add( safe_add( _3302,_3354 ),(int)1 )] - _ptr__3307[safe_add( _3302,_3354 )]);
                if ((_ptr__3307[safe_add( safe_add( _3302,_3354 ),(int)1 )] > _ptr__3307[safe_add( _3302,_3354 )]))
                {
                  {
                    _3351 = true;
                  }
                }
                {}
              }
            }
            if (_3351)
            {
              {
                ++ _3348;
              }
            }
            {}
          }
        }
      }
      bool _3355 = (_3348 < _3298);
      int _3356 = _3279->alloci32(safe_add( _3348,(int)1 ));
      int _3357 = _3279->alloci64(_3349);
      int _3358 = _3279->alloci64(_3348);
      int _3359 = _3279->allocf64(_3349);
      int _3360 = _3279->allocf64(_3348);
      int _8441;
      bool _8442 = _3355;
      if (_8442)
      {
        _8441 = (int)1;
      }
      else
      {
        _8441 = (int)0;
      }
      _3279->pushi32(_8441);
      _3279->pushi32(_3349);
      _3279->pushi32(_3348);
      _3279->pushi32(_3298);
      _3279->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3361 = mosek::fusion::p_WorkStack::_get_impl(_3279)->i32;
      _checked_ptr_1<int> _ptr__3361(_3361 ? _3361->raw() : nullptr,_3361 ? _3361->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3362 = mosek::fusion::p_WorkStack::_get_impl(_3279)->i64;
      _checked_ptr_1<long long> _ptr__3362(_3362 ? _3362->raw() : nullptr,_3362 ? _3362->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3363 = mosek::fusion::p_WorkStack::_get_impl(_3279)->f64;
      _checked_ptr_1<double> _ptr__3363(_3363 ? _3363->raw() : nullptr,_3363 ? _3363->size(0) : 0);
      {
        int _3364 = (int)0;
        int _3365 = (int)0;
        _ptr__3361[_3356] = (int)0;
        int _8443 = (int)0;
        int _8444 = _3298;
        for (int _3366 = _8443; _3366 < _8444; ++_3366)
        {
          {
            bool _3367 = false;
            double _3368 = 0.0;
            int _8445 = _ptr__3307[safe_add( _3288,_3366 )];
            int _8446 = _ptr__3307[safe_add( safe_add( _3288,_3366 ),(int)1 )];
            for (int _3369 = _8445; _3369 < _8446; ++_3369)
            {
              {
                int _3370 = _ptr__3307[safe_add( _3287,_3369 )];
                int _3371 = safe_add( safe_mul( _3366,_3297 ),_ptr__3346[_3370] );
                int _8447 = _ptr__3307[safe_add( _3302,_3371 )];
                int _8448 = _ptr__3307[safe_add( safe_add( _3302,_3371 ),(int)1 )];
                for (int _3372 = _8447; _3372 < _8448; ++_3372)
                {
                  {
                    _3367 = true;
                    _ptr__3362[safe_add( _3357,_3365 )] = _ptr__3308[safe_add( _3304,_3372 )];
                    _ptr__3363[safe_add( _3359,_3365 )] = (_ptr__3309[safe_add( _3306,_3372 )] * _ptr__3347[_3370]);
                    ++ _3365;
                  }
                }
                _3368 += (_ptr__3309[safe_add( _3305,_3371 )] * _ptr__3347[_3370]);
              }
            }
            if (_3367)
            {
              {
                _ptr__3363[safe_add( _3360,_3364 )] = _3368;
                _ptr__3362[safe_add( _3358,_3364 )] = _3366;
                _ptr__3361[safe_add( safe_add( _3356,_3364 ),(int)1 )] = _3365;
                ++ _3364;
              }
            }
            {}
          }
        }
      }
      if ((!_3355))
      {
        {
          _3279->popi64(_3348);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _3373,int _3374,std::shared_ptr< monty::ndarray< int,1 > > _3375,std::shared_ptr< monty::ndarray< int,1 > > _3376,std::shared_ptr< monty::ndarray< double,1 > > _3377,monty::rc_ptr< ::mosek::fusion::Expression > _3378){
  _checked_ptr_1<int> _ptr__3375(_3375 ? _3375->raw() : nullptr, _3375 ? _3375->size(0) : 0);
  _checked_ptr_1<int> _ptr__3376(_3376 ? _3376->raw() : nullptr, _3376 ? _3376->size(0) : 0);
  _checked_ptr_1<double> _ptr__3377(_3377 ? _3377->raw() : nullptr, _3377 ? _3377->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3379 = _3378->getShape();
  _checked_ptr_1<int> _ptr__3379(_3379 ? _3379->raw() : nullptr,_3379 ? _3379->size(0) : 0);
  if (((int)((_3379)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3380 = _ptr__3379[(int)0];
  int _3381 = _ptr__3379[(int)1];
  if (((_3373 < (int)0) || ((_3374 < (int)0) || ((_3380 < (int)0) || (_3381 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3373 != _3381) || (_3374 != _3380)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3375)->size(0)) != (int)((_3376)->size(0))) || ((int)((_3375)->size(0)) != (int)((_3377)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3382 = (int)((_3375)->size(0));
  bool _3383 = false;
  bool _3384 = false;
  {
    int _8449 = (int)0;
    int _8450 = _3382;
    for (int _3385 = _8449; _3385 < _8450; ++_3385)
    {
      {
        if (((_ptr__3375[_3385] < (int)0) || ((_ptr__3375[_3385] >= _3373) || ((_ptr__3376[_3385] < (int)0) || (_ptr__3376[_3385] >= _3374)))))
        {
          {
            _3383 = true;
          }
        }
        {}
      }
    }
    int _8451 = (int)0;
    int _8452 = (_3382 - (int)1);
    for (int _3386 = _8451; _3386 < _8452; ++_3386)
    {
      {
        if (((_ptr__3375[_3386] > _ptr__3375[safe_add( _3386,(int)1 )]) || ((_ptr__3375[_3386] == _ptr__3375[safe_add( _3386,(int)1 )]) && (_ptr__3376[_3386] >= _ptr__3376[safe_add( _3386,(int)1 )]))))
        {
          {
            _3384 = true;
          }
        }
        {}
      }
    }
  }
  if (_3383)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3384)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return std::string ("ExprMulDiagRight()");
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3387,    int _3388,    std::shared_ptr< monty::ndarray< int,1 > > _3389,    std::shared_ptr< monty::ndarray< int,1 > > _3390,    std::shared_ptr< monty::ndarray< double,1 > > _3391,    monty::rc_ptr< ::mosek::fusion::Expression > _3392,    int _3393){ return new mosek::fusion::ExprMulDiagLeft(_3387,_3388,_3389,_3390,_3391,_3392,_3393); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3387,    int _3388,    std::shared_ptr< monty::ndarray< int,1 > > _3389,    std::shared_ptr< monty::ndarray< int,1 > > _3390,    std::shared_ptr< monty::ndarray< double,1 > > _3391,    monty::rc_ptr< ::mosek::fusion::Expression > _3392,    int _3393) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3387,_3388,_3389,_3390,_3391,_3392,_3393); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3387,    int _3388,    std::shared_ptr< monty::ndarray< int,1 > > _3389,    std::shared_ptr< monty::ndarray< int,1 > > _3390,    std::shared_ptr< monty::ndarray< double,1 > > _3391,    monty::rc_ptr< ::mosek::fusion::Expression > _3392,    int _3393){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3389(_3389 ? _3389->raw() : nullptr, _3389 ? _3389->size(0) : 0);
    _checked_ptr_1<int> _ptr__3390(_3390 ? _3390->raw() : nullptr, _3390 ? _3390->size(0) : 0);
    _checked_ptr_1<double> _ptr__3391(_3391 ? _3391->raw() : nullptr, _3391 ? _3391->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3387)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _3387;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _3388;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _3389;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _3390;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _3391;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _3392;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3394,    int _3395,    std::shared_ptr< monty::ndarray< int,1 > > _3396,    std::shared_ptr< monty::ndarray< int,1 > > _3397,    std::shared_ptr< monty::ndarray< double,1 > > _3398,    monty::rc_ptr< ::mosek::fusion::Expression > _3399){ return new mosek::fusion::ExprMulDiagLeft(_3394,_3395,_3396,_3397,_3398,_3399); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3394,    int _3395,    std::shared_ptr< monty::ndarray< int,1 > > _3396,    std::shared_ptr< monty::ndarray< int,1 > > _3397,    std::shared_ptr< monty::ndarray< double,1 > > _3398,    monty::rc_ptr< ::mosek::fusion::Expression > _3399) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3394,_3395,_3396,_3397,_3398,_3399); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3394,    int _3395,    std::shared_ptr< monty::ndarray< int,1 > > _3396,    std::shared_ptr< monty::ndarray< int,1 > > _3397,    std::shared_ptr< monty::ndarray< double,1 > > _3398,    monty::rc_ptr< ::mosek::fusion::Expression > _3399){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3396(_3396 ? _3396->raw() : nullptr, _3396 ? _3396->size(0) : 0);
    _checked_ptr_1<int> _ptr__3397(_3397 ? _3397->raw() : nullptr, _3397 ? _3397->size(0) : 0);
    _checked_ptr_1<double> _ptr__3398(_3398 ? _3398->raw() : nullptr, _3398 ? _3398->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_3394,_3395,_3396,_3397,_3398,_3399,::mosek::fusion::p_ExprMulDiagLeft::validate(_3394,_3395,_3396,_3397,_3398,_3399));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3400,monty::rc_ptr< ::mosek::fusion::WorkStack > _3401,monty::rc_ptr< ::mosek::fusion::WorkStack > _3402) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_3400,_3401,_3402); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3400,monty::rc_ptr< ::mosek::fusion::WorkStack > _3401,monty::rc_ptr< ::mosek::fusion::WorkStack > _3402){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_3401,_3400,_3402);
  if ((_3401->peeki32() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3403 = (int)((msubi)->size(0));
  int _3404 = (int)9999;
  int _3405 = (int)9999;
  int _3406 = (int)0;
  int _3407 = _3401->peeki32((int)5);
  if ((_3407 != (int)0))
  {
    {
      int _3408 = _3401->peeki32((int)1);
      int _3409 = _3401->peeki32((int)3);
      _3404 = _3401->alloci32(safe_add( _3408,(int)1 ));
      _3405 = _3401->alloci32(_3409);
      _3406 += safe_add( safe_add( _3409,_3408 ),(int)1 );
    }
  }
  {}
  int _3410 = _3401->alloci32(safe_add( mdim0,(int)1 ));
  _3406 += safe_add( mdim0,(int)1 );
  _3401->popi32(_3406);
  std::shared_ptr< monty::ndarray< int,1 > > _3411 = mosek::fusion::p_WorkStack::_get_impl(_3401)->i32;
  _checked_ptr_1<int> _ptr__3411(_3411 ? _3411->raw() : nullptr,_3411 ? _3411->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3412 = mosek::fusion::p_WorkStack::_get_impl(_3401)->i64;
  _checked_ptr_1<long long> _ptr__3412(_3412 ? _3412->raw() : nullptr,_3412 ? _3412->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3413 = mosek::fusion::p_WorkStack::_get_impl(_3401)->f64;
  _checked_ptr_1<double> _ptr__3413(_3413 ? _3413->raw() : nullptr,_3413 ? _3413->size(0) : 0);
  int _8453 = (int)0;
  int _8454 = safe_add( mdim0,(int)1 );
  for (int _3414 = _8453; _3414 < _8454; ++_3414)
  {
    {
      _ptr__3411[safe_add( _3410,_3414 )] = (int)0;
    }
  }
  int _8455 = (int)0;
  int _8456 = _3403;
  for (int _3415 = _8455; _3415 < _8456; ++_3415)
  {
    {
      ++ _ptr__3411[safe_add( safe_add( _3410,((*msubi)(_3415)) ),(int)1 )];
    }
  }
  int _8457 = (int)0;
  int _8458 = mdim0;
  for (int _3416 = _8457; _3416 < _8458; ++_3416)
  {
    {
      _ptr__3411[safe_add( safe_add( _3410,_3416 ),(int)1 )] += _ptr__3411[safe_add( _3410,_3416 )];
    }
  }
  int _3417 = _3401->popi32();
  int _3418 = _3401->popi32();
  int _3419 = _3401->popi32();
  int _3420 = _3401->popi32();
  int _3421 = _3401->popi32();
  bool _3422 = (_3401->popi32() != (int)0);
  int _3423 = _3401->popi32(safe_add( _3420,(int)1 ));
  int _8459;
  bool _8460 = _3422;
  if (_8460)
  {
    _8459 = _3401->popi64(_3420);
  }
  else
  {
    _8459 = (int)9999;
  }
  int _3424 = _8459;
  int _3425 = _3401->popi64(_3421);
  int _3426 = _3401->popf64(_3420);
  int _3427 = _3401->popf64(_3421);
  if ((!_3422))
  {
    {
      int _3428 = (int)((msubi)->size(0));
      int _3429 = (int)0;
      int _8461 = (int)0;
      int _8462 = mdim0;
      for (int _3430 = _8461; _3430 < _8462; ++_3430)
      {
        {
          if ((_ptr__3411[safe_add( _3410,_3430 )] < _ptr__3411[safe_add( safe_add( _3410,_3430 ),(int)1 )]))
          {
            {
              ++ _3429;
            }
          }
          {}
        }
      }
      bool _3431 = (_3429 < mdim0);
      _3400->alloc_expr((int)1,_3429,_3428,_3431);
      int _3432 = mosek::fusion::p_WorkStack::_get_impl(_3400)->ptr_base;
      int _3433 = mosek::fusion::p_WorkStack::_get_impl(_3400)->nidxs_base;
      int _8463;
      bool _8464 = _3431;
      if (_8464)
      {
        _8463 = mosek::fusion::p_WorkStack::_get_impl(_3400)->sp_base;
      }
      else
      {
        _8463 = _3400->alloci64(_3429);
      }
      int _3434 = _8463;
      int _3435 = mosek::fusion::p_WorkStack::_get_impl(_3400)->cof_base;
      int _3436 = mosek::fusion::p_WorkStack::_get_impl(_3400)->bfix_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3400)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3400)->shape_base)) = mdim0;
      std::shared_ptr< monty::ndarray< int,1 > > _3437 = mosek::fusion::p_WorkStack::_get_impl(_3400)->i32;
      _checked_ptr_1<int> _ptr__3437(_3437 ? _3437->raw() : nullptr,_3437 ? _3437->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3438 = mosek::fusion::p_WorkStack::_get_impl(_3400)->i64;
      _checked_ptr_1<long long> _ptr__3438(_3438 ? _3438->raw() : nullptr,_3438 ? _3438->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3439 = mosek::fusion::p_WorkStack::_get_impl(_3400)->f64;
      _checked_ptr_1<double> _ptr__3439(_3439 ? _3439->raw() : nullptr,_3439 ? _3439->size(0) : 0);
      {
        _ptr__3437[_3432] = (int)0;
        int _3440 = (int)0;
        int _3441 = (int)0;
        int _8465 = (int)0;
        int _8466 = mdim0;
        for (int _3442 = _8465; _3442 < _8466; ++_3442)
        {
          {
            if ((_ptr__3411[safe_add( _3410,_3442 )] < _ptr__3411[safe_add( safe_add( _3410,_3442 ),(int)1 )]))
            {
              {
                int _3443 = (int)0;
                int _8467 = _ptr__3411[safe_add( _3410,_3442 )];
                int _8468 = _ptr__3411[safe_add( safe_add( _3410,_3442 ),(int)1 )];
                for (int _3444 = _8467; _3444 < _8468; ++_3444)
                {
                  {
                    int _3445 = ((*msubj)(_3444));
                    int _3446 = safe_add( safe_mul( _3445,_3418 ),_3442 );
                    int _8469 = _ptr__3411[safe_add( _3423,_3446 )];
                    int _8470 = _ptr__3411[safe_add( safe_add( _3423,_3446 ),(int)1 )];
                    for (int _3447 = _8469; _3447 < _8470; ++_3447)
                    {
                      {
                        _ptr__3438[safe_add( _3433,_3441 )] = _ptr__3412[safe_add( _3425,_3447 )];
                        _ptr__3439[safe_add( _3435,_3441 )] = (_ptr__3413[safe_add( _3427,_3447 )] * ((*mval)(_3444)));
                        ++ _3441;
                      }
                    }
                  }
                }
                _ptr__3439[safe_add( _3436,_3440 )] = _3443;
                _ptr__3438[safe_add( _3434,_3440 )] = _3442;
                _ptr__3437[safe_add( safe_add( _3432,_3440 ),(int)1 )] = _3441;
                ++ _3440;
              }
            }
            {}
          }
        }
      }
      if ((!_3431))
      {
        {
          _3400->popi64(_3429);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _8471 = (int)0;
      int _8472 = safe_add( _3418,(int)1 );
      for (int _3448 = _8471; _3448 < _8472; ++_3448)
      {
        {
          _ptr__3411[safe_add( _3404,_3448 )] = (int)0;
        }
      }
      int _8473 = (int)0;
      int _8474 = _3420;
      for (int _3449 = _8473; _3449 < _8474; ++_3449)
      {
        {
          ++ _ptr__3411[safe_add( safe_add( _3404,(_ptr__3412[safe_add( _3424,_3449 )] % _3418) ),(int)1 )];
        }
      }
      int _8475 = (int)0;
      int _8476 = _3418;
      for (int _3450 = _8475; _3450 < _8476; ++_3450)
      {
        {
          _ptr__3411[safe_add( safe_add( _3404,_3450 ),(int)1 )] += _ptr__3411[safe_add( _3404,_3450 )];
        }
      }
      int _8477 = (int)0;
      int _8478 = _3420;
      for (int _3451 = _8477; _3451 < _8478; ++_3451)
      {
        {
          long long _3452 = (_ptr__3412[safe_add( _3424,_3451 )] % _3418);
          _ptr__3411[safe_add( _3405,_ptr__3411[safe_add( _3404,_3452 )] )] = _3451;
          ++ _ptr__3411[safe_add( _3404,_3452 )];
        }
      }
      int _8479 = (int)0;
      int _8480 = _3418;
      for (int _3453 = _8479; _3453 < _8480; ++_3453)
      {
        {
          _ptr__3411[(safe_add( _3404,_3418 ) - _3453)] = _ptr__3411[((safe_add( _3404,_3418 ) - _3453) - (int)1)];
        }
      }
      _ptr__3411[_3404] = (int)0;
      int _3454 = (int)0;
      int _3455 = (int)0;
      {
        int _8481 = (int)0;
        int _8482 = mdim0;
        for (int _3456 = _8481; _3456 < _8482; ++_3456)
        {
          {
            int _3457 = _ptr__3411[safe_add( safe_add( _3404,_3456 ),(int)1 )];
            int _3458 = _ptr__3411[safe_add( _3404,_3456 )];
            int _3459 = _ptr__3411[safe_add( safe_add( _3410,_3456 ),(int)1 )];
            int _3460 = _ptr__3411[safe_add( _3410,_3456 )];
            bool _3461 = false;
            while ( ((_3460 < _3459) && (_3458 < _3457)) )
            {
              {
                int _3462 = _ptr__3411[safe_add( _3405,_3458 )];
                long long _3463 = (_ptr__3412[safe_add( _3424,_3462 )] / _3418);
                if ((((*msubj)(_3460)) < _3463))
                {
                  {
                    ++ _3460;
                  }
                }
                else if((((*msubj)(_3460)) > _3463))
                {
                  {
                    ++ _3458;
                  }
                }
                else
                {
                  {
                    _3461 = true;
                    _3455 += (_ptr__3411[safe_add( safe_add( _3423,_3462 ),(int)1 )] - _ptr__3411[safe_add( _3423,_3462 )]);
                    ++ _3460;
                    ++ _3458;
                  }
                }
              }
            }
            if (_3461)
            {
              {
                ++ _3454;
              }
            }
            {}
          }
        }
      }
      int _3464 = _3454;
      int _3465 = _3455;
      bool _3466 = (_3464 < mdim0);
      int _3467 = _3400->alloci32(safe_add( _3464,(int)1 ));
      int _3468 = _3400->alloci64(_3465);
      int _3469 = _3400->alloci64(_3464);
      int _3470 = _3400->allocf64(_3465);
      int _3471 = _3400->allocf64(_3464);
      int _8483;
      bool _8484 = _3466;
      if (_8484)
      {
        _8483 = (int)1;
      }
      else
      {
        _8483 = (int)0;
      }
      _3400->pushi32(_8483);
      _3400->pushi32(_3465);
      _3400->pushi32(_3464);
      _3400->pushi32(mdim0);
      _3400->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3472 = mosek::fusion::p_WorkStack::_get_impl(_3400)->i32;
      _checked_ptr_1<int> _ptr__3472(_3472 ? _3472->raw() : nullptr,_3472 ? _3472->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3473 = mosek::fusion::p_WorkStack::_get_impl(_3400)->i64;
      _checked_ptr_1<long long> _ptr__3473(_3473 ? _3473->raw() : nullptr,_3473 ? _3473->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3474 = mosek::fusion::p_WorkStack::_get_impl(_3400)->f64;
      _checked_ptr_1<double> _ptr__3474(_3474 ? _3474->raw() : nullptr,_3474 ? _3474->size(0) : 0);
      {
        _ptr__3472[_3467] = (int)0;
        int _3475 = (int)0;
        int _3476 = (int)0;
        int _8485 = (int)0;
        int _8486 = mdim0;
        for (int _3477 = _8485; _3477 < _8486; ++_3477)
        {
          {
            int _3478 = _ptr__3411[safe_add( safe_add( _3404,_3477 ),(int)1 )];
            int _3479 = _ptr__3411[safe_add( _3404,_3477 )];
            int _3480 = _ptr__3411[safe_add( safe_add( _3410,_3477 ),(int)1 )];
            int _3481 = _ptr__3411[safe_add( _3410,_3477 )];
            bool _3482 = false;
            double _3483 = 0.0;
            while ( ((_3481 < _3480) && (_3479 < _3478)) )
            {
              {
                int _3484 = _ptr__3411[safe_add( _3405,_3479 )];
                long long _3485 = (_ptr__3412[safe_add( _3424,_3484 )] / _3418);
                if ((((*msubj)(_3481)) < _3485))
                {
                  {
                    ++ _3481;
                  }
                }
                else if((((*msubj)(_3481)) > _3485))
                {
                  {
                    ++ _3479;
                  }
                }
                else
                {
                  {
                    _3482 = true;
                    int _8487 = _ptr__3411[safe_add( _3423,_3484 )];
                    int _8488 = _ptr__3411[safe_add( safe_add( _3423,_3484 ),(int)1 )];
                    for (int _3486 = _8487; _3486 < _8488; ++_3486)
                    {
                      {
                        _ptr__3473[safe_add( _3468,_3476 )] = _ptr__3412[safe_add( _3425,_3486 )];
                        _ptr__3474[safe_add( _3470,_3476 )] = (_ptr__3413[safe_add( _3427,_3486 )] * ((*mval)(_3481)));
                        ++ _3476;
                      }
                    }
                    _3483 += _ptr__3413[safe_add( _3426,_3484 )];
                    ++ _3481;
                    ++ _3479;
                  }
                }
              }
            }
            if (_3482)
            {
              {
                _ptr__3473[safe_add( _3469,_3475 )] = _3477;
                _ptr__3474[safe_add( _3471,_3475 )] = (_3483 * ((*mval)(_3481)));
                _ptr__3472[safe_add( safe_add( _3467,_3475 ),(int)1 )] = _3476;
                ++ _3475;
              }
            }
            {}
          }
        }
      }
      if ((!_3466))
      {
        {
          _3400->popi64(_3464);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _3487,int _3488,std::shared_ptr< monty::ndarray< int,1 > > _3489,std::shared_ptr< monty::ndarray< int,1 > > _3490,std::shared_ptr< monty::ndarray< double,1 > > _3491,monty::rc_ptr< ::mosek::fusion::Expression > _3492){
  _checked_ptr_1<int> _ptr__3489(_3489 ? _3489->raw() : nullptr, _3489 ? _3489->size(0) : 0);
  _checked_ptr_1<int> _ptr__3490(_3490 ? _3490->raw() : nullptr, _3490 ? _3490->size(0) : 0);
  _checked_ptr_1<double> _ptr__3491(_3491 ? _3491->raw() : nullptr, _3491 ? _3491->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3493 = _3492->getShape();
  _checked_ptr_1<int> _ptr__3493(_3493 ? _3493->raw() : nullptr,_3493 ? _3493->size(0) : 0);
  if (((int)((_3493)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3494 = _ptr__3493[(int)0];
  int _3495 = _ptr__3493[(int)1];
  if (((_3487 < (int)0) || (_3488 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3488 != _3494) || (_3487 != _3495)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3489)->size(0)) != (int)((_3490)->size(0))) || ((int)((_3489)->size(0)) != (int)((_3491)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3496 = (int)((_3489)->size(0));
  bool _3497 = false;
  bool _3498 = false;
  {
    int _8489 = (int)0;
    int _8490 = _3496;
    for (int _3499 = _8489; _3499 < _8490; ++_3499)
    {
      {
        if (((_ptr__3489[_3499] < (int)0) || ((_ptr__3489[_3499] >= _3487) || ((_ptr__3490[_3499] < (int)0) || (_ptr__3490[_3499] >= _3488)))))
        {
          {
            _3497 = true;
          }
        }
        {}
      }
    }
    int _8491 = (int)0;
    int _8492 = (_3496 - (int)1);
    for (int _3500 = _8491; _3500 < _8492; ++_3500)
    {
      {
        if (((_ptr__3489[_3500] > _ptr__3489[safe_add( _3500,(int)1 )]) || ((_ptr__3489[_3500] == _ptr__3489[safe_add( _3500,(int)1 )]) && (_ptr__3490[_3500] >= _ptr__3490[safe_add( _3500,(int)1 )]))))
        {
          {
            _3498 = true;
          }
        }
        {}
      }
    }
  }
  if (_3497)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3498)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return std::string ("ExprMulDiagLeft()");
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3501,    std::shared_ptr< monty::ndarray< long long,1 > > _3502,    monty::rc_ptr< ::mosek::fusion::Expression > _3503){ return new mosek::fusion::ExprMulElement(_3501,_3502,_3503); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3501,    std::shared_ptr< monty::ndarray< long long,1 > > _3502,    monty::rc_ptr< ::mosek::fusion::Expression > _3503) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3501,_3502,_3503); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3501,    std::shared_ptr< monty::ndarray< long long,1 > > _3502,    monty::rc_ptr< ::mosek::fusion::Expression > _3503){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3501(_3501 ? _3501->raw() : nullptr, _3501 ? _3501->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3502(_3502 ? _3502->raw() : nullptr, _3502 ? _3502->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_3501,_3502,_3503,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3504 = _3503->getShape();
    _checked_ptr_1<int> _ptr__3504(_3504 ? _3504->raw() : nullptr,_3504 ? _3504->size(0) : 0);
    if (((int)((_3501)->size(0)) != (int)((_3502)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _3505 = ::mosek::fusion::p_Set::size(_3504);
    bool _3506 = false;
    bool _3507 = false;
    {
      int _8493 = (int)0;
      int _8494 = (int)((_3502)->size(0));
      for (int _3508 = _8493; _3508 < _8494; ++_3508)
      {
        {
          if (((_ptr__3502[_3508] < (int)0) || (_ptr__3502[_3508] >= _3505)))
          {
            {
              _3506 = true;
            }
          }
          {}
        }
      }
      int _8495 = (int)0;
      int _8496 = ((int)((_3502)->size(0)) - (int)1);
      for (int _3509 = _8495; _3509 < _8496; ++_3509)
      {
        {
          if ((_ptr__3502[_3509] >= _ptr__3502[safe_add( _3509,(int)1 )]))
          {
            {
              _3507 = true;
            }
          }
          {}
        }
      }
    }
    if (_3506)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_3507)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3510,    std::shared_ptr< monty::ndarray< long long,1 > > _3511,    monty::rc_ptr< ::mosek::fusion::Expression > _3512,    int _3513){ return new mosek::fusion::ExprMulElement(_3510,_3511,_3512,_3513); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3510,    std::shared_ptr< monty::ndarray< long long,1 > > _3511,    monty::rc_ptr< ::mosek::fusion::Expression > _3512,    int _3513) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3510,_3511,_3512,_3513); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3510,    std::shared_ptr< monty::ndarray< long long,1 > > _3511,    monty::rc_ptr< ::mosek::fusion::Expression > _3512,    int _3513){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3510(_3510 ? _3510->raw() : nullptr, _3510 ? _3510->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3511(_3511 ? _3511->raw() : nullptr, _3511 ? _3511->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_3512->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _3512;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _3510;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _3511;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3514,monty::rc_ptr< ::mosek::fusion::WorkStack > _3515,monty::rc_ptr< ::mosek::fusion::WorkStack > _3516) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_3514,_3515,_3516); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3514,monty::rc_ptr< ::mosek::fusion::WorkStack > _3515,monty::rc_ptr< ::mosek::fusion::WorkStack > _3516){
  expr->eval(_3515,_3514,_3516);
  int _3517 = _3515->popi32();
  int _3518 = _3515->popi32(_3517);
  int _3519 = _3515->popi32();
  int _3520 = _3515->popi32();
  bool _3521 = (_3515->popi32() != (int)0);
  int _3522 = _3515->popi32(safe_add( _3519,(int)1 ));
  int _8497;
  bool _8498 = _3521;
  if (_8498)
  {
    _8497 = _3515->popi64(_3519);
  }
  else
  {
    _8497 = (-(int)1);
  }
  int _3523 = _8497;
  int _3524 = _3515->popi64(_3520);
  int _3525 = _3515->popf64(_3519);
  int _3526 = _3515->popf64(_3520);
  std::shared_ptr< monty::ndarray< int,1 > > _3527 = mosek::fusion::p_WorkStack::_get_impl(_3515)->i32;
  _checked_ptr_1<int> _ptr__3527(_3527 ? _3527->raw() : nullptr,_3527 ? _3527->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3528 = mosek::fusion::p_WorkStack::_get_impl(_3515)->i64;
  _checked_ptr_1<long long> _ptr__3528(_3528 ? _3528->raw() : nullptr,_3528 ? _3528->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3529 = mosek::fusion::p_WorkStack::_get_impl(_3515)->f64;
  _checked_ptr_1<double> _ptr__3529(_3529 ? _3529->raw() : nullptr,_3529 ? _3529->size(0) : 0);
  int _3530 = (int)0;
  int _3531 = (int)0;
  if ((!_3521))
  {
    {
      _3531 = (int)((msp)->size(0));
      int _8499 = (int)0;
      int _8500 = (int)((msp)->size(0));
      for (int _3532 = _8499; _3532 < _8500; ++_3532)
      {
        {
          _3530 += (_ptr__3527[safe_add( safe_add( _3522,((*msp)(_3532)) ),(int)1 )] - _ptr__3527[safe_add( _3522,((*msp)(_3532)) )]);
        }
      }
    }
  }
  else
  {
    {
      int _3533 = (int)((msp)->size(0));
      int _3534 = (int)0;
      int _3535 = _3519;
      int _3536 = (int)0;
      while ( ((_3534 < _3533) && (_3536 < _3535)) )
      {
        {
          if ((((*msp)(_3534)) < _ptr__3528[safe_add( _3523,_3536 )]))
          {
            {
              ++ _3534;
            }
          }
          else if((((*msp)(_3534)) > _ptr__3528[safe_add( _3523,_3536 )]))
          {
            {
              ++ _3536;
            }
          }
          else
          {
            {
              _3530 += (_ptr__3527[safe_add( safe_add( _3522,_3536 ),(int)1 )] - _ptr__3527[safe_add( _3522,_3536 )]);
              ++ _3534;
              ++ _3536;
              ++ _3531;
            }
          }
        }
      }
    }
  }
  int _3537 = _3514->alloci32(safe_add( _3531,(int)1 ));
  int _3538 = _3514->alloci64(_3530);
  int _3539 = _3514->alloci64(_3531);
  int _3540 = _3514->allocf64(_3530);
  int _3541 = _3514->allocf64(_3531);
  int _3542 = (int)1;
  int _8501 = (int)0;
  int _8502 = _3517;
  for (int _3543 = _8501; _3543 < _8502; ++_3543)
  {
    {
      _3542 *= _ptr__3527[safe_add( _3518,_3543 )];
    }
  }
  bool _3544 = (_3531 < _3542);
  int _8503;
  bool _8504 = _3544;
  if (_8504)
  {
    _8503 = (int)1;
  }
  else
  {
    _8503 = (int)0;
  }
  _3514->pushi32(_8503);
  _3514->pushi32(_3530);
  _3514->pushi32(_3531);
  int _3545 = _3514->alloci32(_3517);
  _3514->pushi32(_3517);
  std::shared_ptr< monty::ndarray< int,1 > > _3546 = mosek::fusion::p_WorkStack::_get_impl(_3514)->i32;
  _checked_ptr_1<int> _ptr__3546(_3546 ? _3546->raw() : nullptr,_3546 ? _3546->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3547 = mosek::fusion::p_WorkStack::_get_impl(_3514)->i64;
  _checked_ptr_1<long long> _ptr__3547(_3547 ? _3547->raw() : nullptr,_3547 ? _3547->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3548 = mosek::fusion::p_WorkStack::_get_impl(_3514)->f64;
  _checked_ptr_1<double> _ptr__3548(_3548 ? _3548->raw() : nullptr,_3548 ? _3548->size(0) : 0);
  {
    int _3549 = (int)0;
    int _3550 = (int)0;
    _ptr__3546[_3537] = (int)0;
    int _8505 = (int)0;
    int _8506 = _3517;
    for (int _3551 = _8505; _3551 < _8506; ++_3551)
    {
      {
        _ptr__3546[safe_add( _3545,_3551 )] = _ptr__3527[safe_add( _3518,_3551 )];
      }
    }
    if ((!_3521))
    {
      {
        int _8507 = (int)0;
        int _8508 = (int)((msp)->size(0));
        for (int _3552 = _8507; _3552 < _8508; ++_3552)
        {
          {
            int _3553 = _ptr__3527[safe_add( _3522,((*msp)(_3552)) )];
            int _3554 = _ptr__3527[safe_add( safe_add( _3522,((*msp)(_3552)) ),(int)1 )];
            int _8509 = _3553;
            int _8510 = _3554;
            for (int _3555 = _8509; _3555 < _8510; ++_3555)
            {
              {
                _ptr__3547[safe_add( _3538,_3550 )] = _ptr__3528[safe_add( _3524,_3555 )];
                _ptr__3548[safe_add( _3540,_3550 )] = (_ptr__3529[safe_add( _3526,_3555 )] * ((*mcof)(_3552)));
                ++ _3550;
              }
            }
            _ptr__3546[safe_add( safe_add( _3537,_3552 ),(int)1 )] = _3550;
            _ptr__3548[safe_add( _3541,_3552 )] = (_ptr__3529[safe_add( _3525,((*msp)(_3552)) )] * ((*mcof)(_3552)));
            _ptr__3547[safe_add( _3539,_3552 )] = ((*msp)(_3552));
          }
        }
      }
    }
    else
    {
      {
        int _3556 = (int)((msp)->size(0));
        int _3557 = (int)0;
        int _3558 = _3519;
        int _3559 = (int)0;
        while ( ((_3557 < _3556) && (_3559 < _3558)) )
        {
          {
            if ((((*msp)(_3557)) < _ptr__3528[safe_add( _3523,_3559 )]))
            {
              {
                ++ _3557;
              }
            }
            else if((((*msp)(_3557)) > _ptr__3528[safe_add( _3523,_3559 )]))
            {
              {
                ++ _3559;
              }
            }
            else
            {
              {
                int _3560 = _ptr__3527[safe_add( _3522,_3559 )];
                int _3561 = _ptr__3527[safe_add( safe_add( _3522,_3559 ),(int)1 )];
                int _8511 = _3560;
                int _8512 = _3561;
                for (int _3562 = _8511; _3562 < _8512; ++_3562)
                {
                  {
                    _ptr__3547[safe_add( _3538,_3550 )] = _ptr__3528[safe_add( _3524,_3562 )];
                    _ptr__3548[safe_add( _3538,_3550 )] = (_ptr__3529[safe_add( _3524,_3562 )] * ((*mcof)(_3557)));
                    ++ _3550;
                  }
                }
                _ptr__3546[safe_add( safe_add( _3537,_3549 ),(int)1 )] = _3550;
                _ptr__3548[safe_add( _3541,_3549 )] = (_ptr__3529[safe_add( _3525,_3559 )] * ((*mcof)(_3557)));
                _ptr__3547[safe_add( _3539,_3549 )] = ((*msp)(_3557));
                ++ _3549;
                ++ _3557;
                ++ _3559;
              }
            }
          }
        }
      }
    }
  }
  if ((!_3544))
  {
    {
      _3514->popi64(_3531);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return std::string ("ExprMulElement()");
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _3563,    monty::rc_ptr< ::mosek::fusion::Expression > _3564){ return new mosek::fusion::ExprMulScalarConst(_3563,_3564); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _3563,    monty::rc_ptr< ::mosek::fusion::Expression > _3564) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_3563,_3564); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _3563,    monty::rc_ptr< ::mosek::fusion::Expression > _3564){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3564->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _3563;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _3564;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3565,monty::rc_ptr< ::mosek::fusion::WorkStack > _3566,monty::rc_ptr< ::mosek::fusion::WorkStack > _3567) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_3565,_3566,_3567); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3565,monty::rc_ptr< ::mosek::fusion::WorkStack > _3566,monty::rc_ptr< ::mosek::fusion::WorkStack > _3567){
  expr->eval(_3565,_3566,_3567);
  int _3568 = _3565->peeki32((int)0);
  int _3569 = _3565->peeki32(safe_add( _3568,(int)1 ));
  int _3570 = _3565->peeki32(safe_add( _3568,(int)2 ));
  int _3571 = (mosek::fusion::p_WorkStack::_get_impl(_3565)->pf64 - _3569);
  int _3572 = (_3571 - _3570);
  std::shared_ptr< monty::ndarray< double,1 > > _3573 = mosek::fusion::p_WorkStack::_get_impl(_3565)->f64;
  _checked_ptr_1<double> _ptr__3573(_3573 ? _3573->raw() : nullptr,_3573 ? _3573->size(0) : 0);
  int _8513 = (int)0;
  int _8514 = safe_add( _3570,_3569 );
  for (int _3574 = _8513; _3574 < _8514; ++_3574)
  {
    {
      _ptr__3573[safe_add( _3572,_3574 )] *= c;
    }
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3575,    int _3576,    std::shared_ptr< monty::ndarray< int,1 > > _3577,    std::shared_ptr< monty::ndarray< int,1 > > _3578,    std::shared_ptr< monty::ndarray< double,1 > > _3579,    monty::rc_ptr< ::mosek::fusion::Expression > _3580,    int _3581){ return new mosek::fusion::ExprScalarMul(_3575,_3576,_3577,_3578,_3579,_3580,_3581); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3575,    int _3576,    std::shared_ptr< monty::ndarray< int,1 > > _3577,    std::shared_ptr< monty::ndarray< int,1 > > _3578,    std::shared_ptr< monty::ndarray< double,1 > > _3579,    monty::rc_ptr< ::mosek::fusion::Expression > _3580,    int _3581) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3575,_3576,_3577,_3578,_3579,_3580,_3581); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3575,    int _3576,    std::shared_ptr< monty::ndarray< int,1 > > _3577,    std::shared_ptr< monty::ndarray< int,1 > > _3578,    std::shared_ptr< monty::ndarray< double,1 > > _3579,    monty::rc_ptr< ::mosek::fusion::Expression > _3580,    int _3581){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3577(_3577 ? _3577->raw() : nullptr, _3577 ? _3577->size(0) : 0);
    _checked_ptr_1<int> _ptr__3578(_3578 ? _3578->raw() : nullptr, _3578 ? _3578->size(0) : 0);
    _checked_ptr_1<double> _ptr__3579(_3579 ? _3579->raw() : nullptr, _3579 ? _3579->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3575),(int)(_3576)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _3575;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _3576;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _3577;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _3578;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _3579;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _3580;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3582,    int _3583,    std::shared_ptr< monty::ndarray< int,1 > > _3584,    std::shared_ptr< monty::ndarray< int,1 > > _3585,    std::shared_ptr< monty::ndarray< double,1 > > _3586,    monty::rc_ptr< ::mosek::fusion::Expression > _3587){ return new mosek::fusion::ExprScalarMul(_3582,_3583,_3584,_3585,_3586,_3587); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3582,    int _3583,    std::shared_ptr< monty::ndarray< int,1 > > _3584,    std::shared_ptr< monty::ndarray< int,1 > > _3585,    std::shared_ptr< monty::ndarray< double,1 > > _3586,    monty::rc_ptr< ::mosek::fusion::Expression > _3587) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3582,_3583,_3584,_3585,_3586,_3587); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3582,    int _3583,    std::shared_ptr< monty::ndarray< int,1 > > _3584,    std::shared_ptr< monty::ndarray< int,1 > > _3585,    std::shared_ptr< monty::ndarray< double,1 > > _3586,    monty::rc_ptr< ::mosek::fusion::Expression > _3587){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3584(_3584 ? _3584->raw() : nullptr, _3584 ? _3584->size(0) : 0);
    _checked_ptr_1<int> _ptr__3585(_3585 ? _3585->raw() : nullptr, _3585 ? _3585->size(0) : 0);
    _checked_ptr_1<double> _ptr__3586(_3586 ? _3586->raw() : nullptr, _3586 ? _3586->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_3582,_3583,_3584,_3585,_3586,_3587,::mosek::fusion::p_ExprScalarMul::validate(_3582,_3583,_3584,_3585,_3586,_3587));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3588,monty::rc_ptr< ::mosek::fusion::WorkStack > _3589,monty::rc_ptr< ::mosek::fusion::WorkStack > _3590) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_3588,_3589,_3590); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3588,monty::rc_ptr< ::mosek::fusion::WorkStack > _3589,monty::rc_ptr< ::mosek::fusion::WorkStack > _3590){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_3589,_3588,_3590);
  _3589->pop_expr();
  int _3591 = mosek::fusion::p_WorkStack::_get_impl(_3589)->nd;
  int _3592 = mosek::fusion::p_WorkStack::_get_impl(_3589)->nelem;
  int _3593 = mosek::fusion::p_WorkStack::_get_impl(_3589)->nnz;
  bool _3594 = mosek::fusion::p_WorkStack::_get_impl(_3589)->hassp;
  int _3595 = mosek::fusion::p_WorkStack::_get_impl(_3589)->ptr_base;
  int _3596 = mosek::fusion::p_WorkStack::_get_impl(_3589)->sp_base;
  int _3597 = mosek::fusion::p_WorkStack::_get_impl(_3589)->nidxs_base;
  int _3598 = mosek::fusion::p_WorkStack::_get_impl(_3589)->bfix_base;
  int _3599 = mosek::fusion::p_WorkStack::_get_impl(_3589)->cof_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3600 = mosek::fusion::p_WorkStack::_get_impl(_3589)->i64;
  _checked_ptr_1<long long> _ptr__3600(_3600 ? _3600->raw() : nullptr,_3600 ? _3600->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3601 = mosek::fusion::p_WorkStack::_get_impl(_3589)->f64;
  _checked_ptr_1<double> _ptr__3601(_3601 ? _3601->raw() : nullptr,_3601 ? _3601->size(0) : 0);
  int _3602 = (int)((mval)->size(0));
  if ((_3591 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_3592 == (int)0))
  {
    {
      _3588->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_3588)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3588)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3588)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3588)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      _3588->alloc_expr((int)2,_3602,safe_mul( _3602,_3593 ),true);
      int _3603 = mosek::fusion::p_WorkStack::_get_impl(_3588)->ptr_base;
      int _3604 = mosek::fusion::p_WorkStack::_get_impl(_3588)->nidxs_base;
      int _3605 = mosek::fusion::p_WorkStack::_get_impl(_3588)->sp_base;
      int _3606 = mosek::fusion::p_WorkStack::_get_impl(_3588)->cof_base;
      int _3607 = mosek::fusion::p_WorkStack::_get_impl(_3588)->bfix_base;
      int _3608 = mosek::fusion::p_WorkStack::_get_impl(_3588)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _3609 = mosek::fusion::p_WorkStack::_get_impl(_3588)->i32;
      _checked_ptr_1<int> _ptr__3609(_3609 ? _3609->raw() : nullptr,_3609 ? _3609->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3610 = mosek::fusion::p_WorkStack::_get_impl(_3588)->i64;
      _checked_ptr_1<long long> _ptr__3610(_3610 ? _3610->raw() : nullptr,_3610 ? _3610->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3611 = mosek::fusion::p_WorkStack::_get_impl(_3588)->f64;
      _checked_ptr_1<double> _ptr__3611(_3611 ? _3611->raw() : nullptr,_3611 ? _3611->size(0) : 0);
      _ptr__3609[_3608] = mdim0;
      _ptr__3609[safe_add( _3608,(int)1 )] = mdim1;
      int _3612 = (int)0;
      _ptr__3609[_3603] = (int)0;
      int _8515 = (int)0;
      int _8516 = _3602;
      for (int _3613 = _8515; _3613 < _8516; ++_3613)
      {
        {
          int _8517 = (int)0;
          int _8518 = _3593;
          for (int _3614 = _8517; _3614 < _8518; ++_3614)
          {
            {
              _ptr__3610[safe_add( _3604,_3612 )] = _ptr__3600[safe_add( _3597,_3614 )];
              _ptr__3611[safe_add( _3606,_3612 )] = (_ptr__3601[safe_add( _3599,_3614 )] * ((*mval)(_3613)));
              ++ _3612;
            }
          }
          _ptr__3610[safe_add( _3605,_3613 )] = safe_add( safe_mul( ((*msubi)(_3613)),mdim1 ),((*msubj)(_3613)) );
          _ptr__3611[safe_add( _3607,_3613 )] = (((*mval)(_3613)) * _ptr__3601[_3598]);
          _ptr__3609[safe_add( safe_add( _3603,_3613 ),(int)1 )] = _3612;
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _3615,int _3616,std::shared_ptr< monty::ndarray< int,1 > > _3617,std::shared_ptr< monty::ndarray< int,1 > > _3618,std::shared_ptr< monty::ndarray< double,1 > > _3619,monty::rc_ptr< ::mosek::fusion::Expression > _3620){
  _checked_ptr_1<int> _ptr__3617(_3617 ? _3617->raw() : nullptr, _3617 ? _3617->size(0) : 0);
  _checked_ptr_1<int> _ptr__3618(_3618 ? _3618->raw() : nullptr, _3618 ? _3618->size(0) : 0);
  _checked_ptr_1<double> _ptr__3619(_3619 ? _3619->raw() : nullptr, _3619 ? _3619->size(0) : 0);
  int _3621 = _3620->getND();
  if ((_3621 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3615 < (int)0) || (_3616 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_3617)->size(0)) != (int)((_3618)->size(0))) || ((int)((_3617)->size(0)) != (int)((_3619)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3622 = (int)((_3617)->size(0));
  bool _3623 = false;
  bool _3624 = false;
  {
    int _8519 = (int)0;
    int _8520 = _3622;
    for (int _3625 = _8519; _3625 < _8520; ++_3625)
    {
      {
        if (((_ptr__3617[_3625] < (int)0) || ((_ptr__3617[_3625] >= _3615) || ((_ptr__3618[_3625] < (int)0) || (_ptr__3618[_3625] >= _3616)))))
        {
          {
            _3623 = true;
          }
        }
        {}
      }
    }
    int _8521 = (int)0;
    int _8522 = (_3622 - (int)1);
    for (int _3626 = _8521; _3626 < _8522; ++_3626)
    {
      {
        if (((_ptr__3617[_3626] > _ptr__3617[safe_add( _3626,(int)1 )]) || ((_ptr__3617[_3626] == _ptr__3617[safe_add( _3626,(int)1 )]) && (_ptr__3618[_3626] >= _ptr__3618[safe_add( _3626,(int)1 )]))))
        {
          {
            _3624 = true;
          }
        }
        {}
      }
    }
  }
  if (_3623)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3624)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3627,    int _3628,    std::shared_ptr< monty::ndarray< int,1 > > _3629,    std::shared_ptr< monty::ndarray< int,1 > > _3630,    std::shared_ptr< monty::ndarray< double,1 > > _3631,    monty::rc_ptr< ::mosek::fusion::Expression > _3632,    int _3633){ return new mosek::fusion::ExprMulRight(_3627,_3628,_3629,_3630,_3631,_3632,_3633); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3627,    int _3628,    std::shared_ptr< monty::ndarray< int,1 > > _3629,    std::shared_ptr< monty::ndarray< int,1 > > _3630,    std::shared_ptr< monty::ndarray< double,1 > > _3631,    monty::rc_ptr< ::mosek::fusion::Expression > _3632,    int _3633) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3627,_3628,_3629,_3630,_3631,_3632,_3633); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3627,    int _3628,    std::shared_ptr< monty::ndarray< int,1 > > _3629,    std::shared_ptr< monty::ndarray< int,1 > > _3630,    std::shared_ptr< monty::ndarray< double,1 > > _3631,    monty::rc_ptr< ::mosek::fusion::Expression > _3632,    int _3633){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3629(_3629 ? _3629->raw() : nullptr, _3629 ? _3629->size(0) : 0);
    _checked_ptr_1<int> _ptr__3630(_3630 ? _3630->raw() : nullptr, _3630 ? _3630->size(0) : 0);
    _checked_ptr_1<double> _ptr__3631(_3631 ? _3631->raw() : nullptr, _3631 ? _3631->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_3628,_3632->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _3627;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _3628;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _3629;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _3630;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _3631;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _3632;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3634,    int _3635,    std::shared_ptr< monty::ndarray< int,1 > > _3636,    std::shared_ptr< monty::ndarray< int,1 > > _3637,    std::shared_ptr< monty::ndarray< double,1 > > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){ return new mosek::fusion::ExprMulRight(_3634,_3635,_3636,_3637,_3638,_3639); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3634,    int _3635,    std::shared_ptr< monty::ndarray< int,1 > > _3636,    std::shared_ptr< monty::ndarray< int,1 > > _3637,    std::shared_ptr< monty::ndarray< double,1 > > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3634,_3635,_3636,_3637,_3638,_3639); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3634,    int _3635,    std::shared_ptr< monty::ndarray< int,1 > > _3636,    std::shared_ptr< monty::ndarray< int,1 > > _3637,    std::shared_ptr< monty::ndarray< double,1 > > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3636(_3636 ? _3636->raw() : nullptr, _3636 ? _3636->size(0) : 0);
    _checked_ptr_1<int> _ptr__3637(_3637 ? _3637->raw() : nullptr, _3637 ? _3637->size(0) : 0);
    _checked_ptr_1<double> _ptr__3638(_3638 ? _3638->raw() : nullptr, _3638 ? _3638->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_3634,_3635,_3636,_3637,_3638,_3639,::mosek::fusion::p_ExprMulRight::validate(_3634,_3635,_3636,_3637,_3638,_3639));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3640,monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_3640,_3641,_3642); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3640,monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_3641,_3640,_3642);
  _3641->peek_expr();
  int _3643 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nd;
  bool _3644 = mosek::fusion::p_WorkStack::_get_impl(_3641)->hassp;
  int _3645 = (int)((mval)->size(0));
  bool _3646 = (_3645 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  int _3647 = ((*mosek::fusion::p_WorkStack::_get_impl(_3641)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base));
  if (_3646)
  {
    {
      int _3648 = _3642->alloci32(safe_add( mdim1,(int)1 ));
      int _3649 = _3642->alloci32(_3645);
      int _3650 = _3642->alloci32(safe_add( _3647,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3651 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i32;
      _checked_ptr_1<int> _ptr__3651(_3651 ? _3651->raw() : nullptr,_3651 ? _3651->size(0) : 0);
      int _8523 = (int)0;
      int _8524 = safe_add( mdim1,(int)1 );
      for (int _3652 = _8523; _3652 < _8524; ++_3652)
      {
        {
          _ptr__3651[safe_add( _3648,_3652 )] = (int)0;
        }
      }
      int _8525 = (int)0;
      int _8526 = _3645;
      for (int _3653 = _8525; _3653 < _8526; ++_3653)
      {
        {
          ++ _ptr__3651[safe_add( safe_add( _3648,((*msubj)(_3653)) ),(int)1 )];
        }
      }
      int _8527 = (int)0;
      int _8528 = mdim1;
      for (int _3654 = _8527; _3654 < _8528; ++_3654)
      {
        {
          _ptr__3651[safe_add( safe_add( _3648,_3654 ),(int)1 )] += _ptr__3651[safe_add( _3648,_3654 )];
        }
      }
      int _8529 = (int)0;
      int _8530 = _3645;
      for (int _3655 = _8529; _3655 < _8530; ++_3655)
      {
        {
          _ptr__3651[safe_add( _3649,_3655 )] = _ptr__3651[safe_add( _3648,((*msubj)(_3655)) )];
          ++ _ptr__3651[safe_add( _3648,((*msubj)(_3655)) )];
        }
      }
      int _8531 = (int)0;
      int _8532 = mdim1;
      for (int _3656 = _8531; _3656 < _8532; ++_3656)
      {
        {
          _ptr__3651[(safe_add( _3648,mdim1 ) - _3656)] = _ptr__3651[((safe_add( _3648,mdim1 ) - _3656) - (int)1)];
        }
      }
      _ptr__3651[_3648] = (int)0;
      int _8533 = (int)0;
      int _8534 = safe_add( _3647,(int)1 );
      for (int _3657 = _8533; _3657 < _8534; ++_3657)
      {
        {
          _ptr__3651[safe_add( _3650,_3657 )] = (int)0;
        }
      }
      _3641->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3658 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
      _checked_ptr_1<int> _ptr__3658(_3658 ? _3658->raw() : nullptr,_3658 ? _3658->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3659 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
      _checked_ptr_1<long long> _ptr__3659(_3659 ? _3659->raw() : nullptr,_3659 ? _3659->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3660 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
      _checked_ptr_1<double> _ptr__3660(_3660 ? _3660->raw() : nullptr,_3660 ? _3660->size(0) : 0);
      int _3661 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nd;
      if ((_3661 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      int _3662 = ((*mosek::fusion::p_WorkStack::_get_impl(_3641)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base));
      int _3663 = ((*mosek::fusion::p_WorkStack::_get_impl(_3641)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base,(int)1 )));
      int _3664 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nelem;
      int _3665 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nnz;
      int _3666 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ptr_base;
      int _3667 = mosek::fusion::p_WorkStack::_get_impl(_3641)->sp_base;
      int _3668 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nidxs_base;
      int _3669 = mosek::fusion::p_WorkStack::_get_impl(_3641)->bfix_base;
      int _3670 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cof_base;
      if (_3644)
      {
        {
          int _8535 = (int)0;
          int _8536 = _3664;
          for (int _3671 = _8535; _3671 < _8536; ++_3671)
          {
            {
              ++ _ptr__3651[safe_add( safe_add( _3650,(_ptr__3659[safe_add( _3667,_3671 )] / _3663) ),(int)1 )];
            }
          }
          int _8537 = (int)0;
          int _8538 = _3662;
          for (int _3672 = _8537; _3672 < _8538; ++_3672)
          {
            {
              _ptr__3651[safe_add( safe_add( _3650,_3672 ),(int)1 )] += _ptr__3651[safe_add( _3650,_3672 )];
            }
          }
          int _3673 = (int)0;
          long long _3674 = (long long)0;
          int _8539 = (int)0;
          int _8540 = _3662;
          for (int _3675 = _8539; _3675 < _8540; ++_3675)
          {
            {
              int _8541 = (int)0;
              int _8542 = mdim1;
              for (int _3676 = _8541; _3676 < _8542; ++_3676)
              {
                {
                  bool _3677 = false;
                  int _3678 = _ptr__3651[safe_add( safe_add( _3650,_3675 ),(int)1 )];
                  int _3679 = _ptr__3651[safe_add( _3650,_3675 )];
                  int _3680 = _ptr__3651[safe_add( safe_add( _3648,_3676 ),(int)1 )];
                  int _3681 = _ptr__3651[safe_add( _3648,_3676 )];
                  while ( ((_3679 < _3678) && (_3681 < _3680)) )
                  {
                    {
                      int _3682 = _ptr__3651[safe_add( _3649,_3681 )];
                      if (((_ptr__3659[safe_add( _3667,_3679 )] % _3663) < ((*msubi)(_3682))))
                      {
                        {
                          ++ _3679;
                        }
                      }
                      else if(((_ptr__3659[safe_add( _3667,_3679 )] % _3663) > ((*msubi)(_3682))))
                      {
                        {
                          ++ _3681;
                        }
                      }
                      else
                      {
                        {
                          _3674 += (_ptr__3658[safe_add( safe_add( _3666,_3679 ),(int)1 )] - _ptr__3658[safe_add( _3666,_3679 )]);
                          ++ _3679;
                          ++ _3681;
                          _3677 = true;
                        }
                      }
                    }
                  }
                  if (_3677)
                  {
                    {
                      ++ _3673;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _3683 = (_3673 < safe_mul( _3662,mdim1 ));
          _3640->alloc_expr((int)2,_3673,(int)_3674,_3683);
          int _3684 = mosek::fusion::p_WorkStack::_get_impl(_3640)->ptr_base;
          int _3685 = mosek::fusion::p_WorkStack::_get_impl(_3640)->nidxs_base;
          int _8543;
          bool _8544 = _3683;
          if (_8544)
          {
            _8543 = mosek::fusion::p_WorkStack::_get_impl(_3640)->sp_base;
          }
          else
          {
            _8543 = _3640->alloci64(_3673);
          }
          int _3686 = _8543;
          int _3687 = mosek::fusion::p_WorkStack::_get_impl(_3640)->cof_base;
          int _3688 = mosek::fusion::p_WorkStack::_get_impl(_3640)->bfix_base;
          int _3689 = mosek::fusion::p_WorkStack::_get_impl(_3640)->shape_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3690 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i32;
          _checked_ptr_1<int> _ptr__3690(_3690 ? _3690->raw() : nullptr,_3690 ? _3690->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3691 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i64;
          _checked_ptr_1<long long> _ptr__3691(_3691 ? _3691->raw() : nullptr,_3691 ? _3691->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3692 = mosek::fusion::p_WorkStack::_get_impl(_3640)->f64;
          _checked_ptr_1<double> _ptr__3692(_3692 ? _3692->raw() : nullptr,_3692 ? _3692->size(0) : 0);
          _ptr__3690[_3689] = _3662;
          _ptr__3690[safe_add( _3689,(int)1 )] = mdim1;
          int _3693 = (int)0;
          int _3694 = (int)0;
          _ptr__3690[_3684] = (int)0;
          int _8545 = (int)0;
          int _8546 = _3662;
          for (int _3695 = _8545; _3695 < _8546; ++_3695)
          {
            {
              int _8547 = (int)0;
              int _8548 = mdim1;
              for (int _3696 = _8547; _3696 < _8548; ++_3696)
              {
                {
                  double _3697 = 0.0;
                  int _3698 = (int)0;
                  int _3699 = _ptr__3651[safe_add( safe_add( _3650,_3695 ),(int)1 )];
                  int _3700 = _ptr__3651[safe_add( _3650,_3695 )];
                  int _3701 = _ptr__3651[safe_add( safe_add( _3648,_3696 ),(int)1 )];
                  int _3702 = _ptr__3651[safe_add( _3648,_3696 )];
                  while ( ((_3700 < _3699) && (_3702 < _3701)) )
                  {
                    {
                      int _3703 = _ptr__3651[safe_add( _3649,_3702 )];
                      if (((_ptr__3659[safe_add( _3667,_3700 )] % _3663) < ((*msubi)(_3703))))
                      {
                        {
                          ++ _3700;
                        }
                      }
                      else if(((_ptr__3659[safe_add( _3667,_3700 )] % _3663) > ((*msubi)(_3703))))
                      {
                        {
                          ++ _3702;
                        }
                      }
                      else
                      {
                        {
                          int _3704 = (_ptr__3658[safe_add( safe_add( _3666,_3700 ),(int)1 )] - _ptr__3658[safe_add( _3666,_3700 )]);
                          _3697 += (((*mval)(_3703)) * _ptr__3660[safe_add( _3669,_3700 )]);
                          int _8549 = (int)0;
                          int _8550 = _3704;
                          for (int _3705 = _8549; _3705 < _8550; ++_3705)
                          {
                            {
                              _ptr__3691[safe_add( safe_add( _3685,_3694 ),_3705 )] = _ptr__3659[safe_add( safe_add( _3668,_ptr__3658[safe_add( _3666,_3700 )] ),_3705 )];
                            }
                          }
                          int _8551 = (int)0;
                          int _8552 = _3704;
                          for (int _3706 = _8551; _3706 < _8552; ++_3706)
                          {
                            {
                              _ptr__3692[safe_add( safe_add( _3687,_3694 ),_3706 )] = (_ptr__3660[safe_add( safe_add( _3670,_ptr__3658[safe_add( _3666,_3700 )] ),_3706 )] * ((*mval)(_3703)));
                            }
                          }
                          _3698 += _3704;
                          ++ _3700;
                          ++ _3702;
                        }
                      }
                    }
                  }
                  if ((_3698 > (int)0))
                  {
                    {
                      _3694 += _3698;
                      _ptr__3690[safe_add( safe_add( _3684,_3693 ),(int)1 )] = _3694;
                      _ptr__3692[safe_add( _3688,_3693 )] = _3697;
                      _ptr__3691[safe_add( _3686,_3693 )] = safe_add( safe_mul( _3695,mdim1 ),_3696 );
                      ++ _3693;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((!_3683))
          {
            {
              _3640->popi64(_3673);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _3707 = safe_mul( _3662,mdim1 );
          int _3708 = (int)0;
          int _8553 = (int)0;
          int _8554 = _3662;
          for (int _3709 = _8553; _3709 < _8554; ++_3709)
          {
            {
              int _8555 = (int)0;
              int _8556 = mdim1;
              for (int _3710 = _8555; _3710 < _8556; ++_3710)
              {
                {
                  int _8557 = _ptr__3651[safe_add( _3648,_3710 )];
                  int _8558 = _ptr__3651[safe_add( safe_add( _3648,_3710 ),(int)1 )];
                  for (int _3711 = _8557; _3711 < _8558; ++_3711)
                  {
                    {
                      int _3712 = _ptr__3651[safe_add( _3649,_3711 )];
                      int _3713 = safe_add( safe_mul( _3709,_3663 ),((*msubi)(_3712)) );
                      _3708 += (_ptr__3658[safe_add( safe_add( _3666,_3713 ),(int)1 )] - _ptr__3658[safe_add( _3666,_3713 )]);
                    }
                  }
                }
              }
            }
          }
          bool _3714 = (_3707 < safe_mul( _3662,mdim1 ));
          if ((!(_3708 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
            }
          }
          {}
          _3640->alloc_expr((int)2,_3707,(int)_3708,_3714);
          int _3715 = mosek::fusion::p_WorkStack::_get_impl(_3640)->ptr_base;
          int _3716 = mosek::fusion::p_WorkStack::_get_impl(_3640)->nidxs_base;
          int _8559;
          bool _8560 = _3714;
          if (_8560)
          {
            _8559 = mosek::fusion::p_WorkStack::_get_impl(_3640)->sp_base;
          }
          else
          {
            _8559 = _3640->alloci64(_3707);
          }
          int _3717 = _8559;
          int _3718 = mosek::fusion::p_WorkStack::_get_impl(_3640)->cof_base;
          int _3719 = mosek::fusion::p_WorkStack::_get_impl(_3640)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3720 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i32;
          _checked_ptr_1<int> _ptr__3720(_3720 ? _3720->raw() : nullptr,_3720 ? _3720->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3721 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i64;
          _checked_ptr_1<long long> _ptr__3721(_3721 ? _3721->raw() : nullptr,_3721 ? _3721->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3722 = mosek::fusion::p_WorkStack::_get_impl(_3640)->f64;
          _checked_ptr_1<double> _ptr__3722(_3722 ? _3722->raw() : nullptr,_3722 ? _3722->size(0) : 0);
          int _3723 = (int)0;
          int _3724 = (int)0;
          _ptr__3720[_3715] = (int)0;
          int _8561 = (int)0;
          int _8562 = _3662;
          for (int _3725 = _8561; _3725 < _8562; ++_3725)
          {
            {
              int _8563 = (int)0;
              int _8564 = mdim1;
              for (int _3726 = _8563; _3726 < _8564; ++_3726)
              {
                {
                  int _3727 = safe_mul( _3725,_3663 );
                  double _3728 = 0.0;
                  int _8565 = _ptr__3651[safe_add( _3648,_3726 )];
                  int _8566 = _ptr__3651[safe_add( safe_add( _3648,_3726 ),(int)1 )];
                  for (int _3729 = _8565; _3729 < _8566; ++_3729)
                  {
                    {
                      int _3730 = _ptr__3651[safe_add( _3649,_3729 )];
                      int _3731 = safe_add( _3727,((*msubi)(_3730)) );
                      int _3732 = _ptr__3658[safe_add( _3666,_3731 )];
                      int _3733 = (_ptr__3658[safe_add( safe_add( _3666,_3731 ),(int)1 )] - _ptr__3658[safe_add( _3666,_3731 )]);
                      int _8567 = (int)0;
                      int _8568 = _3733;
                      for (int _3734 = _8567; _3734 < _8568; ++_3734)
                      {
                        {
                          _ptr__3721[safe_add( safe_add( _3716,_3724 ),_3734 )] = _ptr__3659[safe_add( safe_add( _3668,_3732 ),_3734 )];
                        }
                      }
                      int _8569 = (int)0;
                      int _8570 = _3733;
                      for (int _3735 = _8569; _3735 < _8570; ++_3735)
                      {
                        {
                          _ptr__3722[safe_add( safe_add( _3718,_3724 ),_3735 )] = (_ptr__3660[safe_add( safe_add( _3670,_3732 ),_3735 )] * ((*mval)(_3730)));
                        }
                      }
                      _3728 += (_ptr__3660[safe_add( safe_add( _3669,_3727 ),((*msubi)(_3730)) )] * ((*mval)(_3730)));
                      _3724 += _3733;
                    }
                  }
                  _ptr__3720[safe_add( safe_add( _3715,_3723 ),(int)1 )] = _3724;
                  _ptr__3722[safe_add( _3719,_3723 )] = _3728;
                  _ptr__3721[safe_add( _3717,_3723 )] = safe_add( safe_mul( _3725,mdim1 ),_3726 );
                  ++ _3723;
                }
              }
            }
          }
          if ((!_3714))
          {
            {
              _3640->popi64(_3707);
            }
          }
          {}
        }
      }
      _3642->clear();
    }
  }
  else
  {
    {
      int _3736 = _3642->alloci32(safe_add( _3647,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3737 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i32;
      _checked_ptr_1<int> _ptr__3737(_3737 ? _3737->raw() : nullptr,_3737 ? _3737->size(0) : 0);
      int _8571 = (int)0;
      int _8572 = safe_add( _3647,(int)1 );
      for (int _3738 = _8571; _3738 < _8572; ++_3738)
      {
        {
          _ptr__3737[safe_add( _3736,_3738 )] = (int)0;
        }
      }
      _3641->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3739 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
      _checked_ptr_1<int> _ptr__3739(_3739 ? _3739->raw() : nullptr,_3739 ? _3739->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3740 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
      _checked_ptr_1<long long> _ptr__3740(_3740 ? _3740->raw() : nullptr,_3740 ? _3740->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3741 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
      _checked_ptr_1<double> _ptr__3741(_3741 ? _3741->raw() : nullptr,_3741 ? _3741->size(0) : 0);
      int _3742 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nd;
      int _3743 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nelem;
      int _3744 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nnz;
      bool _3745 = mosek::fusion::p_WorkStack::_get_impl(_3641)->hassp;
      int _3746 = _3744;
      int _3747 = _3743;
      int _3748 = mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base;
      int _3749 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ptr_base;
      int _3750 = mosek::fusion::p_WorkStack::_get_impl(_3641)->sp_base;
      int _3751 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nidxs_base;
      int _3752 = mosek::fusion::p_WorkStack::_get_impl(_3641)->bfix_base;
      int _3753 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cof_base;
      int _3754 = _ptr__3739[_3748];
      int _3755 = _ptr__3739[safe_add( _3748,(int)1 )];
      if ((_3742 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _3756 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
      _checked_ptr_1<int> _ptr__3756(_3756 ? _3756->raw() : nullptr,_3756 ? _3756->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3757 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
      _checked_ptr_1<long long> _ptr__3757(_3757 ? _3757->raw() : nullptr,_3757 ? _3757->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3758 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
      _checked_ptr_1<double> _ptr__3758(_3758 ? _3758->raw() : nullptr,_3758 ? _3758->size(0) : 0);
      int _3759 = safe_mul( _3754,mdim1 );
      long long _3760 = safe_mul( (long long)_3744,mdim1 );
      bool _3761 = false;
      int _3762 = (int)2;
      if ((!(_3760 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
        }
      }
      {}
      _3640->alloc_expr(_3762,_3759,(int)_3760,_3761);
      std::shared_ptr< monty::ndarray< int,1 > > _3763 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i32;
      _checked_ptr_1<int> _ptr__3763(_3763 ? _3763->raw() : nullptr,_3763 ? _3763->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3764 = mosek::fusion::p_WorkStack::_get_impl(_3640)->i64;
      _checked_ptr_1<long long> _ptr__3764(_3764 ? _3764->raw() : nullptr,_3764 ? _3764->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3765 = mosek::fusion::p_WorkStack::_get_impl(_3640)->f64;
      _checked_ptr_1<double> _ptr__3765(_3765 ? _3765->raw() : nullptr,_3765 ? _3765->size(0) : 0);
      int _3766 = mosek::fusion::p_WorkStack::_get_impl(_3640)->shape_base;
      int _3767 = mosek::fusion::p_WorkStack::_get_impl(_3640)->ptr_base;
      int _3768 = mosek::fusion::p_WorkStack::_get_impl(_3640)->nidxs_base;
      int _3769 = mosek::fusion::p_WorkStack::_get_impl(_3640)->sp_base;
      int _3770 = mosek::fusion::p_WorkStack::_get_impl(_3640)->cof_base;
      int _3771 = mosek::fusion::p_WorkStack::_get_impl(_3640)->bfix_base;
      _ptr__3763[_3766] = _3754;
      _ptr__3763[safe_add( _3766,(int)1 )] = mdim1;
      int _3772 = (int)0;
      int _3773 = (int)0;
      _ptr__3763[_3767] = (int)0;
      if (_3745)
      {
        {
          int _8573 = (int)0;
          int _8574 = _3743;
          for (int _3774 = _8573; _3774 < _8574; ++_3774)
          {
            {
              ++ _ptr__3737[safe_add( safe_add( _3736,(_ptr__3757[safe_add( _3750,_3774 )] / _3755) ),(int)1 )];
            }
          }
          int _8575 = (int)0;
          int _8576 = _3754;
          for (int _3775 = _8575; _3775 < _8576; ++_3775)
          {
            {
              _ptr__3737[safe_add( safe_add( _3736,_3775 ),(int)1 )] += _ptr__3737[safe_add( _3736,_3775 )];
            }
          }
          int _8577 = (int)0;
          int _8578 = _3754;
          for (int _3776 = _8577; _3776 < _8578; ++_3776)
          {
            {
              int _8579 = (int)0;
              int _8580 = mdim1;
              for (int _3777 = _8579; _3777 < _8580; ++_3777)
              {
                {
                  double _3778 = 0.0;
                  int _3779 = (int)0;
                  int _8581 = _ptr__3737[safe_add( _3736,_3776 )];
                  int _8582 = _ptr__3737[safe_add( safe_add( _3736,_3776 ),(int)1 )];
                  for (int _3780 = _8581; _3780 < _8582; ++_3780)
                  {
                    {
                      long long _3781 = safe_add( _3777,safe_mul( (_ptr__3757[safe_add( _3750,_3780 )] % _3755),mdim1 ) );
                      _3778 += (_ptr__3758[safe_add( _3752,_3780 )] * ((*mval)(_3781)));
                      int _8583 = _ptr__3756[safe_add( _3749,_3780 )];
                      int _8584 = _ptr__3756[safe_add( safe_add( _3749,_3780 ),(int)1 )];
                      for (int _3782 = _8583; _3782 < _8584; ++_3782)
                      {
                        {
                          _ptr__3764[safe_add( safe_add( _3768,_3772 ),_3779 )] = _ptr__3757[safe_add( _3751,_3782 )];
                          _ptr__3765[safe_add( safe_add( _3770,_3772 ),_3779 )] = (_ptr__3758[safe_add( _3753,_3782 )] * ((*mval)(_3781)));
                          ++ _3779;
                        }
                      }
                    }
                  }
                  _3772 += _3779;
                  _ptr__3763[safe_add( safe_add( _3767,_3773 ),(int)1 )] = _3772;
                  _ptr__3765[safe_add( _3771,_3773 )] = _3778;
                  ++ _3773;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _8585 = (int)0;
          int _8586 = _3754;
          for (int _3783 = _8585; _3783 < _8586; ++_3783)
          {
            {
              int _8587 = (int)0;
              int _8588 = mdim1;
              for (int _3784 = _8587; _3784 < _8588; ++_3784)
              {
                {
                  double _3785 = 0.0;
                  int _3786 = (int)0;
                  int _8589 = (int)0;
                  int _8590 = _3755;
                  for (int _3787 = _8589; _3787 < _8590; ++_3787)
                  {
                    {
                      int _3788 = safe_add( safe_mul( _3783,_3755 ),_3787 );
                      int _3789 = safe_add( _3784,safe_mul( _3787,mdim1 ) );
                      _3785 += (_ptr__3758[safe_add( _3752,_3788 )] * ((*mval)(_3789)));
                      int _8591 = _ptr__3756[safe_add( _3749,_3788 )];
                      int _8592 = _ptr__3756[safe_add( safe_add( _3749,_3788 ),(int)1 )];
                      for (int _3790 = _8591; _3790 < _8592; ++_3790)
                      {
                        {
                          _ptr__3764[safe_add( safe_add( _3768,_3772 ),_3786 )] = _ptr__3757[safe_add( _3751,_3790 )];
                          _ptr__3765[safe_add( safe_add( _3770,_3772 ),_3786 )] = (_ptr__3758[safe_add( _3753,_3790 )] * ((*mval)(_3789)));
                          ++ _3786;
                        }
                      }
                    }
                  }
                  _3772 += _3786;
                  _ptr__3763[safe_add( safe_add( _3767,_3773 ),(int)1 )] = _3772;
                  _ptr__3765[safe_add( _3771,_3773 )] = _3785;
                  ++ _3773;
                }
              }
            }
          }
        }
      }
      _3642->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _3791,std::shared_ptr< monty::ndarray< int,1 > > _3792){
  _checked_ptr_1<int> _ptr__3792(_3792 ? _3792->raw() : nullptr, _3792 ? _3792->size(0) : 0);
  if (((int)((_3792)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_3791)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__3792[(int)0]),(int)(_3791)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _3793,int _3794,std::shared_ptr< monty::ndarray< int,1 > > _3795,std::shared_ptr< monty::ndarray< int,1 > > _3796,std::shared_ptr< monty::ndarray< double,1 > > _3797,monty::rc_ptr< ::mosek::fusion::Expression > _3798){
  _checked_ptr_1<int> _ptr__3795(_3795 ? _3795->raw() : nullptr, _3795 ? _3795->size(0) : 0);
  _checked_ptr_1<int> _ptr__3796(_3796 ? _3796->raw() : nullptr, _3796 ? _3796->size(0) : 0);
  _checked_ptr_1<double> _ptr__3797(_3797 ? _3797->raw() : nullptr, _3797 ? _3797->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3799 = _3798->getShape();
  _checked_ptr_1<int> _ptr__3799(_3799 ? _3799->raw() : nullptr,_3799 ? _3799->size(0) : 0);
  if (((int)((_3799)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3800 = _ptr__3799[(int)0];
  int _3801 = _ptr__3799[(int)1];
  if (((_3793 < (int)0) || ((_3794 < (int)0) || ((_3800 < (int)0) || (_3801 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3793 != _3801))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3795)->size(0)) != (int)((_3796)->size(0))) || ((int)((_3795)->size(0)) != (int)((_3797)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3802 = (int)((_3795)->size(0));
  {
    bool _3803 = false;
    int _8593 = (int)0;
    int _8594 = _3802;
    for (int _3804 = _8593; _3804 < _8594; ++_3804)
    {
      {
        _3803 = (_3803 || ((_ptr__3795[_3804] < (int)0) || ((_ptr__3795[_3804] >= _3793) || ((_ptr__3796[_3804] < (int)0) || (_ptr__3796[_3804] >= _3794)))));
      }
    }
    if (_3803)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _3805 = false;
    int _8595 = (int)0;
    int _8596 = (_3802 - (int)1);
    for (int _3806 = _8595; _3806 < _8596; ++_3806)
    {
      {
        _3805 = (_3805 || ((_ptr__3795[_3806] > _ptr__3795[safe_add( _3806,(int)1 )]) || ((_ptr__3795[_3806] == _ptr__3795[safe_add( _3806,(int)1 )]) && (_ptr__3796[_3806] >= _ptr__3796[safe_add( _3806,(int)1 )]))));
      }
    }
    if (_3805)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3807,    int _3808,    std::shared_ptr< monty::ndarray< int,1 > > _3809,    std::shared_ptr< monty::ndarray< int,1 > > _3810,    std::shared_ptr< monty::ndarray< double,1 > > _3811,    monty::rc_ptr< ::mosek::fusion::Expression > _3812,    int _3813){ return new mosek::fusion::ExprMulLeft(_3807,_3808,_3809,_3810,_3811,_3812,_3813); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3807,    int _3808,    std::shared_ptr< monty::ndarray< int,1 > > _3809,    std::shared_ptr< monty::ndarray< int,1 > > _3810,    std::shared_ptr< monty::ndarray< double,1 > > _3811,    monty::rc_ptr< ::mosek::fusion::Expression > _3812,    int _3813) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3807,_3808,_3809,_3810,_3811,_3812,_3813); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3807,    int _3808,    std::shared_ptr< monty::ndarray< int,1 > > _3809,    std::shared_ptr< monty::ndarray< int,1 > > _3810,    std::shared_ptr< monty::ndarray< double,1 > > _3811,    monty::rc_ptr< ::mosek::fusion::Expression > _3812,    int _3813){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3809(_3809 ? _3809->raw() : nullptr, _3809 ? _3809->size(0) : 0);
    _checked_ptr_1<int> _ptr__3810(_3810 ? _3810->raw() : nullptr, _3810 ? _3810->size(0) : 0);
    _checked_ptr_1<double> _ptr__3811(_3811 ? _3811->raw() : nullptr, _3811 ? _3811->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_3807,_3808,_3812->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _3807;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _3808;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _3809;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _3810;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _3811;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _3812;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3814,    int _3815,    std::shared_ptr< monty::ndarray< int,1 > > _3816,    std::shared_ptr< monty::ndarray< int,1 > > _3817,    std::shared_ptr< monty::ndarray< double,1 > > _3818,    monty::rc_ptr< ::mosek::fusion::Expression > _3819){ return new mosek::fusion::ExprMulLeft(_3814,_3815,_3816,_3817,_3818,_3819); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3814,    int _3815,    std::shared_ptr< monty::ndarray< int,1 > > _3816,    std::shared_ptr< monty::ndarray< int,1 > > _3817,    std::shared_ptr< monty::ndarray< double,1 > > _3818,    monty::rc_ptr< ::mosek::fusion::Expression > _3819) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3814,_3815,_3816,_3817,_3818,_3819); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3814,    int _3815,    std::shared_ptr< monty::ndarray< int,1 > > _3816,    std::shared_ptr< monty::ndarray< int,1 > > _3817,    std::shared_ptr< monty::ndarray< double,1 > > _3818,    monty::rc_ptr< ::mosek::fusion::Expression > _3819){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3816(_3816 ? _3816->raw() : nullptr, _3816 ? _3816->size(0) : 0);
    _checked_ptr_1<int> _ptr__3817(_3817 ? _3817->raw() : nullptr, _3817 ? _3817->size(0) : 0);
    _checked_ptr_1<double> _ptr__3818(_3818 ? _3818->raw() : nullptr, _3818 ? _3818->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_3814,_3815,_3816,_3817,_3818,_3819,::mosek::fusion::p_ExprMulLeft::validate(_3814,_3815,_3816,_3817,_3818,_3819));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3820,monty::rc_ptr< ::mosek::fusion::WorkStack > _3821,monty::rc_ptr< ::mosek::fusion::WorkStack > _3822) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_3820,_3821,_3822); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3820,monty::rc_ptr< ::mosek::fusion::WorkStack > _3821,monty::rc_ptr< ::mosek::fusion::WorkStack > _3822){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_3821,_3820,_3822);
  _3821->pop_expr();
  int _3823 = mosek::fusion::p_WorkStack::_get_impl(_3821)->nd;
  int _3824 = mosek::fusion::p_WorkStack::_get_impl(_3821)->nnz;
  int _3825 = mosek::fusion::p_WorkStack::_get_impl(_3821)->nelem;
  bool _3826 = mosek::fusion::p_WorkStack::_get_impl(_3821)->hassp;
  int _3827 = mosek::fusion::p_WorkStack::_get_impl(_3821)->shape_base;
  int _3828 = mosek::fusion::p_WorkStack::_get_impl(_3821)->ptr_base;
  int _3829 = mosek::fusion::p_WorkStack::_get_impl(_3821)->sp_base;
  int _3830 = mosek::fusion::p_WorkStack::_get_impl(_3821)->nidxs_base;
  int _3831 = mosek::fusion::p_WorkStack::_get_impl(_3821)->bfix_base;
  int _3832 = mosek::fusion::p_WorkStack::_get_impl(_3821)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _3833 = mosek::fusion::p_WorkStack::_get_impl(_3821)->i32;
  _checked_ptr_1<int> _ptr__3833(_3833 ? _3833->raw() : nullptr,_3833 ? _3833->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3834 = mosek::fusion::p_WorkStack::_get_impl(_3821)->i64;
  _checked_ptr_1<long long> _ptr__3834(_3834 ? _3834->raw() : nullptr,_3834 ? _3834->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3835 = mosek::fusion::p_WorkStack::_get_impl(_3821)->f64;
  _checked_ptr_1<double> _ptr__3835(_3835 ? _3835->raw() : nullptr,_3835 ? _3835->size(0) : 0);
  if ((_3823 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3836 = (int)9999;
  int _3837 = (int)9999;
  int _3838 = (int)9999;
  int _3839 = _ptr__3833[_3827];
  int _3840 = _ptr__3833[safe_add( _3827,(int)1 )];
  int _3841 = (int)((msubi)->size(0));
  bool _3842 = (_3841 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _3843 = false;
  int _3844 = (int)0;
  long long _3845 = (long long)0;
  if (_3826)
  {
    {
      _3836 = _3822->alloci32(_3825);
      _3837 = _3822->alloci32(_3825);
      _3838 = _3822->alloci32(safe_add( _3840,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3846 = mosek::fusion::p_WorkStack::_get_impl(_3822)->i32;
      _checked_ptr_1<int> _ptr__3846(_3846 ? _3846->raw() : nullptr,_3846 ? _3846->size(0) : 0);
      int _8597 = (int)0;
      int _8598 = safe_add( _3840,(int)1 );
      for (int _3847 = _8597; _3847 < _8598; ++_3847)
      {
        {
          _ptr__3846[safe_add( _3838,_3847 )] = (int)0;
        }
      }
      int _8599 = (int)0;
      int _8600 = _3825;
      for (int _3848 = _8599; _3848 < _8600; ++_3848)
      {
        {
          ++ _ptr__3846[safe_add( safe_add( _3838,(_ptr__3834[safe_add( _3829,_3848 )] % _3840) ),(int)1 )];
        }
      }
      int _8601 = (int)0;
      int _8602 = _3840;
      for (int _3849 = _8601; _3849 < _8602; ++_3849)
      {
        {
          _ptr__3846[safe_add( safe_add( _3838,_3849 ),(int)1 )] += _ptr__3846[safe_add( _3838,_3849 )];
        }
      }
      int _8603 = (int)0;
      int _8604 = _3825;
      for (int _3850 = _8603; _3850 < _8604; ++_3850)
      {
        {
          long long _3851 = (_ptr__3834[safe_add( _3829,_3850 )] % _3840);
          _ptr__3846[safe_add( _3836,_ptr__3846[safe_add( _3838,_3851 )] )] = _3850;
          ++ _ptr__3846[safe_add( _3838,_3851 )];
        }
      }
      int _8605 = (int)0;
      int _8606 = _3840;
      for (int _3852 = _8605; _3852 < _8606; ++_3852)
      {
        {
          _ptr__3846[(safe_add( _3838,_3840 ) - _3852)] = _ptr__3846[((safe_add( _3838,_3840 ) - _3852) - (int)1)];
        }
      }
      _ptr__3846[_3838] = (int)0;
      if (_3842)
      {
        {
          int _3853 = (int)0;
          while ( (_3853 < _3841) )
          {
            {
              int _3854 = ((*msubi)(_3853));
              int _3855 = safe_add( _3853,(int)1 );
              while ( ((_3855 < _3841) && (((*msubi)(_3855)) == ((*msubi)(_3853)))) )
              {
                {
                  ++ _3855;
                }
              }
              int _8607 = (int)0;
              int _8608 = _3840;
              for (int _3856 = _8607; _3856 < _8608; ++_3856)
              {
                {
                  bool _3857 = false;
                  int _3858 = _3855;
                  int _3859 = _3853;
                  int _3860 = _ptr__3846[safe_add( safe_add( _3838,_3856 ),(int)1 )];
                  int _3861 = _ptr__3846[safe_add( _3838,_3856 )];
                  while ( ((_3859 < _3858) && (_3861 < _3860)) )
                  {
                    {
                      int _3862 = _ptr__3846[safe_add( _3836,_3861 )];
                      if ((((*msubj)(_3859)) < (_ptr__3834[safe_add( _3829,_3862 )] / _3840)))
                      {
                        {
                          ++ _3859;
                        }
                      }
                      else if((((*msubj)(_3859)) > (_ptr__3834[safe_add( _3829,_3862 )] / _3840)))
                      {
                        {
                          ++ _3861;
                        }
                      }
                      else
                      {
                        {
                          _3857 = true;
                          _3845 += (_ptr__3833[safe_add( safe_add( _3828,_3862 ),(int)1 )] - _ptr__3833[safe_add( _3828,_3862 )]);
                          ++ _3861;
                          ++ _3859;
                        }
                      }
                    }
                  }
                  if (_3857)
                  {
                    {
                      ++ _3844;
                    }
                  }
                  {}
                }
              }
              _3853 = _3855;
            }
          }
        }
      }
      else
      {
        {
          _3844 = safe_mul( mdim0,_3840 );
          _3845 = safe_mul( (long long)_3824,mdim0 );
        }
      }
    }
  }
  else
  {
    {
      if (_3842)
      {
        {
          int _3863 = (int)0;
          while ( (_3863 < _3841) )
          {
            {
              int _3864 = safe_add( _3863,(int)1 );
              while ( ((_3864 < _3841) && (((*msubi)(_3863)) == ((*msubi)(_3864)))) )
              {
                {
                  ++ _3864;
                }
              }
              int _3865 = ((*msubi)(_3863));
              int _8609 = (int)0;
              int _8610 = _3840;
              for (int _3866 = _8609; _3866 < _8610; ++_3866)
              {
                {
                  bool _3867 = false;
                  int _8611 = _3863;
                  int _8612 = _3864;
                  for (int _3868 = _8611; _3868 < _8612; ++_3868)
                  {
                    {
                      int _3869 = safe_add( safe_mul( ((*msubj)(_3868)),_3840 ),_3866 );
                      _3845 += (_ptr__3833[safe_add( safe_add( _3828,_3869 ),(int)1 )] - _ptr__3833[safe_add( _3828,_3869 )]);
                      _3867 = true;
                    }
                  }
                  if (_3867)
                  {
                    {
                      ++ _3844;
                    }
                  }
                  {}
                }
              }
              _3863 = _3864;
            }
          }
        }
      }
      else
      {
        {
          _3845 = safe_mul( (long long)_3824,mdim0 );
          _3844 = safe_mul( mdim0,_3840 );
        }
      }
    }
  }
  if ((!(_3845 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceede in multiplication"));
    }
  }
  {}
  _3843 = (_3844 < safe_mul( mdim0,_3840 ));
  int _3870 = (int)2;
  _3820->alloc_expr(_3870,_3844,(int)_3845,_3843);
  int _3871 = mosek::fusion::p_WorkStack::_get_impl(_3820)->ptr_base;
  int _3872 = mosek::fusion::p_WorkStack::_get_impl(_3820)->nidxs_base;
  int _8613;
  bool _8614 = _3843;
  if (_8614)
  {
    _8613 = mosek::fusion::p_WorkStack::_get_impl(_3820)->sp_base;
  }
  else
  {
    _8613 = _3820->alloci64(_3844);
  }
  int _3873 = _8613;
  int _3874 = mosek::fusion::p_WorkStack::_get_impl(_3820)->cof_base;
  int _3875 = mosek::fusion::p_WorkStack::_get_impl(_3820)->bfix_base;
  int _3876 = mosek::fusion::p_WorkStack::_get_impl(_3820)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3877 = mosek::fusion::p_WorkStack::_get_impl(_3820)->i64;
  _checked_ptr_1<long long> _ptr__3877(_3877 ? _3877->raw() : nullptr,_3877 ? _3877->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3878 = mosek::fusion::p_WorkStack::_get_impl(_3820)->f64;
  _checked_ptr_1<double> _ptr__3878(_3878 ? _3878->raw() : nullptr,_3878 ? _3878->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3879 = mosek::fusion::p_WorkStack::_get_impl(_3820)->i32;
  _checked_ptr_1<int> _ptr__3879(_3879 ? _3879->raw() : nullptr,_3879 ? _3879->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3880 = mosek::fusion::p_WorkStack::_get_impl(_3822)->i32;
  _checked_ptr_1<int> _ptr__3880(_3880 ? _3880->raw() : nullptr,_3880 ? _3880->size(0) : 0);
  _ptr__3879[_3876] = mdim0;
  _ptr__3879[safe_add( _3876,(int)1 )] = _3840;
  if (_3826)
  {
    {
      _ptr__3879[_3871] = (int)0;
      if (_3842)
      {
        {
          int _3881 = (int)0;
          int _3882 = (int)0;
          int _3883 = (int)0;
          while ( (_3883 < _3841) )
          {
            {
              int _3884 = ((*msubi)(_3883));
              int _3885 = safe_add( _3883,(int)1 );
              while ( ((_3885 < _3841) && (((*msubi)(_3885)) == ((*msubi)(_3883)))) )
              {
                {
                  ++ _3885;
                }
              }
              int _8615 = (int)0;
              int _8616 = _3840;
              for (int _3886 = _8615; _3886 < _8616; ++_3886)
              {
                {
                  bool _3887 = false;
                  double _3888 = 0.0;
                  int _3889 = _3885;
                  int _3890 = _3883;
                  int _3891 = _ptr__3880[safe_add( safe_add( _3838,_3886 ),(int)1 )];
                  int _3892 = _ptr__3880[safe_add( _3838,_3886 )];
                  while ( ((_3890 < _3889) && (_3892 < _3891)) )
                  {
                    {
                      int _3893 = _ptr__3880[safe_add( _3836,_3892 )];
                      if ((((*msubj)(_3890)) < (_ptr__3834[safe_add( _3829,_3893 )] / _3840)))
                      {
                        {
                          ++ _3890;
                        }
                      }
                      else if((((*msubj)(_3890)) > (_ptr__3834[safe_add( _3829,_3893 )] / _3840)))
                      {
                        {
                          ++ _3892;
                        }
                      }
                      else
                      {
                        {
                          _3887 = true;
                          _3888 += (_ptr__3835[safe_add( _3831,_3893 )] * ((*mval)(_3890)));
                          int _3894 = (_ptr__3833[safe_add( safe_add( _3828,_3893 ),(int)1 )] - _ptr__3833[safe_add( _3828,_3893 )]);
                          int _8617 = (int)0;
                          int _8618 = _3894;
                          for (int _3895 = _8617; _3895 < _8618; ++_3895)
                          {
                            {
                              _ptr__3877[safe_add( safe_add( _3872,_3882 ),_3895 )] = _ptr__3834[safe_add( safe_add( _3830,_ptr__3833[safe_add( _3828,_3893 )] ),_3895 )];
                            }
                          }
                          int _8619 = (int)0;
                          int _8620 = _3894;
                          for (int _3896 = _8619; _3896 < _8620; ++_3896)
                          {
                            {
                              _ptr__3878[safe_add( safe_add( _3874,_3882 ),_3896 )] = (_ptr__3835[safe_add( safe_add( _3832,_ptr__3833[safe_add( _3828,_3893 )] ),_3896 )] * ((*mval)(_3890)));
                            }
                          }
                          ++ _3890;
                          ++ _3892;
                          _3882 += _3894;
                        }
                      }
                    }
                  }
                  if (_3887)
                  {
                    {
                      _ptr__3879[safe_add( safe_add( _3871,_3881 ),(int)1 )] = _3882;
                      _ptr__3877[safe_add( _3873,_3881 )] = safe_add( safe_mul( _3884,_3840 ),_3886 );
                      _ptr__3878[safe_add( _3875,_3881 )] = _3888;
                      ++ _3881;
                    }
                  }
                  {}
                }
              }
              _3883 = _3885;
            }
          }
        }
      }
      else
      {
        {
          int _3897 = (int)0;
          int _3898 = (int)0;
          int _8621 = (int)0;
          int _8622 = mdim0;
          for (int _3899 = _8621; _3899 < _8622; ++_3899)
          {
            {
              int _8623 = (int)0;
              int _8624 = _3840;
              for (int _3900 = _8623; _3900 < _8624; ++_3900)
              {
                {
                  double _3901 = 0.0;
                  int _8625 = _ptr__3880[safe_add( _3838,_3900 )];
                  int _8626 = _ptr__3880[safe_add( safe_add( _3838,_3900 ),(int)1 )];
                  for (int _3902 = _8625; _3902 < _8626; ++_3902)
                  {
                    {
                      int _3903 = _ptr__3880[safe_add( _3836,_3902 )];
                      long long _3904 = safe_add( safe_mul( _3899,mdim1 ),(_ptr__3834[safe_add( _3829,_3903 )] / _3840) );
                      _3901 += (_ptr__3835[safe_add( _3831,_3903 )] * ((*mval)(_3904)));
                      int _3905 = (_ptr__3833[safe_add( safe_add( _3828,_3903 ),(int)1 )] - _ptr__3833[safe_add( _3828,_3903 )]);
                      int _8627 = (int)0;
                      int _8628 = _3905;
                      for (int _3906 = _8627; _3906 < _8628; ++_3906)
                      {
                        {
                          _ptr__3877[safe_add( safe_add( _3872,_3898 ),_3906 )] = _ptr__3834[safe_add( safe_add( _3830,_ptr__3833[safe_add( _3828,_3903 )] ),_3906 )];
                          _ptr__3878[safe_add( safe_add( _3874,_3898 ),_3906 )] = (_ptr__3835[safe_add( safe_add( _3832,_ptr__3833[safe_add( _3828,_3903 )] ),_3906 )] * ((*mval)(_3904)));
                        }
                      }
                      _3898 += _3905;
                    }
                  }
                  _ptr__3879[safe_add( safe_add( _3871,_3897 ),(int)1 )] = _3898;
                  _ptr__3878[safe_add( _3875,_3897 )] = _3901;
                  ++ _3897;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _ptr__3879[_3871] = (int)0;
      int _3907 = (int)0;
      int _3908 = (int)0;
      int _3909 = (int)0;
      while ( (_3907 < _3841) )
      {
        {
          int _3910 = safe_add( _3907,(int)1 );
          while ( ((_3910 < _3841) && (((*msubi)(_3907)) == ((*msubi)(_3910)))) )
          {
            {
              ++ _3910;
            }
          }
          int _3911 = ((*msubi)(_3907));
          int _8629 = (int)0;
          int _8630 = _3840;
          for (int _3912 = _8629; _3912 < _8630; ++_3912)
          {
            {
              double _3913 = 0.0;
              bool _3914 = false;
              int _8631 = _3907;
              int _8632 = _3910;
              for (int _3915 = _8631; _3915 < _8632; ++_3915)
              {
                {
                  int _3916 = safe_add( safe_mul( ((*msubj)(_3915)),_3840 ),_3912 );
                  int _3917 = (_ptr__3833[safe_add( safe_add( _3828,_3916 ),(int)1 )] - _ptr__3833[safe_add( _3828,_3916 )]);
                  int _8633 = (int)0;
                  int _8634 = _3917;
                  for (int _3918 = _8633; _3918 < _8634; ++_3918)
                  {
                    {
                      _ptr__3877[safe_add( safe_add( _3872,_3909 ),_3918 )] = _ptr__3834[safe_add( safe_add( _3830,_ptr__3833[safe_add( _3828,_3916 )] ),_3918 )];
                    }
                  }
                  int _8635 = (int)0;
                  int _8636 = _3917;
                  for (int _3919 = _8635; _3919 < _8636; ++_3919)
                  {
                    {
                      _ptr__3878[safe_add( safe_add( _3874,_3909 ),_3919 )] = (_ptr__3835[safe_add( safe_add( _3832,_ptr__3833[safe_add( _3828,_3916 )] ),_3919 )] * ((*mval)(_3915)));
                    }
                  }
                  _3913 += (_ptr__3835[safe_add( _3831,_3916 )] * ((*mval)(_3915)));
                  _3914 = true;
                  _3909 += _3917;
                }
              }
              if (_3914)
              {
                {
                  _ptr__3877[safe_add( _3873,_3908 )] = safe_add( safe_mul( _3911,_3840 ),_3912 );
                  _ptr__3878[safe_add( _3875,_3908 )] = _3913;
                  _ptr__3879[safe_add( safe_add( _3871,_3908 ),(int)1 )] = _3909;
                  ++ _3908;
                }
              }
              {}
            }
          }
          _3907 = _3910;
        }
      }
    }
  }
  if ((!_3843))
  {
    {
      _3820->popi64(_3844);
    }
  }
  {}
  _3822->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _3920,int _3921,std::shared_ptr< monty::ndarray< int,1 > > _3922){
  _checked_ptr_1<int> _ptr__3922(_3922 ? _3922->raw() : nullptr, _3922 ? _3922->size(0) : 0);
  if (((int)((_3922)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_3921 != _ptr__3922[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3920),(int)(_ptr__3922[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _3923,int _3924,std::shared_ptr< monty::ndarray< int,1 > > _3925,std::shared_ptr< monty::ndarray< int,1 > > _3926,std::shared_ptr< monty::ndarray< double,1 > > _3927,monty::rc_ptr< ::mosek::fusion::Expression > _3928){
  _checked_ptr_1<int> _ptr__3925(_3925 ? _3925->raw() : nullptr, _3925 ? _3925->size(0) : 0);
  _checked_ptr_1<int> _ptr__3926(_3926 ? _3926->raw() : nullptr, _3926 ? _3926->size(0) : 0);
  _checked_ptr_1<double> _ptr__3927(_3927 ? _3927->raw() : nullptr, _3927 ? _3927->size(0) : 0);
  if ((_3928->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3929 = _3928->getDim((int)0);
  int _3930 = _3928->getDim((int)0);
  if (((_3923 < (int)0) || (_3924 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3924 != _3929))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3925)->size(0)) != (int)((_3926)->size(0))) || ((int)((_3925)->size(0)) != (int)((_3927)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3931 = (int)((_3925)->size(0));
  bool _3932 = false;
  bool _3933 = false;
  {
    int _8637 = (int)0;
    int _8638 = _3931;
    for (int _3934 = _8637; _3934 < _8638; ++_3934)
    {
      {
        _3932 = (_3932 || ((_ptr__3925[_3934] < (int)0) || ((_ptr__3925[_3934] >= _3923) || ((_ptr__3926[_3934] < (int)0) || (_ptr__3926[_3934] >= _3924)))));
      }
    }
    if ((!_3932))
    {
      {
        int _8639 = (int)0;
        int _8640 = (_3931 - (int)1);
        for (int _3935 = _8639; _3935 < _8640; ++_3935)
        {
          {
            _3933 = (_3933 || ((_ptr__3925[_3935] > _ptr__3925[safe_add( _3935,(int)1 )]) || ((_ptr__3925[_3935] == _ptr__3925[safe_add( _3935,(int)1 )]) && (_ptr__3926[_3935] >= _ptr__3926[safe_add( _3935,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_3932)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3933)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3936,    int _3937,    int _3938,    std::shared_ptr< monty::ndarray< int,1 > > _3939,    std::shared_ptr< monty::ndarray< int,1 > > _3940,    std::shared_ptr< monty::ndarray< double,1 > > _3941,    monty::rc_ptr< ::mosek::fusion::Variable > _3942){ return new mosek::fusion::ExprMulVar(_3936,_3937,_3938,_3939,_3940,_3941,_3942); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3936,    int _3937,    int _3938,    std::shared_ptr< monty::ndarray< int,1 > > _3939,    std::shared_ptr< monty::ndarray< int,1 > > _3940,    std::shared_ptr< monty::ndarray< double,1 > > _3941,    monty::rc_ptr< ::mosek::fusion::Variable > _3942) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3936,_3937,_3938,_3939,_3940,_3941,_3942); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3936,    int _3937,    int _3938,    std::shared_ptr< monty::ndarray< int,1 > > _3939,    std::shared_ptr< monty::ndarray< int,1 > > _3940,    std::shared_ptr< monty::ndarray< double,1 > > _3941,    monty::rc_ptr< ::mosek::fusion::Variable > _3942){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3939(_3939 ? _3939->raw() : nullptr, _3939 ? _3939->size(0) : 0);
    _checked_ptr_1<int> _ptr__3940(_3940 ? _3940->raw() : nullptr, _3940 ? _3940->size(0) : 0);
    _checked_ptr_1<double> _ptr__3941(_3941 ? _3941->raw() : nullptr, _3941 ? _3941->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_3936,_3937,_3938,_3939,_3940,_3941,_3942,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3943 = _3942->getShape();
    _checked_ptr_1<int> _ptr__3943(_3943 ? _3943->raw() : nullptr,_3943 ? _3943->size(0) : 0);
    int _3944 = (int)((_3943)->size(0));
    if ((_3944 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_3936 && (_ptr__3943[(int)0] != _3938)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_3936) && (_ptr__3943[(int)1] != _3937)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_3939)->size(0)) != (int)((_3940)->size(0))) || ((int)((_3939)->size(0)) != (int)((_3941)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_3937,_3938,_3939,_3940,_3941);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3945,    int _3946,    int _3947,    std::shared_ptr< monty::ndarray< int,1 > > _3948,    std::shared_ptr< monty::ndarray< int,1 > > _3949,    std::shared_ptr< monty::ndarray< double,1 > > _3950,    monty::rc_ptr< ::mosek::fusion::Variable > _3951,    int _3952){ return new mosek::fusion::ExprMulVar(_3945,_3946,_3947,_3948,_3949,_3950,_3951,_3952); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3945,    int _3946,    int _3947,    std::shared_ptr< monty::ndarray< int,1 > > _3948,    std::shared_ptr< monty::ndarray< int,1 > > _3949,    std::shared_ptr< monty::ndarray< double,1 > > _3950,    monty::rc_ptr< ::mosek::fusion::Variable > _3951,    int _3952) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3945,_3946,_3947,_3948,_3949,_3950,_3951,_3952); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3945,    int _3946,    int _3947,    std::shared_ptr< monty::ndarray< int,1 > > _3948,    std::shared_ptr< monty::ndarray< int,1 > > _3949,    std::shared_ptr< monty::ndarray< double,1 > > _3950,    monty::rc_ptr< ::mosek::fusion::Variable > _3951,    int _3952){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3948(_3948 ? _3948->raw() : nullptr, _3948 ? _3948->size(0) : 0);
    _checked_ptr_1<int> _ptr__3949(_3949 ? _3949->raw() : nullptr, _3949 ? _3949->size(0) : 0);
    _checked_ptr_1<double> _ptr__3950(_3950 ? _3950->raw() : nullptr, _3950 ? _3950->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_3946,_3947,_3951->getShape(),_3945));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _3945;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _3951;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _3946;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _3947;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_3948);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_3949);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_3950);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3953,monty::rc_ptr< ::mosek::fusion::WorkStack > _3954,monty::rc_ptr< ::mosek::fusion::WorkStack > _3955) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_3953,_3954,_3955); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3953,monty::rc_ptr< ::mosek::fusion::WorkStack > _3954,monty::rc_ptr< ::mosek::fusion::WorkStack > _3955){
  if (left)
  {
    {
      _pubthis->eval_left(_3953,_3954,_3955);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_3953,_3954,_3955);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3956,monty::rc_ptr< ::mosek::fusion::WorkStack > _3957,monty::rc_ptr< ::mosek::fusion::WorkStack > _3958) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_3956,_3957,_3958); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3956,monty::rc_ptr< ::mosek::fusion::WorkStack > _3957,monty::rc_ptr< ::mosek::fusion::WorkStack > _3958){
  int _3959 = mosek::fusion::p_WorkStack::_get_impl(_3957)->pi32;
  int _3960 = mosek::fusion::p_WorkStack::_get_impl(_3957)->pi64;
  int _3961 = x->numInst();
  int _3962 = _3957->alloci64(_3961);
  int _3963 = _3957->alloci64(_3961);
  int _3964 = _3957->alloci32(_3961);
  int _3965 = _3957->alloci32(_3961);
  std::shared_ptr< monty::ndarray< int,1 > > _3966 = x->getShape();
  _checked_ptr_1<int> _ptr__3966(_3966 ? _3966->raw() : nullptr,_3966 ? _3966->size(0) : 0);
  int _3967 = (int)((_3966)->size(0));
  long long _3968 = safe_mul( _ptr__3966[(int)0],_ptr__3966[(int)1] );
  int _3969 = _ptr__3966[(int)1];
  int _3970 = _ptr__3966[(int)0];
  int _3971 = _3957->alloci32(safe_add( _3970,(int)1 ));
  int _3972 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _3973 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__3973(_3973 ? _3973->raw() : nullptr,_3973 ? _3973->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3974 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__3974(_3974 ? _3974->raw() : nullptr,_3974 ? _3974->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3975 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__3975(_3975 ? _3975->raw() : nullptr,_3975 ? _3975->size(0) : 0);
  int _3976 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _3977 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _3978 = ((_3972 / _3976) == _3977);
  int _3979 = _3957->alloci32(_3972);
  int _3980 = _3957->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3981 = mosek::fusion::p_WorkStack::_get_impl(_3957)->i32;
  _checked_ptr_1<int> _ptr__3981(_3981 ? _3981->raw() : nullptr,_3981 ? _3981->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3982 = mosek::fusion::p_WorkStack::_get_impl(_3957)->i64;
  _checked_ptr_1<long long> _ptr__3982(_3982 ? _3982->raw() : nullptr,_3982 ? _3982->size(0) : 0);
  int _3983 = (int)0;
  int _3984 = (int)0;
  x->inst(_3963,_3982,_3962,_3982);
  if (_3978)
  {
    {
      int _3985 = (int)0;
      if ((_3961 > (int)0))
      {
        {
          _3985 = (int)1;
          if ((_3970 > (int)1))
          {
            {
              if ((_3969 == (int)1))
              {
                {
                  int _8641 = (int)1;
                  int _8642 = _3961;
                  for (int _3986 = _8641; _3986 < _8642; ++_3986)
                  {
                    {
                      if ((_ptr__3982[safe_add( _3963,_3986 )] > _ptr__3982[(safe_add( _3963,_3986 ) - (int)1)]))
                      {
                        {
                          ++ _3985;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _8643 = (int)1;
                  int _8644 = _3961;
                  for (int _3987 = _8643; _3987 < _8644; ++_3987)
                  {
                    {
                      if (((_ptr__3982[safe_add( _3963,_3987 )] / _3969) > (_ptr__3982[(safe_add( _3963,_3987 ) - (int)1)] / _3969)))
                      {
                        {
                          ++ _3985;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _3984 = safe_mul( _3985,_3977 );
      _3983 = safe_mul( _3961,_3977 );
      bool _3988 = (_3985 < _3970);
      int _3989 = _3956->alloci32(safe_add( _3984,(int)1 ));
      int _8645;
      bool _8646 = _3988;
      if (_8646)
      {
        _8645 = (int)1;
      }
      else
      {
        _8645 = (int)0;
      }
      _3956->pushi32(_8645);
      _3956->pushi32(_3983);
      _3956->pushi32(_3984);
      _3956->pushi32(_3970);
      _3956->pushi32(_3977);
      _3956->pushi32((int)2);
      int _3990 = _3956->alloci64(_3983);
      int _3991 = _3956->alloci64(_3984);
      int _3992 = _3956->allocf64(_3983);
      int _3993 = _3956->allocf64(_3984);
      std::shared_ptr< monty::ndarray< int,1 > > _3994 = mosek::fusion::p_WorkStack::_get_impl(_3956)->i32;
      _checked_ptr_1<int> _ptr__3994(_3994 ? _3994->raw() : nullptr,_3994 ? _3994->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3995 = mosek::fusion::p_WorkStack::_get_impl(_3956)->i64;
      _checked_ptr_1<long long> _ptr__3995(_3995 ? _3995->raw() : nullptr,_3995 ? _3995->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3996 = mosek::fusion::p_WorkStack::_get_impl(_3956)->f64;
      _checked_ptr_1<double> _ptr__3996(_3996 ? _3996->raw() : nullptr,_3996 ? _3996->size(0) : 0);
      {
        int _3997 = (int)0;
        int _3998 = (int)0;
        int _3999 = (int)0;
        _ptr__3994[_3989] = (int)0;
        while ( (_3997 < _3961) )
        {
          {
            int _4000 = _3997;
            ++ _3997;
            while ( ((_3997 < _3961) && ((_ptr__3982[safe_add( _3963,_3997 )] / _3969) == (_ptr__3982[safe_add( _3963,_4000 )] / _3969))) )
            {
              {
                ++ _3997;
              }
            }
            long long _4001 = (_ptr__3982[safe_add( _3963,_4000 )] / _3969);
            int _8647 = (int)0;
            int _8648 = _3977;
            for (int _4002 = _8647; _4002 < _8648; ++_4002)
            {
              {
                int _8649 = _4000;
                int _8650 = _3997;
                for (int _4003 = _8649; _4003 < _8650; ++_4003)
                {
                  {
                    long long _4004 = (_ptr__3982[safe_add( _3963,_4003 )] % _3969);
                    _ptr__3995[safe_add( _3990,_3999 )] = _ptr__3982[safe_add( _3962,_4003 )];
                    _ptr__3996[safe_add( _3992,_3999 )] = _ptr__3975[safe_add( safe_mul( _4004,_3977 ),_4002 )];
                    ++ _3999;
                  }
                }
                _ptr__3994[safe_add( safe_add( _3989,_3998 ),(int)1 )] = _3999;
                _ptr__3996[safe_add( _3993,_3998 )] = 0.0;
                _ptr__3995[safe_add( _3991,_3998 )] = safe_add( safe_mul( _4001,_3977 ),_4002 );
                ++ _3998;
              }
            }
          }
        }
      }
      if ((!_3988))
      {
        {
          _3956->popi64(_3984);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_3977 == (int)1))
        {
          {
            int _8651 = (int)0;
            int _8652 = _3972;
            for (int _4005 = _8651; _4005 < _8652; ++_4005)
            {
              {
                _ptr__3981[safe_add( _3979,_4005 )] = _4005;
              }
            }
            _ptr__3981[_3980] = (int)0;
            _ptr__3981[safe_add( _3980,(int)1 )] = _3972;
          }
        }
        else
        {
          {
            _ptr__3981[_3980] = (int)0;
            int _8653 = (int)0;
            int _8654 = safe_add( _3977,(int)1 );
            for (int _4006 = _8653; _4006 < _8654; ++_4006)
            {
              {
                _ptr__3981[safe_add( _3980,_4006 )] = (int)0;
              }
            }
            int _8655 = (int)0;
            int _8656 = _3972;
            for (int _4007 = _8655; _4007 < _8656; ++_4007)
            {
              {
                ++ _ptr__3981[safe_add( safe_add( _3980,_ptr__3974[_4007] ),(int)1 )];
              }
            }
            int _8657 = (int)0;
            int _8658 = mdimj;
            for (int _4008 = _8657; _4008 < _8658; ++_4008)
            {
              {
                _ptr__3981[safe_add( safe_add( _3980,_4008 ),(int)1 )] += _ptr__3981[safe_add( _3980,_4008 )];
              }
            }
            int _8659 = (int)0;
            int _8660 = _3972;
            for (int _4009 = _8659; _4009 < _8660; ++_4009)
            {
              {
                _ptr__3981[safe_add( _3979,_ptr__3981[safe_add( _3980,_ptr__3974[_4009] )] )] = _4009;
                ++ _ptr__3981[safe_add( _3980,_ptr__3974[_4009] )];
              }
            }
            int _8661 = (int)0;
            int _8662 = _3977;
            for (int _4010 = _8661; _4010 < _8662; ++_4010)
            {
              {
                _ptr__3981[(safe_add( _3980,_3977 ) - _4010)] = _ptr__3981[((safe_add( _3980,_3977 ) - _4010) - (int)1)];
              }
            }
            _ptr__3981[_3980] = (int)0;
          }
        }
      }
      if (((_3961 / _3970) == _3969))
      {
        {
          int _4011 = (int)0;
          {
            int _4012 = (int)0;
            while ( (_4012 < _3972) )
            {
              {
                ++ _4012;
                while ( ((_4012 < _3972) && (_ptr__3974[_ptr__3981[(safe_add( _3979,_4012 ) - (int)1)]] == _ptr__3974[_ptr__3981[safe_add( _3979,_4012 )]])) )
                {
                  {
                    ++ _4012;
                  }
                }
                ++ _4011;
              }
            }
          }
          _3984 = safe_mul( _4011,_3970 );
          _3983 = safe_mul( _3972,_3970 );
          bool _4013 = (_4011 < _3977);
          int _4014 = _3956->alloci32(safe_add( _3984,(int)1 ));
          int _8663;
          bool _8664 = _4013;
          if (_8664)
          {
            _8663 = (int)1;
          }
          else
          {
            _8663 = (int)0;
          }
          _3956->pushi32(_8663);
          _3956->pushi32(_3983);
          _3956->pushi32(_3984);
          _3956->pushi32(_3970);
          _3956->pushi32(_3977);
          _3956->pushi32((int)2);
          int _4015 = _3956->alloci64(_3983);
          int _4016 = _3956->alloci64(_3984);
          int _4017 = _3956->allocf64(_3983);
          int _4018 = _3956->allocf64(_3984);
          std::shared_ptr< monty::ndarray< int,1 > > _4019 = mosek::fusion::p_WorkStack::_get_impl(_3956)->i32;
          _checked_ptr_1<int> _ptr__4019(_4019 ? _4019->raw() : nullptr,_4019 ? _4019->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4020 = mosek::fusion::p_WorkStack::_get_impl(_3956)->i64;
          _checked_ptr_1<long long> _ptr__4020(_4020 ? _4020->raw() : nullptr,_4020 ? _4020->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4021 = mosek::fusion::p_WorkStack::_get_impl(_3956)->f64;
          _checked_ptr_1<double> _ptr__4021(_4021 ? _4021->raw() : nullptr,_4021 ? _4021->size(0) : 0);
          _ptr__4019[_4014] = (int)0;
          int _4022 = (int)0;
          int _4023 = (int)0;
          int _8665 = (int)0;
          int _8666 = _3970;
          for (int _4024 = _8665; _4024 < _8666; ++_4024)
          {
            {
              int _4025 = (int)0;
              while ( (_4025 < _3972) )
              {
                {
                  int _4026 = _4025;
                  ++ _4025;
                  while ( ((_4025 < _3972) && (_ptr__3974[_ptr__3981[safe_add( _3979,_4026 )]] == _ptr__3974[_ptr__3981[safe_add( _3979,_4025 )]])) )
                  {
                    {
                      ++ _4025;
                    }
                  }
                  int _4027 = _ptr__3974[_ptr__3981[safe_add( _3979,_4026 )]];
                  int _8667 = _4026;
                  int _8668 = _4025;
                  for (int _4028 = _8667; _4028 < _8668; ++_4028)
                  {
                    {
                      int _4029 = _ptr__3973[_ptr__3981[safe_add( _3979,_4028 )]];
                      _ptr__4020[safe_add( _4015,_4023 )] = _ptr__3982[safe_add( safe_add( _3962,safe_mul( _4024,_3969 ) ),_4029 )];
                      _ptr__4021[safe_add( _4017,_4023 )] = _ptr__3975[_ptr__3981[safe_add( _3979,_4028 )]];
                      ++ _4023;
                    }
                  }
                  _ptr__4021[safe_add( _4018,_4022 )] = 0.0;
                  _ptr__4020[safe_add( _4016,_4022 )] = safe_add( safe_mul( _4024,_3977 ),_4027 );
                  _ptr__4019[safe_add( safe_add( _4014,_4022 ),(int)1 )] = _4023;
                  ++ _4022;
                }
              }
            }
          }
          if ((!_4013))
          {
            {
              _3956->popi64(_3984);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _8669 = (int)0;
          int _8670 = safe_add( _3970,(int)1 );
          for (int _4030 = _8669; _4030 < _8670; ++_4030)
          {
            {
              _ptr__3981[safe_add( _3971,_4030 )] = (int)0;
            }
          }
          if ((_3967 == (int)1))
          {
            {
              int _8671 = (int)0;
              int _8672 = _3961;
              for (int _4031 = _8671; _4031 < _8672; ++_4031)
              {
                {
                  _ptr__3981[safe_add( _3964,_4031 )] = (int)0;
                }
              }
              int _8673 = (int)0;
              int _8674 = _3961;
              for (int _4032 = _8673; _4032 < _8674; ++_4032)
              {
                {
                  _ptr__3981[safe_add( _3965,_4032 )] = (int)_ptr__3982[safe_add( _3963,_4032 )];
                }
              }
              _ptr__3981[_3971] = (int)0;
              _ptr__3981[safe_add( _3971,(int)1 )] = _3961;
            }
          }
          else
          {
            {
              int _8675 = (int)0;
              int _8676 = _3961;
              for (int _4033 = _8675; _4033 < _8676; ++_4033)
              {
                {
                  _ptr__3981[safe_add( _3964,_4033 )] = (int)(_ptr__3982[safe_add( _3963,_4033 )] / _ptr__3966[(int)1]);
                }
              }
              int _8677 = (int)0;
              int _8678 = _3961;
              for (int _4034 = _8677; _4034 < _8678; ++_4034)
              {
                {
                  _ptr__3981[safe_add( _3965,_4034 )] = (int)(_ptr__3982[safe_add( _3963,_4034 )] % _ptr__3966[(int)1]);
                }
              }
              _ptr__3981[_3971] = (int)0;
              int _8679 = (int)0;
              int _8680 = _3961;
              for (int _4035 = _8679; _4035 < _8680; ++_4035)
              {
                {
                  ++ _ptr__3981[safe_add( safe_add( _3971,_ptr__3981[safe_add( _3964,_4035 )] ),(int)1 )];
                }
              }
              int _8681 = (int)0;
              int _8682 = _3970;
              for (int _4036 = _8681; _4036 < _8682; ++_4036)
              {
                {
                  _ptr__3981[safe_add( safe_add( _3971,_4036 ),(int)1 )] += _ptr__3981[safe_add( _3971,_4036 )];
                }
              }
            }
          }
          int _8683 = (int)0;
          int _8684 = _3970;
          for (int _4037 = _8683; _4037 < _8684; ++_4037)
          {
            {
              int _8685 = (int)0;
              int _8686 = mdimj;
              for (int _4038 = _8685; _4038 < _8686; ++_4038)
              {
                {
                  int _4039 = (int)0;
                  int _4040 = _ptr__3981[safe_add( safe_add( _3971,_4037 ),(int)1 )];
                  int _4041 = _ptr__3981[safe_add( safe_add( _3980,_4038 ),(int)1 )];
                  int _4042 = _ptr__3981[safe_add( _3971,_4037 )];
                  int _4043 = _ptr__3981[safe_add( _3980,_4038 )];
                  while ( ((_4043 < _4041) && (_4042 < _4040)) )
                  {
                    {
                      if ((_ptr__3973[_ptr__3981[safe_add( _3979,_4043 )]] < _ptr__3981[safe_add( _3965,_4042 )]))
                      {
                        {
                          ++ _4043;
                        }
                      }
                      else if((_ptr__3973[_ptr__3981[safe_add( _3979,_4043 )]] > _ptr__3981[safe_add( _3965,_4042 )]))
                      {
                        {
                          ++ _4042;
                        }
                      }
                      else
                      {
                        {
                          ++ _4039;
                          ++ _4043;
                          ++ _4042;
                        }
                      }
                    }
                  }
                  if ((_4039 > (int)0))
                  {
                    {
                      _3983 += _4039;
                      ++ _3984;
                    }
                  }
                  {}
                }
              }
            }
          }
          int _4044 = _3956->alloci32(safe_add( _3984,(int)1 ));
          bool _8687;
          bool _8688 = (_3984 < safe_mul( _3969,mdimi ));
          if (_8688)
          {
            _8687 = true;
          }
          else
          {
            _8687 = false;
          }
          bool _4045 = _8687;
          int _8689;
          bool _8690 = _4045;
          if (_8690)
          {
            _8689 = (int)1;
          }
          else
          {
            _8689 = (int)0;
          }
          _3956->pushi32(_8689);
          _3956->pushi32(_3983);
          _3956->pushi32(_3984);
          _3956->pushi32(_3970);
          _3956->pushi32(mdimj);
          _3956->pushi32((int)2);
          int _4046 = _3956->alloci64(_3983);
          int _4047 = _3956->alloci64(_3984);
          int _4048 = _3956->allocf64(_3983);
          int _4049 = _3956->allocf64(_3984);
          std::shared_ptr< monty::ndarray< int,1 > > _4050 = mosek::fusion::p_WorkStack::_get_impl(_3956)->i32;
          _checked_ptr_1<int> _ptr__4050(_4050 ? _4050->raw() : nullptr,_4050 ? _4050->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4051 = mosek::fusion::p_WorkStack::_get_impl(_3956)->i64;
          _checked_ptr_1<long long> _ptr__4051(_4051 ? _4051->raw() : nullptr,_4051 ? _4051->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4052 = mosek::fusion::p_WorkStack::_get_impl(_3956)->f64;
          _checked_ptr_1<double> _ptr__4052(_4052 ? _4052->raw() : nullptr,_4052 ? _4052->size(0) : 0);
          {
            int _4053 = (int)0;
            int _4054 = (int)0;
            int _4055 = (int)0;
            _ptr__4050[_4044] = (int)0;
            int _8691 = (int)0;
            int _8692 = _3984;
            for (int _4056 = _8691; _4056 < _8692; ++_4056)
            {
              {
                _ptr__4052[safe_add( _4049,_4056 )] = 0.0;
              }
            }
            int _8693 = (int)0;
            int _8694 = _3970;
            for (int _4057 = _8693; _4057 < _8694; ++_4057)
            {
              {
                int _8695 = (int)0;
                int _8696 = mdimj;
                for (int _4058 = _8695; _4058 < _8696; ++_4058)
                {
                  {
                    int _4059 = (int)0;
                    int _4060 = _ptr__3981[safe_add( safe_add( _3971,_4057 ),(int)1 )];
                    int _4061 = _ptr__3981[safe_add( safe_add( _3980,_4058 ),(int)1 )];
                    int _4062 = _ptr__3981[safe_add( _3971,_4057 )];
                    int _4063 = _ptr__3981[safe_add( _3980,_4058 )];
                    while ( ((_4063 < _4061) && (_4062 < _4060)) )
                    {
                      {
                        if ((_ptr__3973[_ptr__3981[safe_add( _3979,_4063 )]] < _ptr__3981[safe_add( _3965,_4062 )]))
                        {
                          {
                            ++ _4063;
                          }
                        }
                        else if((_ptr__3973[_ptr__3981[safe_add( _3979,_4063 )]] > _ptr__3981[safe_add( _3965,_4062 )]))
                        {
                          {
                            ++ _4062;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4051[safe_add( _4046,_4055 )] = _ptr__3982[safe_add( _3962,_4062 )];
                            _ptr__4052[safe_add( _4048,_4055 )] = _ptr__3975[_ptr__3981[safe_add( _3979,_4063 )]];
                            ++ _4059;
                            ++ _4055;
                            ++ _4063;
                            ++ _4062;
                          }
                        }
                      }
                    }
                    if ((_4059 > (int)0))
                    {
                      {
                        _ptr__4050[safe_add( safe_add( _4044,_4054 ),(int)1 )] = _4055;
                        _ptr__4051[safe_add( _4047,_4054 )] = _4053;
                        ++ _4054;
                      }
                    }
                    {}
                    ++ _4053;
                  }
                }
              }
            }
          }
          if ((!_4045))
          {
            {
              _3956->popi64(_3984);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_3957)->pi32 = _3959;
  mosek::fusion::p_WorkStack::_get_impl(_3957)->pi64 = _3960;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _4064,monty::rc_ptr< ::mosek::fusion::WorkStack > _4065,monty::rc_ptr< ::mosek::fusion::WorkStack > _4066) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_4064,_4065,_4066); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _4064,monty::rc_ptr< ::mosek::fusion::WorkStack > _4065,monty::rc_ptr< ::mosek::fusion::WorkStack > _4066){
  int _4067 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _4068 = x->getShape();
  _checked_ptr_1<int> _ptr__4068(_4068 ? _4068->raw() : nullptr,_4068 ? _4068->size(0) : 0);
  int _4069 = (int)((_4068)->size(0));
  int _4070 = _4066->alloci64(_4067);
  int _4071 = _4066->alloci64(_4067);
  int _4072 = _4066->alloci32(_4067);
  int _4073 = _4066->alloci32(_4067);
  int _4074 = _4066->alloci32(_4067);
  int _4075 = _4066->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4076 = x->getShape();
  _checked_ptr_1<int> _ptr__4076(_4076 ? _4076->raw() : nullptr,_4076 ? _4076->size(0) : 0);
  int _4077 = (int)((_4076)->size(0));
  int _8697;
  bool _8698 = (_4077 == (int)1);
  if (_8698)
  {
    _8697 = (int)1;
  }
  else
  {
    _8697 = _ptr__4076[(int)1];
  }
  int _4078 = _8697;
  int _4079 = _ptr__4076[(int)0];
  int _4080 = _4066->alloci32(safe_add( _4078,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4081 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__4081(_4081 ? _4081->raw() : nullptr,_4081 ? _4081->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4082 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__4082(_4082 ? _4082->raw() : nullptr,_4082 ? _4082->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4083 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__4083(_4083 ? _4083->raw() : nullptr,_4083 ? _4083->size(0) : 0);
  int _4084 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _4085 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _4086 = (int)0;
  int _4087 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4088 = mosek::fusion::p_WorkStack::_get_impl(_4066)->i32;
  _checked_ptr_1<int> _ptr__4088(_4088 ? _4088->raw() : nullptr,_4088 ? _4088->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4089 = mosek::fusion::p_WorkStack::_get_impl(_4066)->i64;
  _checked_ptr_1<long long> _ptr__4089(_4089 ? _4089->raw() : nullptr,_4089 ? _4089->size(0) : 0);
  int _4090 = (int)((_4083)->size(0));
  x->inst(_4071,_4089,_4070,_4089);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _8699 = (int)0;
        int _8700 = safe_add( _4084,(int)1 );
        for (int _4091 = _8699; _4091 < _8700; ++_4091)
        {
          {
            _ptr__4088[safe_add( _4075,_4091 )] = (int)0;
          }
        }
        int _8701 = (int)0;
        int _8702 = (int)((_4081)->size(0));
        for (int _4092 = _8701; _4092 < _8702; ++_4092)
        {
          {
            ++ _ptr__4088[safe_add( safe_add( _4075,_ptr__4081[_4092] ),(int)1 )];
          }
        }
        int _8703 = (int)0;
        int _8704 = _4084;
        for (int _4093 = _8703; _4093 < _8704; ++_4093)
        {
          {
            _ptr__4088[safe_add( safe_add( _4075,_4093 ),(int)1 )] += _ptr__4088[safe_add( _4075,_4093 )];
          }
        }
        if ((_4077 == (int)1))
        {
          {
            int _8705 = (int)0;
            int _8706 = _4067;
            for (int _4094 = _8705; _4094 < _8706; ++_4094)
            {
              {
                _ptr__4088[safe_add( _4072,_4094 )] = (int)_ptr__4089[safe_add( _4071,_4094 )];
              }
            }
            int _8707 = (int)0;
            int _8708 = _4067;
            for (int _4095 = _8707; _4095 < _8708; ++_4095)
            {
              {
                _ptr__4088[safe_add( _4073,_4095 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _8709 = (int)0;
            int _8710 = _4067;
            for (int _4096 = _8709; _4096 < _8710; ++_4096)
            {
              {
                _ptr__4088[safe_add( _4072,_4096 )] = (int)(_ptr__4089[safe_add( _4071,_4096 )] / _4078);
              }
            }
            int _8711 = (int)0;
            int _8712 = _4067;
            for (int _4097 = _8711; _4097 < _8712; ++_4097)
            {
              {
                _ptr__4088[safe_add( _4073,_4097 )] = (int)(_ptr__4089[safe_add( _4071,_4097 )] % _4078);
              }
            }
          }
        }
        if ((_4077 > (int)1))
        {
          {
            int _8713 = (int)0;
            int _8714 = safe_add( _4078,(int)1 );
            for (int _4098 = _8713; _4098 < _8714; ++_4098)
            {
              {
                _ptr__4088[safe_add( _4080,_4098 )] = (int)0;
              }
            }
            int _8715 = (int)0;
            int _8716 = _4067;
            for (int _4099 = _8715; _4099 < _8716; ++_4099)
            {
              {
                ++ _ptr__4088[safe_add( safe_add( _4080,_ptr__4088[safe_add( _4073,_4099 )] ),(int)1 )];
              }
            }
            int _8717 = (int)0;
            int _8718 = _4078;
            for (int _4100 = _8717; _4100 < _8718; ++_4100)
            {
              {
                _ptr__4088[safe_add( safe_add( _4080,_4100 ),(int)1 )] += _ptr__4088[safe_add( _4080,_4100 )];
              }
            }
            int _8719 = (int)0;
            int _8720 = _4067;
            for (int _4101 = _8719; _4101 < _8720; ++_4101)
            {
              {
                _ptr__4088[safe_add( _4074,_ptr__4088[safe_add( _4080,_ptr__4088[safe_add( _4073,_4101 )] )] )] = _4101;
                ++ _ptr__4088[safe_add( _4080,_ptr__4088[safe_add( _4073,_4101 )] )];
              }
            }
            int _8721 = (int)0;
            int _8722 = _4078;
            for (int _4102 = _8721; _4102 < _8722; ++_4102)
            {
              {
                _ptr__4088[(safe_add( _4080,_4078 ) - _4102)] = _ptr__4088[((safe_add( _4080,_4078 ) - _4102) - (int)1)];
              }
            }
            _ptr__4088[_4080] = (int)0;
          }
        }
        else
        {
          {
            _ptr__4088[_4080] = (int)0;
            _ptr__4088[safe_add( _4080,(int)1 )] = _4067;
            int _8723 = (int)0;
            int _8724 = _4067;
            for (int _4103 = _8723; _4103 < _8724; ++_4103)
            {
              {
                _ptr__4088[safe_add( _4074,_4103 )] = _4103;
              }
            }
          }
        }
        int _8725 = (int)0;
        int _8726 = _4084;
        for (int _4104 = _8725; _4104 < _8726; ++_4104)
        {
          {
            int _8727 = (int)0;
            int _8728 = _4078;
            for (int _4105 = _8727; _4105 < _8728; ++_4105)
            {
              {
                int _4106 = (int)0;
                int _4107 = _ptr__4088[safe_add( safe_add( _4080,_4105 ),(int)1 )];
                int _4108 = _ptr__4088[safe_add( safe_add( _4075,_4104 ),(int)1 )];
                int _4109 = _ptr__4088[safe_add( _4080,_4105 )];
                int _4110 = _ptr__4088[safe_add( _4075,_4104 )];
                while ( ((_4110 < _4108) && (_4109 < _4107)) )
                {
                  {
                    if ((_ptr__4082[_4110] < _ptr__4088[safe_add( _4072,_ptr__4088[safe_add( _4074,_4109 )] )]))
                    {
                      {
                        ++ _4110;
                      }
                    }
                    else if((_ptr__4082[_4110] > _ptr__4088[safe_add( _4072,_ptr__4088[safe_add( _4074,_4109 )] )]))
                    {
                      {
                        ++ _4109;
                      }
                    }
                    else
                    {
                      {
                        ++ _4106;
                        ++ _4110;
                        ++ _4109;
                      }
                    }
                  }
                }
                if ((_4106 > (int)0))
                {
                  {
                    _4086 += _4106;
                    ++ _4087;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _4086 = safe_mul( _4090,_4078 );
      int _4111 = (int)0;
      while ( (_4111 < _4090) )
      {
        {
          int _4112 = safe_add( _4111,(int)1 );
          while ( ((_4112 < _4090) && (_ptr__4081[_4111] == _ptr__4081[_4112])) )
          {
            {
              ++ _4112;
            }
          }
          ++ _4087;
          _4111 = _4112;
        }
      }
      _4087 *= _4078;
    }
  }
  bool _8729;
  bool _8730 = (_4087 < safe_mul( _4078,_4084 ));
  if (_8730)
  {
    _8729 = true;
  }
  else
  {
    _8729 = false;
  }
  bool _4113 = _8729;
  int _4114 = _4077;
  _4064->alloc_expr(_4114,_4087,_4086,_4113);
  int _4115 = mosek::fusion::p_WorkStack::_get_impl(_4064)->ptr_base;
  int _4116 = mosek::fusion::p_WorkStack::_get_impl(_4064)->shape_base;
  int _4117 = mosek::fusion::p_WorkStack::_get_impl(_4064)->nidxs_base;
  int _8731;
  bool _8732 = _4113;
  if (_8732)
  {
    _8731 = mosek::fusion::p_WorkStack::_get_impl(_4064)->sp_base;
  }
  else
  {
    _8731 = _4064->alloci64(_4087);
  }
  int _4118 = _8731;
  int _4119 = mosek::fusion::p_WorkStack::_get_impl(_4064)->cof_base;
  int _4120 = mosek::fusion::p_WorkStack::_get_impl(_4064)->bfix_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4121 = mosek::fusion::p_WorkStack::_get_impl(_4064)->i32;
  _checked_ptr_1<int> _ptr__4121(_4121 ? _4121->raw() : nullptr,_4121 ? _4121->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4122 = mosek::fusion::p_WorkStack::_get_impl(_4064)->i64;
  _checked_ptr_1<long long> _ptr__4122(_4122 ? _4122->raw() : nullptr,_4122 ? _4122->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4123 = mosek::fusion::p_WorkStack::_get_impl(_4064)->f64;
  _checked_ptr_1<double> _ptr__4123(_4123 ? _4123->raw() : nullptr,_4123 ? _4123->size(0) : 0);
  _ptr__4121[_4116] = _4084;
  if ((_4077 > (int)1))
  {
    {
      _ptr__4121[safe_add( _4116,(int)1 )] = _4078;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _4124 = (int)0;
      int _4125 = (int)0;
      int _4126 = (int)0;
      _ptr__4121[_4115] = (int)0;
      int _8733 = (int)0;
      int _8734 = _4087;
      for (int _4127 = _8733; _4127 < _8734; ++_4127)
      {
        {
          _ptr__4123[safe_add( _4120,_4127 )] = 0.0;
        }
      }
      int _8735 = (int)0;
      int _8736 = _4084;
      for (int _4128 = _8735; _4128 < _8736; ++_4128)
      {
        {
          int _8737 = (int)0;
          int _8738 = _4078;
          for (int _4129 = _8737; _4129 < _8738; ++_4129)
          {
            {
              int _4130 = (int)0;
              int _4131 = _ptr__4088[safe_add( safe_add( _4080,_4129 ),(int)1 )];
              int _4132 = _ptr__4088[safe_add( safe_add( _4075,_4128 ),(int)1 )];
              int _4133 = _ptr__4088[safe_add( _4080,_4129 )];
              int _4134 = _ptr__4088[safe_add( _4075,_4128 )];
              while ( ((_4134 < _4132) && (_4133 < _4131)) )
              {
                {
                  if ((_ptr__4082[_4134] < _ptr__4088[safe_add( _4072,_ptr__4088[safe_add( _4074,_4133 )] )]))
                  {
                    {
                      ++ _4134;
                    }
                  }
                  else if((_ptr__4082[_4134] > _ptr__4088[safe_add( _4072,_ptr__4088[safe_add( _4074,_4133 )] )]))
                  {
                    {
                      ++ _4133;
                    }
                  }
                  else
                  {
                    {
                      _ptr__4122[safe_add( _4117,_4126 )] = _ptr__4089[safe_add( _4070,_ptr__4088[safe_add( _4074,_4133 )] )];
                      _ptr__4123[safe_add( _4119,_4126 )] = _ptr__4083[_4134];
                      ++ _4130;
                      ++ _4126;
                      ++ _4134;
                      ++ _4133;
                    }
                  }
                }
              }
              if ((_4130 > (int)0))
              {
                {
                  _ptr__4121[safe_add( safe_add( _4115,_4125 ),(int)1 )] = _4126;
                  _ptr__4122[safe_add( _4118,_4125 )] = _4124;
                  ++ _4125;
                }
              }
              {}
              ++ _4124;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4135 = (int)0;
      int _4136 = (int)0;
      _ptr__4121[_4115] = (int)0;
      int _4137 = (int)0;
      while ( (_4137 < _4090) )
      {
        {
          int _4138 = safe_add( _4137,(int)1 );
          while ( ((_4138 < _4090) && (_ptr__4081[_4138] == _ptr__4081[_4137])) )
          {
            {
              ++ _4138;
            }
          }
          int _8739 = (int)0;
          int _8740 = _4078;
          for (int _4139 = _8739; _4139 < _8740; ++_4139)
          {
            {
              int _8741 = _4137;
              int _8742 = _4138;
              for (int _4140 = _8741; _4140 < _8742; ++_4140)
              {
                {
                  _ptr__4122[safe_add( _4117,_4135 )] = _ptr__4089[safe_add( safe_add( _4070,safe_mul( _ptr__4082[_4140],_4078 ) ),_4139 )];
                  _ptr__4123[safe_add( _4119,_4135 )] = _ptr__4083[_4140];
                  ++ _4135;
                }
              }
              _ptr__4121[safe_add( safe_add( _4115,_4136 ),(int)1 )] = _4135;
              _ptr__4122[safe_add( _4118,_4136 )] = safe_add( safe_mul( _ptr__4081[_4137],_4078 ),_4139 );
              _ptr__4123[safe_add( _4120,_4136 )] = (int)0;
              ++ _4136;
            }
          }
          _4137 = _4138;
        }
      }
    }
  }
  if ((!_4113))
  {
    {
      _4064->popi64(_4087);
    }
  }
  {}
  _4066->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _4141,int _4142,std::shared_ptr< monty::ndarray< int,1 > > _4143,std::shared_ptr< monty::ndarray< int,1 > > _4144,std::shared_ptr< monty::ndarray< double,1 > > _4145){
  _checked_ptr_1<int> _ptr__4143(_4143 ? _4143->raw() : nullptr, _4143 ? _4143->size(0) : 0);
  _checked_ptr_1<int> _ptr__4144(_4144 ? _4144->raw() : nullptr, _4144 ? _4144->size(0) : 0);
  _checked_ptr_1<double> _ptr__4145(_4145 ? _4145->raw() : nullptr, _4145 ? _4145->size(0) : 0);
  bool _4146 = true;
  {
    int _8743 = (int)0;
    int _8744 = (int)((_4143)->size(0));
    for (int _4147 = _8743; _4147 < _8744; ++_4147)
    {
      {
        if (((_ptr__4143[_4147] < (int)0) || ((_ptr__4143[_4147] >= _4141) || ((_ptr__4144[_4147] < (int)0) || (_ptr__4144[_4147] >= _4142)))))
        {
          {
            _4146 = false;
          }
        }
        {}
      }
    }
    int _8745 = (int)1;
    int _8746 = (int)((_4143)->size(0));
    for (int _4148 = _8745; _4148 < _8746; ++_4148)
    {
      {
        if (((_ptr__4143[(_4148 - (int)1)] > _ptr__4143[_4148]) || ((_ptr__4143[(_4148 - (int)1)] == _ptr__4143[_4148]) && (_ptr__4144[(_4148 - (int)1)] >= _ptr__4144[_4148]))))
        {
          {
            _4146 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_4146))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _4149,int _4150,std::shared_ptr< monty::ndarray< int,1 > > _4151,bool _4152){
  _checked_ptr_1<int> _ptr__4151(_4151 ? _4151->raw() : nullptr, _4151 ? _4151->size(0) : 0);
  if (_4152)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4149),(int)(_ptr__4151[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4151[(int)0]),(int)(_4150)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4153,    int _4154,    std::shared_ptr< monty::ndarray< int,1 > > _4155,    std::shared_ptr< monty::ndarray< int,1 > > _4156,    std::shared_ptr< monty::ndarray< double,1 > > _4157,    monty::rc_ptr< ::mosek::fusion::Variable > _4158){ return new mosek::fusion::ExprMulScalarVar(_4153,_4154,_4155,_4156,_4157,_4158); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4153,    int _4154,    std::shared_ptr< monty::ndarray< int,1 > > _4155,    std::shared_ptr< monty::ndarray< int,1 > > _4156,    std::shared_ptr< monty::ndarray< double,1 > > _4157,    monty::rc_ptr< ::mosek::fusion::Variable > _4158) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4153,_4154,_4155,_4156,_4157,_4158); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4153,    int _4154,    std::shared_ptr< monty::ndarray< int,1 > > _4155,    std::shared_ptr< monty::ndarray< int,1 > > _4156,    std::shared_ptr< monty::ndarray< double,1 > > _4157,    monty::rc_ptr< ::mosek::fusion::Variable > _4158){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4155(_4155 ? _4155->raw() : nullptr, _4155 ? _4155->size(0) : 0);
    _checked_ptr_1<int> _ptr__4156(_4156 ? _4156->raw() : nullptr, _4156 ? _4156->size(0) : 0);
    _checked_ptr_1<double> _ptr__4157(_4157 ? _4157->raw() : nullptr, _4157 ? _4157->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_4153,_4154,::mosek::fusion::Utils::Tools::arraycopy(_4155),::mosek::fusion::Utils::Tools::arraycopy(_4156),::mosek::fusion::Utils::Tools::arraycopy(_4157),_4158,(int)1);
    if ((_4158->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_4153 < (int)0) || ((_4154 < (int)0) || (((int)((_4155)->size(0)) != (int)((_4156)->size(0))) || ((int)((_4155)->size(0)) != (int)((_4157)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _4159 = false;
    int _8747 = (int)0;
    int _8748 = (int)((_4155)->size(0));
    for (int _4160 = _8747; _4160 < _8748; ++_4160)
    {
      {
        if (((_ptr__4155[_4160] < (int)0) || ((_ptr__4155[_4160] >= _4153) || ((_ptr__4156[_4160] < (int)0) || (_ptr__4156[_4160] >= _4154)))))
        {
          {
            _4159 = true;
          }
        }
        {}
      }
    }
    if (_4159)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _4161 = false;
    int _8749 = (int)1;
    int _8750 = (int)((_4155)->size(0));
    for (int _4162 = _8749; _4162 < _8750; ++_4162)
    {
      {
        if (((_ptr__4155[_4162] < _ptr__4155[(_4162 - (int)1)]) || ((_ptr__4155[_4162] == _ptr__4155[(_4162 - (int)1)]) && (_ptr__4156[_4162] <= _ptr__4156[(_4162 - (int)1)]))))
        {
          {
            _4161 = true;
          }
        }
        {}
      }
    }
    if (_4161)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4163,    int _4164,    std::shared_ptr< monty::ndarray< int,1 > > _4165,    std::shared_ptr< monty::ndarray< int,1 > > _4166,    std::shared_ptr< monty::ndarray< double,1 > > _4167,    monty::rc_ptr< ::mosek::fusion::Variable > _4168,    int _4169){ return new mosek::fusion::ExprMulScalarVar(_4163,_4164,_4165,_4166,_4167,_4168,_4169); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4163,    int _4164,    std::shared_ptr< monty::ndarray< int,1 > > _4165,    std::shared_ptr< monty::ndarray< int,1 > > _4166,    std::shared_ptr< monty::ndarray< double,1 > > _4167,    monty::rc_ptr< ::mosek::fusion::Variable > _4168,    int _4169) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4163,_4164,_4165,_4166,_4167,_4168,_4169); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4163,    int _4164,    std::shared_ptr< monty::ndarray< int,1 > > _4165,    std::shared_ptr< monty::ndarray< int,1 > > _4166,    std::shared_ptr< monty::ndarray< double,1 > > _4167,    monty::rc_ptr< ::mosek::fusion::Variable > _4168,    int _4169){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4165(_4165 ? _4165->raw() : nullptr, _4165 ? _4165->size(0) : 0);
    _checked_ptr_1<int> _ptr__4166(_4166 ? _4166->raw() : nullptr, _4166 ? _4166->size(0) : 0);
    _checked_ptr_1<double> _ptr__4167(_4167 ? _4167->raw() : nullptr, _4167 ? _4167->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4163),(int)(_4164)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _4163;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _4164;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _4165;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _4166;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _4167;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _4168;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4170,monty::rc_ptr< ::mosek::fusion::WorkStack > _4171,monty::rc_ptr< ::mosek::fusion::WorkStack > _4172) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_4170,_4171,_4172); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4170,monty::rc_ptr< ::mosek::fusion::WorkStack > _4171,monty::rc_ptr< ::mosek::fusion::WorkStack > _4172){
  if ((x->numInst() == (int)0))
  {
    {
      _4170->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_4170)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4170)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4170)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4170)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4173 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__4173(_4173 ? _4173->raw() : nullptr,_4173 ? _4173->size(0) : 0);
      x->inst((int)0,_4173);
      long long _4174 = _ptr__4173[(int)0];
      int _4175 = (int)((msubi)->size(0));
      int _4176 = _4175;
      bool _4177 = (_4175 < safe_mul( mdimi,mdimj ));
      _4170->alloc_expr((int)2,_4175,_4176,_4177);
      int _4178 = mosek::fusion::p_WorkStack::_get_impl(_4170)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4170)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4170)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4170)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4170)->shape_base,(int)1 ))) = mdimj;
      int _4179 = mosek::fusion::p_WorkStack::_get_impl(_4170)->nidxs_base;
      int _4180 = mosek::fusion::p_WorkStack::_get_impl(_4170)->sp_base;
      int _4181 = mosek::fusion::p_WorkStack::_get_impl(_4170)->cof_base;
      int _4182 = mosek::fusion::p_WorkStack::_get_impl(_4170)->bfix_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4183 = mosek::fusion::p_WorkStack::_get_impl(_4170)->i32;
      _checked_ptr_1<int> _ptr__4183(_4183 ? _4183->raw() : nullptr,_4183 ? _4183->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4184 = mosek::fusion::p_WorkStack::_get_impl(_4170)->i64;
      _checked_ptr_1<long long> _ptr__4184(_4184 ? _4184->raw() : nullptr,_4184 ? _4184->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4185 = mosek::fusion::p_WorkStack::_get_impl(_4170)->f64;
      _checked_ptr_1<double> _ptr__4185(_4185 ? _4185->raw() : nullptr,_4185 ? _4185->size(0) : 0);
      {
        int _8751 = (int)0;
        int _8752 = _4175;
        for (int _4186 = _8751; _4186 < _8752; ++_4186)
        {
          {
            _ptr__4185[safe_add( _4182,_4186 )] = (int)0;
          }
        }
        int _8753 = (int)0;
        int _8754 = _4176;
        for (int _4187 = _8753; _4187 < _8754; ++_4187)
        {
          {
            _ptr__4185[safe_add( _4181,_4187 )] = ((*mcof)(_4187));
          }
        }
        int _8755 = (int)0;
        int _8756 = _4176;
        for (int _4188 = _8755; _4188 < _8756; ++_4188)
        {
          {
            _ptr__4184[safe_add( _4179,_4188 )] = _4174;
          }
        }
        if (_4177)
        {
          {
            int _8757 = (int)0;
            int _8758 = _4175;
            for (int _4189 = _8757; _4189 < _8758; ++_4189)
            {
              {
                _ptr__4184[safe_add( _4180,_4189 )] = safe_add( safe_mul( ((*msubi)(_4189)),mdimj ),((*msubj)(_4189)) );
              }
            }
          }
        }
        {}
        int _8759 = (int)0;
        int _8760 = safe_add( _4175,(int)1 );
        for (int _4190 = _8759; _4190 < _8760; ++_4190)
        {
          {
            _ptr__4183[safe_add( _4178,_4190 )] = _4190;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4191,    double _4192){ return new mosek::fusion::ExprMulVarScalarConst(_4191,_4192); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4191,    double _4192) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_4191,_4192); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4191,    double _4192){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4191->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _4191;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _4192;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4193,monty::rc_ptr< ::mosek::fusion::WorkStack > _4194,monty::rc_ptr< ::mosek::fusion::WorkStack > _4195) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_4193,_4194,_4195); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4193,monty::rc_ptr< ::mosek::fusion::WorkStack > _4194,monty::rc_ptr< ::mosek::fusion::WorkStack > _4195){
  int _4196 = x->numInst();
  int _4197 = _4196;
  std::shared_ptr< monty::ndarray< int,1 > > _4198 = x->getShape();
  _checked_ptr_1<int> _ptr__4198(_4198 ? _4198->raw() : nullptr,_4198 ? _4198->size(0) : 0);
  int _4199 = (int)((_4198)->size(0));
  int _4200 = _4193->alloci32(safe_add( _4197,(int)1 ));
  int _4201 = _4193->alloci64(_4196);
  bool _4202 = (::mosek::fusion::p_Set::size(_4198) > _4197);
  int _8761;
  bool _8762 = _4202;
  if (_8762)
  {
    _8761 = _4193->alloci64(_4197);
  }
  else
  {
    _8761 = (int)0;
  }
  int _4203 = _8761;
  int _4204 = _4193->allocf64(_4196);
  int _4205 = _4193->allocf64(_4197);
  if (_4202)
  {
    {
      x->inst(_4203,mosek::fusion::p_WorkStack::_get_impl(_4193)->i64,_4201,mosek::fusion::p_WorkStack::_get_impl(_4193)->i64);
    }
  }
  else
  {
    {
      x->inst(_4201,mosek::fusion::p_WorkStack::_get_impl(_4193)->i64);
    }
  }
  int _8763;
  bool _8764 = _4202;
  if (_8764)
  {
    _8763 = (int)1;
  }
  else
  {
    _8763 = (int)0;
  }
  _4193->pushi32(_8763);
  _4193->pushi32(_4197);
  _4193->pushi32(_4196);
  int _8765 = (int)0;
  int _8766 = _4199;
  for (int _4206 = _8765; _4206 < _8766; ++_4206)
  {
    {
      _4193->pushi32(_ptr__4198[_4206]);
    }
  }
  _4193->pushi32(_4199);
  std::shared_ptr< monty::ndarray< int,1 > > _4207 = mosek::fusion::p_WorkStack::_get_impl(_4193)->i32;
  _checked_ptr_1<int> _ptr__4207(_4207 ? _4207->raw() : nullptr,_4207 ? _4207->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4208 = mosek::fusion::p_WorkStack::_get_impl(_4193)->i64;
  _checked_ptr_1<long long> _ptr__4208(_4208 ? _4208->raw() : nullptr,_4208 ? _4208->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4209 = mosek::fusion::p_WorkStack::_get_impl(_4193)->f64;
  _checked_ptr_1<double> _ptr__4209(_4209 ? _4209->raw() : nullptr,_4209 ? _4209->size(0) : 0);
  {
    int _8767 = (int)0;
    int _8768 = safe_add( _4197,(int)1 );
    for (int _4210 = _8767; _4210 < _8768; ++_4210)
    {
      {
        _ptr__4207[safe_add( _4200,_4210 )] = _4210;
      }
    }
    int _8769 = (int)0;
    int _8770 = _4196;
    for (int _4211 = _8769; _4211 < _8770; ++_4211)
    {
      {
        _ptr__4209[safe_add( _4204,_4211 )] = 1.0;
      }
    }
    int _8771 = (int)0;
    int _8772 = _4197;
    for (int _4212 = _8771; _4212 < _8772; ++_4212)
    {
      {
        _ptr__4209[safe_add( _4205,_4212 )] = 0.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4213,    monty::rc_ptr< ::mosek::fusion::Expression > _4214,    double _4215,    double _4216){ return new mosek::fusion::ExprAdd(_4213,_4214,_4215,_4216); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4213,    monty::rc_ptr< ::mosek::fusion::Expression > _4214,    double _4215,    double _4216) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_4213,_4214,_4215,_4216); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4213,    monty::rc_ptr< ::mosek::fusion::Expression > _4214,    double _4215,    double _4216){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4213->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _4213;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _4214;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _4215;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _4216;
    if ((_4213->getND() != _4214->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _8773 = (int)0;
    int _8774 = _4213->getND();
    for (int _4217 = _8773; _4217 < _8774; ++_4217)
    {
      {
        if ((_4213->getDim(_4217) != _4214->getDim(_4217)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4218,monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_4218,_4219,_4220); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4218,monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220){
  e1->eval(_4219,_4218,_4220);
  e2->eval(_4219,_4218,_4220);
  _4219->pop_expr();
  int _4221 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nd;
  int _4222 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
  int _4223 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nelem;
  int _4224 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nnz;
  bool _4225 = mosek::fusion::p_WorkStack::_get_impl(_4219)->hassp;
  int _4226 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
  int _4227 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
  int _4228 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
  int _4229 = mosek::fusion::p_WorkStack::_get_impl(_4219)->bfix_base;
  int _4230 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
  _4219->pop_expr();
  int _4231 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nd;
  int _4232 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
  int _4233 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nelem;
  int _4234 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nnz;
  bool _4235 = mosek::fusion::p_WorkStack::_get_impl(_4219)->hassp;
  int _4236 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
  int _4237 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
  int _4238 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
  int _4239 = mosek::fusion::p_WorkStack::_get_impl(_4219)->bfix_base;
  int _4240 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4241 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
  _checked_ptr_1<int> _ptr__4241(_4241 ? _4241->raw() : nullptr,_4241 ? _4241->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4242 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
  _checked_ptr_1<long long> _ptr__4242(_4242 ? _4242->raw() : nullptr,_4242 ? _4242->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4243 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
  _checked_ptr_1<double> _ptr__4243(_4243 ? _4243->raw() : nullptr,_4243 ? _4243->size(0) : 0);
  if ((_4231 != _4221))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _8775 = (int)0;
  int _8776 = _4231;
  for (int _4244 = _8775; _4244 < _8776; ++_4244)
  {
    {
      if ((_ptr__4241[safe_add( _4232,_4244 )] != _ptr__4241[safe_add( _4222,_4244 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_4235) && (!_4225)))
  {
    {
      int _4245 = _4233;
      int _4246 = safe_add( _4234,_4224 );
      int _4247 = _4231;
      _4218->alloc_expr(_4247,_4245,_4246,false);
      int _4248 = mosek::fusion::p_WorkStack::_get_impl(_4218)->shape_base;
      int _4249 = mosek::fusion::p_WorkStack::_get_impl(_4218)->ptr_base;
      int _4250 = mosek::fusion::p_WorkStack::_get_impl(_4218)->sp_base;
      int _4251 = mosek::fusion::p_WorkStack::_get_impl(_4218)->nidxs_base;
      int _4252 = mosek::fusion::p_WorkStack::_get_impl(_4218)->bfix_base;
      int _4253 = mosek::fusion::p_WorkStack::_get_impl(_4218)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4254 = mosek::fusion::p_WorkStack::_get_impl(_4218)->i32;
      _checked_ptr_1<int> _ptr__4254(_4254 ? _4254->raw() : nullptr,_4254 ? _4254->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4255 = mosek::fusion::p_WorkStack::_get_impl(_4218)->i64;
      _checked_ptr_1<long long> _ptr__4255(_4255 ? _4255->raw() : nullptr,_4255 ? _4255->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4256 = mosek::fusion::p_WorkStack::_get_impl(_4218)->f64;
      _checked_ptr_1<double> _ptr__4256(_4256 ? _4256->raw() : nullptr,_4256 ? _4256->size(0) : 0);
      int _8777 = (int)0;
      int _8778 = _4247;
      for (int _4257 = _8777; _4257 < _8778; ++_4257)
      {
        {
          _ptr__4254[safe_add( _4248,_4257 )] = _ptr__4241[safe_add( _4232,_4257 )];
        }
      }
      int _4258 = (int)0;
      _ptr__4254[_4249] = (int)0;
      int _8779 = (int)0;
      int _8780 = _4245;
      for (int _4259 = _8779; _4259 < _8780; ++_4259)
      {
        {
          int _8781 = _ptr__4241[safe_add( _4236,_4259 )];
          int _8782 = _ptr__4241[safe_add( safe_add( _4236,_4259 ),(int)1 )];
          for (int _4260 = _8781; _4260 < _8782; ++_4260)
          {
            {
              _ptr__4255[safe_add( _4251,_4258 )] = _ptr__4242[safe_add( _4238,_4260 )];
              _ptr__4256[safe_add( _4253,_4258 )] = (_ptr__4243[safe_add( _4240,_4260 )] * m1);
              ++ _4258;
            }
          }
          int _8783 = _ptr__4241[safe_add( _4226,_4259 )];
          int _8784 = _ptr__4241[safe_add( safe_add( _4226,_4259 ),(int)1 )];
          for (int _4261 = _8783; _4261 < _8784; ++_4261)
          {
            {
              _ptr__4255[safe_add( _4251,_4258 )] = _ptr__4242[safe_add( _4228,_4261 )];
              _ptr__4256[safe_add( _4253,_4258 )] = (_ptr__4243[safe_add( _4230,_4261 )] * m2);
              ++ _4258;
            }
          }
          _ptr__4254[safe_add( safe_add( _4249,_4259 ),(int)1 )] = _4258;
          _ptr__4256[safe_add( _4252,_4259 )] = ((_ptr__4243[safe_add( _4239,_4259 )] * m1) + (_ptr__4243[safe_add( _4229,_4259 )] * m2));
        }
      }
    }
  }
  else if(((!_4235) || (!_4225)))
  {
    {
      if ((!_4225))
      {
        {
          int _4262 = _4223;
          int _4263 = _4224;
          int _4264 = _4226;
          int _4265 = _4227;
          int _4266 = _4228;
          int _4267 = _4229;
          int _4268 = _4230;
          _4223 = _4233;
          _4224 = _4234;
          _4226 = _4236;
          _4227 = _4237;
          _4228 = _4238;
          _4229 = _4239;
          _4230 = _4240;
          _4233 = _4262;
          _4234 = _4263;
          _4236 = _4264;
          _4237 = _4265;
          _4238 = _4266;
          _4239 = _4267;
          _4240 = _4268;
        }
      }
      {}
      double _8785;
      bool _8786 = (!_4235);
      if (_8786)
      {
        _8785 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _8785 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _4269 = _8785;
      double _8787;
      bool _8788 = (!_4235);
      if (_8788)
      {
        _8787 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _8787 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _4270 = _8787;
      int _4271 = _4233;
      int _4272 = safe_add( _4234,_4224 );
      int _4273 = _4231;
      _4218->alloc_expr(_4273,_4271,_4272,false);
      int _4274 = mosek::fusion::p_WorkStack::_get_impl(_4218)->shape_base;
      int _4275 = mosek::fusion::p_WorkStack::_get_impl(_4218)->ptr_base;
      int _4276 = mosek::fusion::p_WorkStack::_get_impl(_4218)->sp_base;
      int _4277 = mosek::fusion::p_WorkStack::_get_impl(_4218)->nidxs_base;
      int _4278 = mosek::fusion::p_WorkStack::_get_impl(_4218)->bfix_base;
      int _4279 = mosek::fusion::p_WorkStack::_get_impl(_4218)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4280 = mosek::fusion::p_WorkStack::_get_impl(_4218)->i32;
      _checked_ptr_1<int> _ptr__4280(_4280 ? _4280->raw() : nullptr,_4280 ? _4280->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4281 = mosek::fusion::p_WorkStack::_get_impl(_4218)->i64;
      _checked_ptr_1<long long> _ptr__4281(_4281 ? _4281->raw() : nullptr,_4281 ? _4281->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4282 = mosek::fusion::p_WorkStack::_get_impl(_4218)->f64;
      _checked_ptr_1<double> _ptr__4282(_4282 ? _4282->raw() : nullptr,_4282 ? _4282->size(0) : 0);
      {
        int _4283 = (int)0;
        int _8789 = (int)0;
        int _8790 = _4273;
        for (int _4284 = _8789; _4284 < _8790; ++_4284)
        {
          {
            _ptr__4280[safe_add( _4274,_4284 )] = _ptr__4241[safe_add( _4232,_4284 )];
          }
        }
        int _8791 = (int)0;
        int _8792 = safe_add( _4271,(int)1 );
        for (int _4285 = _8791; _4285 < _8792; ++_4285)
        {
          {
            _ptr__4280[safe_add( _4275,_4285 )] = (int)0;
          }
        }
        int _8793 = (int)0;
        int _8794 = _4233;
        for (int _4286 = _8793; _4286 < _8794; ++_4286)
        {
          {
            _ptr__4280[safe_add( safe_add( _4275,_4286 ),(int)1 )] += (_ptr__4241[safe_add( safe_add( _4236,_4286 ),(int)1 )] - _ptr__4241[safe_add( _4236,_4286 )]);
          }
        }
        int _8795 = (int)0;
        int _8796 = _4223;
        for (int _4287 = _8795; _4287 < _8796; ++_4287)
        {
          {
            long long _4288 = _ptr__4242[safe_add( _4227,_4287 )];
            _ptr__4280[safe_add( safe_add( _4275,_4288 ),(int)1 )] += (_ptr__4241[safe_add( safe_add( _4226,_4287 ),(int)1 )] - _ptr__4241[safe_add( _4226,_4287 )]);
          }
        }
        int _8797 = (int)0;
        int _8798 = _4271;
        for (int _4289 = _8797; _4289 < _8798; ++_4289)
        {
          {
            _ptr__4280[safe_add( safe_add( _4275,_4289 ),(int)1 )] += _ptr__4280[safe_add( _4275,_4289 )];
          }
        }
        int _8799 = (int)0;
        int _8800 = _4233;
        for (int _4290 = _8799; _4290 < _8800; ++_4290)
        {
          {
            int _4291 = _ptr__4280[safe_add( _4275,_4290 )];
            int _4292 = _ptr__4241[safe_add( _4236,_4290 )];
            int _4293 = (_ptr__4241[safe_add( safe_add( _4236,_4290 ),(int)1 )] - _ptr__4241[safe_add( _4236,_4290 )]);
            int _8801 = (int)0;
            int _8802 = _4293;
            for (int _4294 = _8801; _4294 < _8802; ++_4294)
            {
              {
                _ptr__4281[safe_add( safe_add( _4277,_4291 ),_4294 )] = _ptr__4242[safe_add( safe_add( _4238,_4292 ),_4294 )];
                _ptr__4282[safe_add( safe_add( _4279,_4291 ),_4294 )] = (_ptr__4243[safe_add( safe_add( _4240,_4292 ),_4294 )] * _4269);
              }
            }
            _ptr__4280[safe_add( _4275,_4290 )] += _4293;
            _ptr__4282[safe_add( _4278,_4290 )] = (_ptr__4243[safe_add( _4239,_4290 )] * _4269);
          }
        }
        int _8803 = (int)0;
        int _8804 = _4223;
        for (int _4295 = _8803; _4295 < _8804; ++_4295)
        {
          {
            long long _4296 = _ptr__4242[safe_add( _4227,_4295 )];
            int _4297 = _ptr__4280[safe_add( _4275,_4296 )];
            int _4298 = _ptr__4241[safe_add( _4226,_4295 )];
            int _4299 = (_ptr__4241[safe_add( safe_add( _4226,_4295 ),(int)1 )] - _ptr__4241[safe_add( _4226,_4295 )]);
            int _8805 = (int)0;
            int _8806 = _4299;
            for (int _4300 = _8805; _4300 < _8806; ++_4300)
            {
              {
                _ptr__4281[safe_add( safe_add( _4277,_4297 ),_4300 )] = _ptr__4242[safe_add( safe_add( _4228,_4298 ),_4300 )];
                _ptr__4282[safe_add( safe_add( _4279,_4297 ),_4300 )] = (_ptr__4243[safe_add( safe_add( _4230,_4298 ),_4300 )] * _4270);
              }
            }
            _ptr__4280[safe_add( _4275,_4296 )] += _4299;
            _ptr__4282[safe_add( _4278,_4296 )] += (_ptr__4243[safe_add( _4229,_4295 )] * _4270);
          }
        }
        int _8807 = (int)0;
        int _8808 = _4271;
        for (int _4301 = _8807; _4301 < _8808; ++_4301)
        {
          {
            _ptr__4280[(safe_add( _4275,_4271 ) - _4301)] = _ptr__4280[((safe_add( _4275,_4271 ) - _4301) - (int)1)];
          }
        }
        _ptr__4280[_4275] = (int)0;
      }
    }
  }
  else
  {
    {
      int _4302 = safe_add( _4234,_4224 );
      int _4303 = (int)0;
      int _4304 = _4231;
      long long _4305 = (long long)1;
      int _8809 = (int)0;
      int _8810 = _4304;
      for (int _4306 = _8809; _4306 < _8810; ++_4306)
      {
        {
          _4305 *= _ptr__4241[safe_add( _4232,_4306 )];
        }
      }
      {
        int _4307 = (int)0;
        int _4308 = (int)0;
        while ( ((_4308 < _4233) && (_4307 < _4223)) )
        {
          {
            if ((_ptr__4242[safe_add( _4237,_4308 )] < _ptr__4242[safe_add( _4227,_4307 )]))
            {
              {
                ++ _4303;
                ++ _4308;
              }
            }
            else if((_ptr__4242[safe_add( _4237,_4308 )] > _ptr__4242[safe_add( _4227,_4307 )]))
            {
              {
                ++ _4303;
                ++ _4307;
              }
            }
            else
            {
              {
                ++ _4303;
                ++ _4308;
                ++ _4307;
              }
            }
          }
        }
        _4303 += (safe_add( (_4233 - _4308),_4223 ) - _4307);
      }
      bool _4309 = (_4303 < _4305);
      _4218->alloc_expr(_4304,_4303,_4302,_4309);
      int _4310 = mosek::fusion::p_WorkStack::_get_impl(_4218)->shape_base;
      int _4311 = mosek::fusion::p_WorkStack::_get_impl(_4218)->ptr_base;
      int _8811;
      bool _8812 = _4309;
      if (_8812)
      {
        _8811 = mosek::fusion::p_WorkStack::_get_impl(_4218)->sp_base;
      }
      else
      {
        _8811 = _4218->alloci64(_4303);
      }
      int _4312 = _8811;
      int _4313 = mosek::fusion::p_WorkStack::_get_impl(_4218)->nidxs_base;
      int _4314 = mosek::fusion::p_WorkStack::_get_impl(_4218)->bfix_base;
      int _4315 = mosek::fusion::p_WorkStack::_get_impl(_4218)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4316 = mosek::fusion::p_WorkStack::_get_impl(_4218)->i32;
      _checked_ptr_1<int> _ptr__4316(_4316 ? _4316->raw() : nullptr,_4316 ? _4316->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4317 = mosek::fusion::p_WorkStack::_get_impl(_4218)->i64;
      _checked_ptr_1<long long> _ptr__4317(_4317 ? _4317->raw() : nullptr,_4317 ? _4317->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4318 = mosek::fusion::p_WorkStack::_get_impl(_4218)->f64;
      _checked_ptr_1<double> _ptr__4318(_4318 ? _4318->raw() : nullptr,_4318 ? _4318->size(0) : 0);
      int _8813 = (int)0;
      int _8814 = _4304;
      for (int _4319 = _8813; _4319 < _8814; ++_4319)
      {
        {
          _ptr__4316[safe_add( _4310,_4319 )] = _ptr__4241[safe_add( _4232,_4319 )];
        }
      }
      {
        _ptr__4316[_4311] = (int)0;
        int _4320 = (int)0;
        int _4321 = (int)0;
        int _4322 = (int)0;
        int _4323 = (int)0;
        while ( ((_4323 < _4233) && (_4322 < _4223)) )
        {
          {
            if ((_ptr__4242[safe_add( _4237,_4323 )] < _ptr__4242[safe_add( _4227,_4322 )]))
            {
              {
                int _8815 = _ptr__4241[safe_add( _4236,_4323 )];
                int _8816 = _ptr__4241[safe_add( safe_add( _4236,_4323 ),(int)1 )];
                for (int _4324 = _8815; _4324 < _8816; ++_4324)
                {
                  {
                    _ptr__4317[safe_add( _4313,_4321 )] = _ptr__4242[safe_add( _4238,_4324 )];
                    _ptr__4318[safe_add( _4315,_4321 )] = (m1 * _ptr__4243[safe_add( _4240,_4324 )]);
                    ++ _4321;
                  }
                }
                _ptr__4318[safe_add( _4314,_4320 )] = (m1 * _ptr__4243[safe_add( _4239,_4323 )]);
                _ptr__4317[safe_add( _4312,_4320 )] = _ptr__4242[safe_add( _4237,_4323 )];
                _ptr__4316[safe_add( safe_add( _4311,_4320 ),(int)1 )] = _4321;
                ++ _4320;
                ++ _4323;
              }
            }
            else if((_ptr__4242[safe_add( _4227,_4322 )] < _ptr__4242[safe_add( _4237,_4323 )]))
            {
              {
                int _8817 = _ptr__4241[safe_add( _4226,_4322 )];
                int _8818 = _ptr__4241[safe_add( safe_add( _4226,_4322 ),(int)1 )];
                for (int _4325 = _8817; _4325 < _8818; ++_4325)
                {
                  {
                    _ptr__4317[safe_add( _4313,_4321 )] = _ptr__4242[safe_add( _4228,_4325 )];
                    _ptr__4318[safe_add( _4315,_4321 )] = (m2 * _ptr__4243[safe_add( _4230,_4325 )]);
                    ++ _4321;
                  }
                }
                _ptr__4318[safe_add( _4314,_4320 )] = (m1 * _ptr__4243[safe_add( _4229,_4323 )]);
                _ptr__4317[safe_add( _4312,_4320 )] = _ptr__4242[safe_add( _4227,_4322 )];
                _ptr__4316[safe_add( safe_add( _4311,_4320 ),(int)1 )] = _4321;
                ++ _4320;
                ++ _4322;
              }
            }
            else
            {
              {
                int _8819 = _ptr__4241[safe_add( _4236,_4323 )];
                int _8820 = _ptr__4241[safe_add( safe_add( _4236,_4323 ),(int)1 )];
                for (int _4326 = _8819; _4326 < _8820; ++_4326)
                {
                  {
                    _ptr__4317[safe_add( _4313,_4321 )] = _ptr__4242[safe_add( _4238,_4326 )];
                    _ptr__4318[safe_add( _4315,_4321 )] = (m1 * _ptr__4243[safe_add( _4240,_4326 )]);
                    ++ _4321;
                  }
                }
                int _8821 = _ptr__4241[safe_add( _4226,_4322 )];
                int _8822 = _ptr__4241[safe_add( safe_add( _4226,_4322 ),(int)1 )];
                for (int _4327 = _8821; _4327 < _8822; ++_4327)
                {
                  {
                    _ptr__4317[safe_add( _4313,_4321 )] = _ptr__4242[safe_add( _4228,_4327 )];
                    _ptr__4318[safe_add( _4315,_4321 )] = (m2 * _ptr__4243[safe_add( _4230,_4327 )]);
                    ++ _4321;
                  }
                }
                _ptr__4318[safe_add( _4314,_4320 )] = ((m1 * _ptr__4243[safe_add( _4239,_4323 )]) + (m2 * _ptr__4243[safe_add( _4229,_4322 )]));
                _ptr__4317[safe_add( _4312,_4320 )] = _ptr__4242[safe_add( _4237,_4323 )];
                _ptr__4316[safe_add( safe_add( _4311,_4320 ),(int)1 )] = _4321;
                ++ _4320;
                ++ _4323;
                ++ _4322;
              }
            }
          }
        }
        while ( (_4323 < _4233) )
        {
          {
            int _8823 = _ptr__4241[safe_add( _4236,_4323 )];
            int _8824 = _ptr__4241[safe_add( safe_add( _4236,_4323 ),(int)1 )];
            for (int _4328 = _8823; _4328 < _8824; ++_4328)
            {
              {
                _ptr__4317[safe_add( _4313,_4321 )] = _ptr__4242[safe_add( _4238,_4328 )];
                _ptr__4318[safe_add( _4315,_4321 )] = (m1 * _ptr__4243[safe_add( _4240,_4328 )]);
                ++ _4321;
              }
            }
            _ptr__4318[safe_add( _4314,_4320 )] = (m1 * _ptr__4243[safe_add( _4239,_4323 )]);
            _ptr__4317[safe_add( _4312,_4320 )] = _ptr__4242[safe_add( _4237,_4323 )];
            _ptr__4316[safe_add( safe_add( _4311,_4320 ),(int)1 )] = _4321;
            ++ _4320;
            ++ _4323;
          }
        }
        while ( (_4322 < _4223) )
        {
          {
            int _8825 = _ptr__4241[safe_add( _4226,_4322 )];
            int _8826 = _ptr__4241[safe_add( safe_add( _4226,_4322 ),(int)1 )];
            for (int _4329 = _8825; _4329 < _8826; ++_4329)
            {
              {
                _ptr__4317[safe_add( _4313,_4321 )] = _ptr__4242[safe_add( _4228,_4329 )];
                _ptr__4318[safe_add( _4315,_4321 )] = (m2 * _ptr__4243[safe_add( _4230,_4329 )]);
                ++ _4321;
              }
            }
            _ptr__4318[safe_add( _4314,_4320 )] = (m1 * _ptr__4243[safe_add( _4229,_4322 )]);
            _ptr__4317[safe_add( _4312,_4320 )] = _ptr__4242[safe_add( _4227,_4322 )];
            _ptr__4316[safe_add( safe_add( _4311,_4320 ),(int)1 )] = _4321;
            ++ _4320;
            ++ _4322;
          }
        }
      }
      if ((!_4309))
      {
        {
          _4218->popi64(_4303);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4330,    std::shared_ptr< monty::ndarray< double,1 > > _4331){ return new mosek::fusion::ExprWSum(_4330,_4331); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4330,    std::shared_ptr< monty::ndarray< double,1 > > _4331) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_4330,_4331); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4330,    std::shared_ptr< monty::ndarray< double,1 > > _4331){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__4331(_4331 ? _4331->raw() : nullptr, _4331 ? _4331->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_4330)((int)0))->getShape());
    if (((int)((_4331)->size(0)) != (int)((_4330)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_4331);
    std::shared_ptr< monty::ndarray< int,1 > > _4332 = ((*_4330)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__4332(_4332 ? _4332->raw() : nullptr,_4332 ? _4332->size(0) : 0);
    int _4333 = (int)((_4332)->size(0));
    int _8827 = (int)1;
    int _8828 = (int)((_4330)->size(0));
    for (int _4334 = _8827; _4334 < _8828; ++_4334)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4335 = ((*_4330)(_4334))->getShape();
        _checked_ptr_1<int> _ptr__4335(_4335 ? _4335->raw() : nullptr,_4335 ? _4335->size(0) : 0);
        if ((_4333 != (int)((_4335)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _8829 = (int)0;
            int _8830 = _4333;
            for (int _4336 = _8829; _4336 < _8830; ++_4336)
            {
              {
                if ((_ptr__4332[_4336] != _ptr__4335[_4336]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8831;
    for (int _4337 = (int)0, _8832 = (int)((_4330)->size(0)); _4337 < _8832 ; ++_4337)
    {
      _8831.push_back(((*_4330)(_4337)));
    }
    auto _8833 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8831.size()),_8831.begin(),_8831.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _8833;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4338,monty::rc_ptr< ::mosek::fusion::WorkStack > _4339,monty::rc_ptr< ::mosek::fusion::WorkStack > _4340) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_4338,_4339,_4340); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4338,monty::rc_ptr< ::mosek::fusion::WorkStack > _4339,monty::rc_ptr< ::mosek::fusion::WorkStack > _4340){
  int _4341 = (int)((es)->size(0));
  int _8834 = (int)0;
  int _8835 = _4341;
  for (int _4342 = _8834; _4342 < _8835; ++_4342)
  {
    {
      ((*es)(_4342))->eval(_4339,_4338,_4340);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4343 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4343(_4343 ? _4343->raw() : nullptr,_4343 ? _4343->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4344 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4344(_4344 ? _4344->raw() : nullptr,_4344 ? _4344->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4345 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4345(_4345 ? _4345->raw() : nullptr,_4345 ? _4345->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4346(_4346 ? _4346->raw() : nullptr,_4346 ? _4346->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4347(_4347 ? _4347->raw() : nullptr,_4347 ? _4347->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4348(_4348 ? _4348->raw() : nullptr,_4348 ? _4348->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4349 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
  _checked_ptr_1<int> _ptr__4349(_4349 ? _4349->raw() : nullptr,_4349 ? _4349->size(0) : 0);
  int _4350 = _4339->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4350)));
  _checked_ptr_1<int> _ptr__4351(_4351 ? _4351->raw() : nullptr,_4351 ? _4351->size(0) : 0);
  _4339->popi32(_4350,_4351,(int)0);
  {
    _ptr__4343[(_4341 - (int)1)] = _4339->popi32();
    _ptr__4344[(_4341 - (int)1)] = _4339->popi32();
    bool _4352 = (_4339->popi32() != (int)0);
    _ptr__4345[(_4341 - (int)1)] = _4339->popi32(safe_add( _ptr__4343[(_4341 - (int)1)],(int)1 ));
    int _8836;
    bool _8837 = _4352;
    if (_8837)
    {
      _8836 = _4339->popi64(_ptr__4343[(_4341 - (int)1)]);
    }
    else
    {
      _8836 = (-(int)1);
    }
    _ptr__4347[(_4341 - (int)1)] = _8836;
    _ptr__4346[(_4341 - (int)1)] = _4339->popi64(_ptr__4344[(_4341 - (int)1)]);
    _ptr__4349[(_4341 - (int)1)] = _4339->popf64(_ptr__4343[(_4341 - (int)1)]);
    _ptr__4348[(_4341 - (int)1)] = _4339->popf64(_ptr__4344[(_4341 - (int)1)]);
  }
  int _8838 = (int)1;
  int _8839 = _4341;
  for (int _4353 = _8838; _4353 < _8839; ++_4353)
  {
    {
      int _4354 = ((_4341 - _4353) - (int)1);
      _4339->popi32();
      _4339->popi32(_4350);
      _ptr__4343[_4354] = _4339->popi32();
      _ptr__4344[_4354] = _4339->popi32();
      bool _4355 = (_4339->popi32() != (int)0);
      _ptr__4345[_4354] = _4339->popi32(safe_add( _ptr__4343[_4354],(int)1 ));
      int _8840;
      bool _8841 = _4355;
      if (_8841)
      {
        _8840 = _4339->popi64(_ptr__4343[_4354]);
      }
      else
      {
        _8840 = (-(int)1);
      }
      _ptr__4347[_4354] = _8840;
      _ptr__4346[_4354] = _4339->popi64(_ptr__4344[_4354]);
      _ptr__4349[_4354] = _4339->popf64(_ptr__4343[_4354]);
      _ptr__4348[_4354] = _4339->popf64(_ptr__4344[_4354]);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4356 = mosek::fusion::p_WorkStack::_get_impl(_4339)->i32;
  _checked_ptr_1<int> _ptr__4356(_4356 ? _4356->raw() : nullptr,_4356 ? _4356->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4357 = mosek::fusion::p_WorkStack::_get_impl(_4339)->i64;
  _checked_ptr_1<long long> _ptr__4357(_4357 ? _4357->raw() : nullptr,_4357 ? _4357->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4358 = mosek::fusion::p_WorkStack::_get_impl(_4339)->f64;
  _checked_ptr_1<double> _ptr__4358(_4358 ? _4358->raw() : nullptr,_4358 ? _4358->size(0) : 0);
  bool _4359 = false;
  int _8842 = (int)0;
  int _8843 = _4341;
  for (int _4360 = _8842; _4360 < _8843; ++_4360)
  {
    {
      if ((_ptr__4347[_4360] < (int)0))
      {
        {
          _4359 = true;
        }
      }
      {}
    }
  }
  int _4361 = (int)0;
  int _4362 = (int)0;
  if (_4359)
  {
    {
      _4361 = (int)::mosek::fusion::p_Set::size(_4351);
      int _8844 = (int)0;
      int _8845 = _4341;
      for (int _4363 = _8844; _4363 < _8845; ++_4363)
      {
        {
          _4362 += _ptr__4344[_4363];
        }
      }
    }
  }
  else
  {
    {
      bool _4364 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4365 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
      _checked_ptr_1<int> _ptr__4365(_4365 ? _4365->raw() : nullptr,_4365 ? _4365->size(0) : 0);
      int _8846 = (int)0;
      int _8847 = _4341;
      for (int _4366 = _8846; _4366 < _8847; ++_4366)
      {
        {
          _4362 += _ptr__4344[_4366];
        }
      }
      while ( (!_4364) )
      {
        {
          long long _4367 = (-(int)1);
          int _8848 = (int)0;
          int _8849 = _4341;
          for (int _4368 = _8848; _4368 < _8849; ++_4368)
          {
            {
              if (((_ptr__4365[_4368] < _ptr__4343[_4368]) && ((_4367 < (int)0) || (_ptr__4357[safe_add( _ptr__4347[_4368],_ptr__4365[_4368] )] < _4367))))
              {
                {
                  _4367 = _ptr__4357[safe_add( _ptr__4347[_4368],_ptr__4365[_4368] )];
                }
              }
              {}
            }
          }
          if ((_4367 < (int)0))
          {
            {
              _4364 = true;
            }
          }
          else
          {
            {
              int _8850 = (int)0;
              int _8851 = _4341;
              for (int _4369 = _8850; _4369 < _8851; ++_4369)
              {
                {
                  if (((_ptr__4365[_4369] < _ptr__4343[_4369]) && (_4367 == _ptr__4357[safe_add( _ptr__4347[_4369],_ptr__4365[_4369] )])))
                  {
                    {
                      ++ _ptr__4365[_4369];
                    }
                  }
                  {}
                }
              }
              ++ _4361;
            }
          }
        }
      }
    }
  }
  int _4370 = _4338->alloci32(safe_add( _4361,(int)1 ));
  int _4371 = _4338->alloci64(_4362);
  int _8852;
  bool _8853 = (!_4359);
  if (_8853)
  {
    _8852 = _4338->alloci64(_4361);
  }
  else
  {
    _8852 = (-(int)1);
  }
  int _4372 = _8852;
  int _4373 = _4338->allocf64(_4362);
  int _4374 = _4338->allocf64(_4361);
  int _8854;
  bool _8855 = _4359;
  if (_8855)
  {
    _8854 = (int)0;
  }
  else
  {
    _8854 = (int)1;
  }
  _4338->pushi32(_8854);
  _4338->pushi32(_4362);
  _4338->pushi32(_4361);
  int _8856 = (int)0;
  int _8857 = _4350;
  for (int _4375 = _8856; _4375 < _8857; ++_4375)
  {
    {
      _4338->pushi32(_ptr__4351[_4375]);
    }
  }
  _4338->pushi32(_4350);
  std::shared_ptr< monty::ndarray< int,1 > > _4376 = mosek::fusion::p_WorkStack::_get_impl(_4338)->i32;
  _checked_ptr_1<int> _ptr__4376(_4376 ? _4376->raw() : nullptr,_4376 ? _4376->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4377 = mosek::fusion::p_WorkStack::_get_impl(_4338)->i64;
  _checked_ptr_1<long long> _ptr__4377(_4377 ? _4377->raw() : nullptr,_4377 ? _4377->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4378 = mosek::fusion::p_WorkStack::_get_impl(_4338)->f64;
  _checked_ptr_1<double> _ptr__4378(_4378 ? _4378->raw() : nullptr,_4378 ? _4378->size(0) : 0);
  _ptr__4376[_4370] = (int)0;
  int _8858 = (int)0;
  int _8859 = _4361;
  for (int _4379 = _8858; _4379 < _8859; ++_4379)
  {
    {
      _ptr__4378[safe_add( _4374,_4379 )] = 0.0;
    }
  }
  int _8860 = (int)0;
  int _8861 = safe_add( _4361,(int)1 );
  for (int _4380 = _8860; _4380 < _8861; ++_4380)
  {
    {
      _ptr__4376[safe_add( _4370,_4380 )] = (int)0;
    }
  }
  if (_4359)
  {
    {
      int _8862 = (int)0;
      int _8863 = _4341;
      for (int _4381 = _8862; _4381 < _8863; ++_4381)
      {
        {
          if ((_ptr__4347[_4381] >= (int)0))
          {
            {
              int _8864 = (int)0;
              int _8865 = _ptr__4343[_4381];
              for (int _4382 = _8864; _4382 < _8865; ++_4382)
              {
                {
                  _ptr__4376[safe_add( safe_add( _4370,_ptr__4357[safe_add( _ptr__4347[_4381],_4382 )] ),(int)1 )] += (_ptr__4356[safe_add( safe_add( _ptr__4345[_4381],_4382 ),(int)1 )] - _ptr__4356[safe_add( _ptr__4345[_4381],_4382 )]);
                }
              }
            }
          }
          else
          {
            {
              int _8866 = (int)0;
              int _8867 = _ptr__4343[_4381];
              for (int _4383 = _8866; _4383 < _8867; ++_4383)
              {
                {
                  _ptr__4376[safe_add( safe_add( _4370,_4383 ),(int)1 )] += (_ptr__4356[safe_add( safe_add( _ptr__4345[_4381],_4383 ),(int)1 )] - _ptr__4356[safe_add( _ptr__4345[_4381],_4383 )]);
                }
              }
            }
          }
        }
      }
      int _8868 = (int)0;
      int _8869 = _4361;
      for (int _4384 = _8868; _4384 < _8869; ++_4384)
      {
        {
          _ptr__4376[safe_add( safe_add( _4370,_4384 ),(int)1 )] += _ptr__4376[safe_add( _4370,_4384 )];
        }
      }
      int _8870 = (int)0;
      int _8871 = _4341;
      for (int _4385 = _8870; _4385 < _8871; ++_4385)
      {
        {
          if ((_ptr__4347[_4385] >= (int)0))
          {
            {
              int _8872 = (int)0;
              int _8873 = _ptr__4343[_4385];
              for (int _4386 = _8872; _4386 < _8873; ++_4386)
              {
                {
                  int _4387 = _ptr__4356[safe_add( _ptr__4345[_4385],_4386 )];
                  int _4388 = _ptr__4356[safe_add( safe_add( _ptr__4345[_4385],_4386 ),(int)1 )];
                  long long _4389 = _ptr__4357[safe_add( _ptr__4347[_4385],_4386 )];
                  int _4390 = _ptr__4376[safe_add( _4370,_4389 )];
                  int _8874 = _4387;
                  int _8875 = _4388;
                  for (int _4391 = _8874; _4391 < _8875; ++_4391)
                  {
                    {
                      _ptr__4377[safe_add( _4371,_4390 )] = _ptr__4357[safe_add( _ptr__4346[_4385],_4391 )];
                      _ptr__4378[safe_add( _4373,_4390 )] = (((*w)(_4385)) * _ptr__4358[safe_add( _ptr__4348[_4385],_4391 )]);
                      ++ _4390;
                    }
                  }
                  _ptr__4378[safe_add( _4374,_4389 )] += (((*w)(_4385)) * _ptr__4358[safe_add( _ptr__4349[_4385],_4386 )]);
                  _ptr__4376[safe_add( _4370,_4389 )] += (_4388 - _4387);
                }
              }
            }
          }
          else
          {
            {
              int _8876 = (int)0;
              int _8877 = _ptr__4343[_4385];
              for (int _4392 = _8876; _4392 < _8877; ++_4392)
              {
                {
                  int _4393 = _ptr__4356[safe_add( _ptr__4345[_4385],_4392 )];
                  int _4394 = _ptr__4356[safe_add( safe_add( _ptr__4345[_4385],_4392 ),(int)1 )];
                  int _4395 = _4392;
                  int _4396 = _ptr__4376[safe_add( _4370,_4395 )];
                  int _8878 = _4393;
                  int _8879 = _4394;
                  for (int _4397 = _8878; _4397 < _8879; ++_4397)
                  {
                    {
                      _ptr__4377[safe_add( _4371,_4396 )] = _ptr__4357[safe_add( _ptr__4346[_4385],_4397 )];
                      _ptr__4378[safe_add( _4373,_4396 )] = (((*w)(_4385)) * _ptr__4358[safe_add( _ptr__4348[_4385],_4397 )]);
                      ++ _4396;
                    }
                  }
                  _ptr__4378[safe_add( _4374,_4395 )] += (((*w)(_4385)) * _ptr__4358[safe_add( _ptr__4349[_4385],_4392 )]);
                  _ptr__4376[safe_add( _4370,_4395 )] += (_4394 - _4393);
                }
              }
            }
          }
        }
      }
      int _8880 = (int)0;
      int _8881 = _4361;
      for (int _4398 = _8880; _4398 < _8881; ++_4398)
      {
        {
          _ptr__4376[(safe_add( _4370,_4361 ) - _4398)] = _ptr__4376[((safe_add( _4370,_4361 ) - _4398) - (int)1)];
        }
      }
      _ptr__4376[_4370] = (int)0;
    }
  }
  else
  {
    {
      bool _4399 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4400 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4341)));
      _checked_ptr_1<int> _ptr__4400(_4400 ? _4400->raw() : nullptr,_4400 ? _4400->size(0) : 0);
      int _4401 = (int)0;
      int _4402 = (int)0;
      while ( (!_4399) )
      {
        {
          long long _4403 = (-(int)1);
          int _8882 = (int)0;
          int _8883 = _4341;
          for (int _4404 = _8882; _4404 < _8883; ++_4404)
          {
            {
              if (((_ptr__4400[_4404] < _ptr__4343[_4404]) && ((_4403 < (int)0) || (_ptr__4357[safe_add( _ptr__4347[_4404],_ptr__4400[_4404] )] < _4403))))
              {
                {
                  _4403 = _ptr__4357[safe_add( _ptr__4347[_4404],_ptr__4400[_4404] )];
                }
              }
              {}
            }
          }
          if ((_4403 < (int)0))
          {
            {
              _4399 = true;
            }
          }
          else
          {
            {
              int _8884 = (int)0;
              int _8885 = _4341;
              for (int _4405 = _8884; _4405 < _8885; ++_4405)
              {
                {
                  if (((_ptr__4400[_4405] < _ptr__4343[_4405]) && (_4403 == _ptr__4357[safe_add( _ptr__4347[_4405],_ptr__4400[_4405] )])))
                  {
                    {
                      int _8886 = _ptr__4356[safe_add( _ptr__4345[_4405],_ptr__4400[_4405] )];
                      int _8887 = _ptr__4356[safe_add( safe_add( _ptr__4345[_4405],_ptr__4400[_4405] ),(int)1 )];
                      for (int _4406 = _8886; _4406 < _8887; ++_4406)
                      {
                        {
                          _ptr__4377[safe_add( _4371,_4402 )] = _ptr__4357[safe_add( _ptr__4346[_4405],_4406 )];
                          _ptr__4378[safe_add( _4373,_4402 )] = (((*w)(_4405)) * _ptr__4358[safe_add( _ptr__4348[_4405],_4406 )]);
                          ++ _4402;
                        }
                      }
                      _ptr__4378[safe_add( _4374,_4401 )] += (((*w)(_4405)) * _ptr__4358[safe_add( _ptr__4349[_4405],_ptr__4400[_4405] )]);
                      ++ _ptr__4400[_4405];
                    }
                  }
                  {}
                }
              }
              _ptr__4376[safe_add( safe_add( _4370,_4401 ),(int)1 )] = _4402;
              _ptr__4377[safe_add( _4372,_4401 )] = _4403;
            }
          }
          ++ _4401;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  return std::string ("ExprWSum()");
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _4407,    monty::rc_ptr< ::mosek::fusion::Expression > _4408){ return new mosek::fusion::ExprSumReduce(_4407,_4408); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _4407,    monty::rc_ptr< ::mosek::fusion::Expression > _4408) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_4407,_4408); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _4407,    monty::rc_ptr< ::mosek::fusion::Expression > _4408){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_4407,_4408->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _4408;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _4407;
    std::shared_ptr< monty::ndarray< int,1 > > _4409 = _4408->getShape();
    _checked_ptr_1<int> _ptr__4409(_4409 ? _4409->raw() : nullptr,_4409 ? _4409->size(0) : 0);
    if (((int)((_4409)->size(0)) <= _4407))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4410,monty::rc_ptr< ::mosek::fusion::WorkStack > _4411,monty::rc_ptr< ::mosek::fusion::WorkStack > _4412) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_4410,_4411,_4412); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4410,monty::rc_ptr< ::mosek::fusion::WorkStack > _4411,monty::rc_ptr< ::mosek::fusion::WorkStack > _4412){
  expr->eval(_4411,_4410,_4412);
  _4411->pop_expr();
  int _4413 = mosek::fusion::p_WorkStack::_get_impl(_4411)->nd;
  int _4414 = mosek::fusion::p_WorkStack::_get_impl(_4411)->shape_base;
  int _4415 = mosek::fusion::p_WorkStack::_get_impl(_4411)->nelem;
  int _4416 = mosek::fusion::p_WorkStack::_get_impl(_4411)->nnz;
  bool _4417 = mosek::fusion::p_WorkStack::_get_impl(_4411)->hassp;
  int _4418 = mosek::fusion::p_WorkStack::_get_impl(_4411)->ptr_base;
  int _4419 = mosek::fusion::p_WorkStack::_get_impl(_4411)->sp_base;
  int _4420 = mosek::fusion::p_WorkStack::_get_impl(_4411)->nidxs_base;
  int _4421 = mosek::fusion::p_WorkStack::_get_impl(_4411)->bfix_base;
  int _4422 = mosek::fusion::p_WorkStack::_get_impl(_4411)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4423 = mosek::fusion::p_WorkStack::_get_impl(_4411)->i32;
  _checked_ptr_1<int> _ptr__4423(_4423 ? _4423->raw() : nullptr,_4423 ? _4423->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4424 = mosek::fusion::p_WorkStack::_get_impl(_4411)->i64;
  _checked_ptr_1<long long> _ptr__4424(_4424 ? _4424->raw() : nullptr,_4424 ? _4424->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4425 = mosek::fusion::p_WorkStack::_get_impl(_4411)->f64;
  _checked_ptr_1<double> _ptr__4425(_4425 ? _4425->raw() : nullptr,_4425 ? _4425->size(0) : 0);
  int _4426 = (int)99999;
  int _4427 = (int)99999;
  int _4428 = (int)99999;
  if (_4417)
  {
    {
      int _4429 = (int)0;
      int _8888 = (int)0;
      int _8889 = _4413;
      for (int _4430 = _8888; _4430 < _8889; ++_4430)
      {
        {
          if ((_4429 < _ptr__4423[safe_add( _4414,_4430 )]))
          {
            {
              _4429 = _ptr__4423[safe_add( _4414,_4430 )];
            }
          }
          {}
        }
      }
      _4426 = _4412->alloci32(safe_add( _4429,(int)1 ));
      _4427 = _4412->alloci32(_4415);
      _4428 = _4412->alloci32(_4415);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _4431 = mosek::fusion::p_WorkStack::_get_impl(_4412)->i32;
  _checked_ptr_1<int> _ptr__4431(_4431 ? _4431->raw() : nullptr,_4431 ? _4431->size(0) : 0);
  if (_4417)
  {
    {
      int _4432 = _4427;
      int _4433 = _4428;
      int _8890 = (int)0;
      int _8891 = _4415;
      for (int _4434 = _8890; _4434 < _8891; ++_4434)
      {
        {
          _ptr__4431[safe_add( _4432,_4434 )] = _4434;
        }
      }
      if ((dim < (_4413 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _4435 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4413)));
          _checked_ptr_1<long long> _ptr__4435(_4435 ? _4435->raw() : nullptr,_4435 ? _4435->size(0) : 0);
          _ptr__4435[(_4413 - (int)1)] = (int)1;
          int _8892 = (int)1;
          int _8893 = _4413;
          for (int _4436 = _8892; _4436 < _8893; ++_4436)
          {
            {
              _ptr__4435[((_4413 - _4436) - (int)1)] = safe_mul( _ptr__4435[(_4413 - _4436)],_ptr__4423[(safe_add( _4414,_4413 ) - _4436)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _4437 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_4413 - (int)1))));
          _checked_ptr_1<int> _ptr__4437(_4437 ? _4437->raw() : nullptr,_4437 ? _4437->size(0) : 0);
          int _8894 = (int)0;
          int _8895 = dim;
          for (int _4438 = _8894; _4438 < _8895; ++_4438)
          {
            {
              _ptr__4437[((_4413 - _4438) - (int)2)] = _4438;
            }
          }
          int _8896 = safe_add( dim,(int)1 );
          int _8897 = _4413;
          for (int _4439 = _8896; _4439 < _8897; ++_4439)
          {
            {
              _ptr__4437[((_4413 - _4439) - (int)1)] = _4439;
            }
          }
          int _8898 = (int)0;
          int _8899 = (_4413 - (int)1);
          for (int _4440 = _8898; _4440 < _8899; ++_4440)
          {
            {
              int _4441 = _ptr__4437[_4440];
              int _4442 = _ptr__4423[safe_add( _4414,_4441 )];
              int _8900 = (int)0;
              int _8901 = safe_add( _4442,(int)1 );
              for (int _4443 = _8900; _4443 < _8901; ++_4443)
              {
                {
                  _ptr__4431[safe_add( _4426,_4443 )] = (int)0;
                }
              }
              int _8902 = (int)0;
              int _8903 = _4415;
              for (int _4444 = _8902; _4444 < _8903; ++_4444)
              {
                {
                  ++ _ptr__4431[safe_add( safe_add( _4426,(int)1 ),((_ptr__4424[safe_add( _4419,_4444 )] / _ptr__4435[_4441]) % _4442) )];
                }
              }
              int _8904 = (int)0;
              int _8905 = _4442;
              for (int _4445 = _8904; _4445 < _8905; ++_4445)
              {
                {
                  _ptr__4431[safe_add( safe_add( _4426,_4445 ),(int)1 )] += _ptr__4431[safe_add( _4426,_4445 )];
                }
              }
              int _8906 = (int)0;
              int _8907 = _4415;
              for (int _4446 = _8906; _4446 < _8907; ++_4446)
              {
                {
                  int _4447 = _ptr__4431[safe_add( _4432,_4446 )];
                  long long _4448 = ((_ptr__4424[safe_add( _4419,_4447 )] / _ptr__4435[_4441]) % _4442);
                  _ptr__4431[safe_add( _4433,_ptr__4431[safe_add( _4426,_4448 )] )] = _4447;
                  ++ _ptr__4431[safe_add( _4426,_4448 )];
                }
              }
              int _4449 = _4433;
              _4433 = _4432;
              _4432 = _4449;
            }
          }
        }
      }
      {}
      int _4450 = (int)1;
      int _8908 = (int)0;
      int _8909 = dim;
      for (int _4451 = _8908; _4451 < _8909; ++_4451)
      {
        {
          _4450 *= _ptr__4423[safe_add( _4414,_4451 )];
        }
      }
      int _4452 = _ptr__4423[safe_add( _4414,dim )];
      int _4453 = (int)1;
      int _8910 = safe_add( dim,(int)1 );
      int _8911 = _4413;
      for (int _4454 = _8910; _4454 < _8911; ++_4454)
      {
        {
          _4453 *= _ptr__4423[safe_add( _4414,_4454 )];
        }
      }
      int _4455 = safe_mul( _4453,_4452 );
      int _4456 = _4453;
      int _4457 = (int)1;
      int _4458 = (int)0;
      long long _4459 = (-(int)1);
      long long _4460 = (-(int)1);
      int _8912 = (int)0;
      int _8913 = _4415;
      for (int _4461 = _8912; _4461 < _8913; ++_4461)
      {
        {
          int _4462 = _ptr__4431[safe_add( _4432,_4461 )];
          long long _4463 = ((_ptr__4424[safe_add( _4419,_4462 )] / _4455) % _4450);
          long long _4464 = (_ptr__4424[safe_add( _4419,_4462 )] % _4453);
          if (((_4460 != _4463) || (_4459 != _4464)))
          {
            {
              _4460 = _4463;
              _4459 = _4464;
              ++ _4458;
            }
          }
          {}
        }
      }
      int _4465 = (_4413 - (int)1);
      bool _4466 = (_4458 < safe_mul( _4450,_4453 ));
      int _4467 = _4416;
      _4410->alloc_expr(_4465,_4458,_4467,_4466);
      int _4468 = mosek::fusion::p_WorkStack::_get_impl(_4410)->ptr_base;
      int _4469 = mosek::fusion::p_WorkStack::_get_impl(_4410)->nidxs_base;
      int _8914;
      bool _8915 = _4466;
      if (_8915)
      {
        _8914 = mosek::fusion::p_WorkStack::_get_impl(_4410)->sp_base;
      }
      else
      {
        _8914 = _4410->alloci64(_4458);
      }
      int _4470 = _8914;
      int _4471 = mosek::fusion::p_WorkStack::_get_impl(_4410)->cof_base;
      int _4472 = mosek::fusion::p_WorkStack::_get_impl(_4410)->bfix_base;
      int _4473 = mosek::fusion::p_WorkStack::_get_impl(_4410)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4474 = mosek::fusion::p_WorkStack::_get_impl(_4410)->i32;
      _checked_ptr_1<int> _ptr__4474(_4474 ? _4474->raw() : nullptr,_4474 ? _4474->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4475 = mosek::fusion::p_WorkStack::_get_impl(_4410)->i64;
      _checked_ptr_1<long long> _ptr__4475(_4475 ? _4475->raw() : nullptr,_4475 ? _4475->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4476 = mosek::fusion::p_WorkStack::_get_impl(_4410)->f64;
      _checked_ptr_1<double> _ptr__4476(_4476 ? _4476->raw() : nullptr,_4476 ? _4476->size(0) : 0);
      int _8916 = (int)0;
      int _8917 = dim;
      for (int _4477 = _8916; _4477 < _8917; ++_4477)
      {
        {
          _ptr__4474[safe_add( _4473,_4477 )] = _ptr__4423[safe_add( _4414,_4477 )];
        }
      }
      int _8918 = safe_add( dim,(int)1 );
      int _8919 = _4413;
      for (int _4478 = _8918; _4478 < _8919; ++_4478)
      {
        {
          _ptr__4474[(safe_add( _4473,_4478 ) - (int)1)] = _ptr__4423[safe_add( _4414,_4478 )];
        }
      }
      _ptr__4474[_4468] = (int)0;
      int _4479 = (int)0;
      int _4480 = (int)0;
      int _4481 = (int)0;
      while ( (_4481 < _4415) )
      {
        {
          int _4482 = _4481;
          long long _4483 = ((_ptr__4424[safe_add( _4419,_ptr__4431[safe_add( _4432,_4482 )] )] / _4455) % _4450);
          long long _4484 = (_ptr__4424[safe_add( _4419,_ptr__4431[safe_add( _4432,_4482 )] )] % _4453);
          ++ _4481;
          while ( ((_4481 < _4415) && ((_4483 == ((_ptr__4424[safe_add( _4419,_ptr__4431[safe_add( _4432,_4481 )] )] / _4455) % _4450)) && (_4484 == (_ptr__4424[safe_add( _4419,_ptr__4431[safe_add( _4432,_4481 )] )] % _4453)))) )
          {
            {
              ++ _4481;
            }
          }
          double _4485 = 0.0;
          int _8920 = _4482;
          int _8921 = _4481;
          for (int _4486 = _8920; _4486 < _8921; ++_4486)
          {
            {
              int _4487 = _ptr__4431[safe_add( _4432,_4486 )];
              int _8922 = _ptr__4423[safe_add( _4418,_4487 )];
              int _8923 = _ptr__4423[safe_add( safe_add( _4418,_4487 ),(int)1 )];
              for (int _4488 = _8922; _4488 < _8923; ++_4488)
              {
                {
                  _ptr__4475[safe_add( _4469,_4480 )] = _ptr__4424[safe_add( _4420,_4488 )];
                  _ptr__4476[safe_add( _4471,_4480 )] = _ptr__4425[safe_add( _4422,_4488 )];
                  ++ _4480;
                }
              }
              _4485 += _ptr__4425[safe_add( _4421,_4487 )];
            }
          }
          _ptr__4475[safe_add( _4470,_4479 )] = safe_add( safe_mul( _4483,_4453 ),_4484 );
          _ptr__4474[safe_add( safe_add( _4468,_4479 ),(int)1 )] = _4480;
          _ptr__4476[safe_add( _4472,_4479 )] = _4485;
          ++ _4479;
        }
      }
      if ((!_4466))
      {
        {
          _4410->popi64(_4458);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4489 = (int)1;
      int _8924 = (int)0;
      int _8925 = dim;
      for (int _4490 = _8924; _4490 < _8925; ++_4490)
      {
        {
          _4489 *= _ptr__4423[safe_add( _4414,_4490 )];
        }
      }
      int _4491 = _ptr__4423[safe_add( _4414,dim )];
      int _4492 = (int)1;
      int _8926 = safe_add( dim,(int)1 );
      int _8927 = _4413;
      for (int _4493 = _8926; _4493 < _8927; ++_4493)
      {
        {
          _4492 *= _ptr__4423[safe_add( _4414,_4493 )];
        }
      }
      int _4494 = safe_mul( _4492,_4491 );
      int _4495 = _4492;
      int _4496 = (int)1;
      int _4497 = safe_mul( _4489,_4492 );
      int _4498 = _4410->alloci32(safe_add( _4497,(int)1 ));
      int _4499 = _4410->alloci64(_4416);
      int _4500 = _4410->allocf64(_4416);
      int _4501 = _4410->allocf64(_4497);
      _4410->pushi32((int)0);
      _4410->pushi32(_4416);
      _4410->pushi32(_4497);
      int _4502 = _4410->alloci32((_4413 - (int)1));
      _4410->pushi32((_4413 - (int)1));
      std::shared_ptr< monty::ndarray< int,1 > > _4503 = mosek::fusion::p_WorkStack::_get_impl(_4410)->i32;
      _checked_ptr_1<int> _ptr__4503(_4503 ? _4503->raw() : nullptr,_4503 ? _4503->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4504 = mosek::fusion::p_WorkStack::_get_impl(_4410)->i64;
      _checked_ptr_1<long long> _ptr__4504(_4504 ? _4504->raw() : nullptr,_4504 ? _4504->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4505 = mosek::fusion::p_WorkStack::_get_impl(_4410)->f64;
      _checked_ptr_1<double> _ptr__4505(_4505 ? _4505->raw() : nullptr,_4505 ? _4505->size(0) : 0);
      int _8928 = (int)0;
      int _8929 = dim;
      for (int _4506 = _8928; _4506 < _8929; ++_4506)
      {
        {
          _ptr__4503[safe_add( _4502,_4506 )] = _ptr__4423[safe_add( _4414,_4506 )];
        }
      }
      int _8930 = safe_add( dim,(int)1 );
      int _8931 = _4413;
      for (int _4507 = _8930; _4507 < _8931; ++_4507)
      {
        {
          _ptr__4503[(safe_add( _4502,_4507 ) - (int)1)] = _ptr__4423[safe_add( _4414,_4507 )];
        }
      }
      int _4508 = (int)0;
      int _4509 = (int)0;
      _ptr__4503[_4498] = (int)0;
      int _8932 = (int)0;
      int _8933 = _4489;
      for (int _4510 = _8932; _4510 < _8933; ++_4510)
      {
        {
          int _8934 = (int)0;
          int _8935 = _4492;
          for (int _4511 = _8934; _4511 < _8935; ++_4511)
          {
            {
              double _4512 = 0.0;
              int _8936 = (int)0;
              int _8937 = _4491;
              for (int _4513 = _8936; _4513 < _8937; ++_4513)
              {
                {
                  int _4514 = safe_add( safe_add( safe_mul( _4510,_4494 ),safe_mul( _4513,_4495 ) ),_4511 );
                  int _8938 = _ptr__4423[safe_add( _4418,_4514 )];
                  int _8939 = _ptr__4423[safe_add( safe_add( _4418,_4514 ),(int)1 )];
                  for (int _4515 = _8938; _4515 < _8939; ++_4515)
                  {
                    {
                      _ptr__4504[safe_add( _4499,_4509 )] = _ptr__4424[safe_add( _4420,_4515 )];
                      _ptr__4505[safe_add( _4500,_4509 )] = _ptr__4425[safe_add( _4422,_4515 )];
                      ++ _4509;
                    }
                  }
                  _4512 += _ptr__4425[safe_add( _4421,_4514 )];
                }
              }
              _ptr__4503[safe_add( safe_add( _4498,_4508 ),(int)1 )] = _4509;
              _ptr__4505[safe_add( _4501,_4508 )] = _4512;
              ++ _4508;
            }
          }
        }
      }
    }
  }
  _4412->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _4516,std::shared_ptr< monty::ndarray< int,1 > > _4517){
  _checked_ptr_1<int> _ptr__4517(_4517 ? _4517->raw() : nullptr, _4517 ? _4517->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4518 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_4517)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__4518(_4518 ? _4518->raw() : nullptr,_4518 ? _4518->size(0) : 0);
  int _8940 = (int)0;
  int _8941 = _4516;
  for (int _4519 = _8940; _4519 < _8941; ++_4519)
  {
    {
      _ptr__4518[_4519] = _ptr__4517[_4519];
    }
  }
  int _8942 = safe_add( _4516,(int)1 );
  int _8943 = (int)((_4517)->size(0));
  for (int _4520 = _8942; _4520 < _8943; ++_4520)
  {
    {
      _ptr__4518[(_4520 - (int)1)] = _ptr__4517[_4520];
    }
  }
  return _4518;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return std::string ("ExprSumReduce()");
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4521,    int _4522,    monty::rc_ptr< ::mosek::fusion::Expression > _4523,    int _4524){ return new mosek::fusion::ExprDenseTril(_4521,_4522,_4523,_4524); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4521,    int _4522,    monty::rc_ptr< ::mosek::fusion::Expression > _4523,    int _4524) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4521,_4522,_4523,_4524); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4521,    int _4522,    monty::rc_ptr< ::mosek::fusion::Expression > _4523,    int _4524){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4523->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _4523;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _4521;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _4522;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4525,    int _4526,    monty::rc_ptr< ::mosek::fusion::Expression > _4527){ return new mosek::fusion::ExprDenseTril(_4525,_4526,_4527); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4525,    int _4526,    monty::rc_ptr< ::mosek::fusion::Expression > _4527) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4525,_4526,_4527); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4525,    int _4526,    monty::rc_ptr< ::mosek::fusion::Expression > _4527){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_4525,_4526,_4527,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4528 = _4527->getShape();
    _checked_ptr_1<int> _ptr__4528(_4528 ? _4528->raw() : nullptr,_4528 ? _4528->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_4528)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_4528)->size(0))) || (_ptr__4528[dim0] != _ptr__4528[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4529,monty::rc_ptr< ::mosek::fusion::WorkStack > _4530,monty::rc_ptr< ::mosek::fusion::WorkStack > _4531) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_4529,_4530,_4531); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4529,monty::rc_ptr< ::mosek::fusion::WorkStack > _4530,monty::rc_ptr< ::mosek::fusion::WorkStack > _4531){
  expr->eval(_4530,_4529,_4531);
  std::shared_ptr< monty::ndarray< int,1 > > _4532 = mosek::fusion::p_WorkStack::_get_impl(_4530)->i32;
  _checked_ptr_1<int> _ptr__4532(_4532 ? _4532->raw() : nullptr,_4532 ? _4532->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4533 = mosek::fusion::p_WorkStack::_get_impl(_4530)->i64;
  _checked_ptr_1<long long> _ptr__4533(_4533 ? _4533->raw() : nullptr,_4533 ? _4533->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4534 = mosek::fusion::p_WorkStack::_get_impl(_4530)->f64;
  _checked_ptr_1<double> _ptr__4534(_4534 ? _4534->raw() : nullptr,_4534 ? _4534->size(0) : 0);
  int _8944;
  bool _8945 = (dim0 < dim1);
  if (_8945)
  {
    _8944 = dim0;
  }
  else
  {
    _8944 = dim1;
  }
  int _4535 = _8944;
  int _8946;
  bool _8947 = (dim0 > dim1);
  if (_8947)
  {
    _8946 = dim0;
  }
  else
  {
    _8946 = dim1;
  }
  int _4536 = _8946;
  bool _4537 = (dim0 < dim1);
  int _4538 = _4530->popi32();
  int _4539 = _4530->popi32(_4538);
  int _4540 = _4530->popi32();
  int _4541 = _4530->popi32();
  bool _4542 = (_4530->popi32() != (int)0);
  int _4543 = _4530->popi32(safe_add( _4540,(int)1 ));
  int _8948;
  bool _8949 = _4542;
  if (_8949)
  {
    _8948 = _4530->popi64(_4540);
  }
  else
  {
    _8948 = (-(int)1);
  }
  int _4544 = _8948;
  int _4545 = _4530->popi64(_4541);
  int _4546 = _4530->popf64(_4540);
  int _4547 = _4530->popf64(_4541);
  std::vector<int> _8950;
  for (int _4549 = (int)0, _8951 = (int)5; _4549 < _8951 ; ++_4549)
  {
    _8950.push_back((int)1);
  }
  auto _8952 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8950.size()),_8950.begin(),_8950.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4548 = _8952;
  _checked_ptr_1<int> _ptr__4548(_4548 ? _4548->raw() : nullptr,_4548 ? _4548->size(0) : 0);
  int _8953 = (int)0;
  int _8954 = _4535;
  for (int _4550 = _8953; _4550 < _8954; ++_4550)
  {
    {
      _ptr__4548[(int)0] *= _ptr__4532[safe_add( _4539,_4550 )];
    }
  }
  _ptr__4548[(int)1] = _ptr__4532[safe_add( _4539,_4535 )];
  int _8955 = safe_add( _4535,(int)1 );
  int _8956 = _4536;
  for (int _4551 = _8955; _4551 < _8956; ++_4551)
  {
    {
      _ptr__4548[(int)2] *= _ptr__4532[safe_add( _4539,_4551 )];
    }
  }
  _ptr__4548[(int)3] = _ptr__4532[safe_add( _4539,_4536 )];
  int _8957 = safe_add( _4536,(int)1 );
  int _8958 = _4538;
  for (int _4552 = _8957; _4552 < _8958; ++_4552)
  {
    {
      _ptr__4548[(int)4] *= _ptr__4532[safe_add( _4539,_4552 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4553 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__4553(_4553 ? _4553->raw() : nullptr,_4553 ? _4553->size(0) : 0);
  _ptr__4553[(int)4] = (int)1;
  int _8959 = (int)1;
  int _8960 = (int)5;
  for (int _4554 = _8959; _4554 < _8960; ++_4554)
  {
    {
      _ptr__4553[(((int)5 - _4554) - (int)1)] = safe_mul( _ptr__4553[((int)5 - _4554)],_ptr__4548[((int)5 - _4554)] );
    }
  }
  int _4555 = (int)0;
  int _4556 = (int)0;
  {
    if (_4542)
    {
      {
        if (_4537)
        {
          {
            int _8961 = (int)0;
            int _8962 = _4540;
            for (int _4557 = _8961; _4557 < _8962; ++_4557)
            {
              {
                long long _4558 = ((_ptr__4533[safe_add( _4544,_4557 )] / _ptr__4553[(int)1]) % _ptr__4548[(int)1]);
                long long _4559 = ((_ptr__4533[safe_add( _4544,_4557 )] / _ptr__4553[(int)3]) % _ptr__4548[(int)3]);
                if ((_4558 >= _4559))
                {
                  {
                    _4555 += (_ptr__4532[safe_add( safe_add( _4543,_4557 ),(int)1 )] - _ptr__4532[safe_add( _4543,_4557 )]);
                    ++ _4556;
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _8963 = (int)0;
            int _8964 = _4540;
            for (int _4560 = _8963; _4560 < _8964; ++_4560)
            {
              {
                long long _4561 = ((_ptr__4533[safe_add( _4544,_4560 )] / _ptr__4553[(int)1]) % _ptr__4548[(int)1]);
                long long _4562 = ((_ptr__4533[safe_add( _4544,_4560 )] / _ptr__4553[(int)3]) % _ptr__4548[(int)3]);
                if ((_4561 <= _4562))
                {
                  {
                    _4555 += (_ptr__4532[safe_add( safe_add( _4543,_4560 ),(int)1 )] - _ptr__4532[safe_add( _4543,_4560 )]);
                    ++ _4556;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        _4556 = safe_mul( safe_mul( safe_mul( _ptr__4548[(int)0],_ptr__4548[(int)2] ),_ptr__4548[(int)4] ),(safe_mul( _ptr__4548[(int)1],safe_add( _ptr__4548[(int)1],(int)1 ) ) / (int)2) );
        if (_4537)
        {
          {
            int _8965 = (int)0;
            int _8966 = _ptr__4548[(int)0];
            for (int _4563 = _8965; _4563 < _8966; ++_4563)
            {
              {
                int _8967 = (int)0;
                int _8968 = _ptr__4548[(int)1];
                for (int _4564 = _8967; _4564 < _8968; ++_4564)
                {
                  {
                    int _8969 = (int)0;
                    int _8970 = _ptr__4548[(int)2];
                    for (int _4565 = _8969; _4565 < _8970; ++_4565)
                    {
                      {
                        int _8971 = (int)0;
                        int _8972 = safe_add( _4564,(int)1 );
                        for (int _4566 = _8971; _4566 < _8972; ++_4566)
                        {
                          {
                            int _8973 = (int)0;
                            int _8974 = _ptr__4548[(int)4];
                            for (int _4567 = _8973; _4567 < _8974; ++_4567)
                            {
                              {
                                int _4568 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4563,_ptr__4553[(int)0] ),safe_mul( _4564,_ptr__4553[(int)1] ) ),safe_mul( _4565,_ptr__4553[(int)2] ) ),safe_mul( _4566,_ptr__4553[(int)3] ) ),safe_mul( _4567,_ptr__4553[(int)4] ) );
                                _4555 += (_ptr__4532[safe_add( safe_add( _4543,_4568 ),(int)1 )] - _ptr__4532[safe_add( _4543,_4568 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _8975 = (int)0;
            int _8976 = _ptr__4548[(int)0];
            for (int _4569 = _8975; _4569 < _8976; ++_4569)
            {
              {
                int _8977 = (int)0;
                int _8978 = _ptr__4548[(int)1];
                for (int _4570 = _8977; _4570 < _8978; ++_4570)
                {
                  {
                    int _8979 = (int)0;
                    int _8980 = _ptr__4548[(int)2];
                    for (int _4571 = _8979; _4571 < _8980; ++_4571)
                    {
                      {
                        int _8981 = _4570;
                        int _8982 = _ptr__4548[(int)3];
                        for (int _4572 = _8981; _4572 < _8982; ++_4572)
                        {
                          {
                            int _8983 = (int)0;
                            int _8984 = _ptr__4548[(int)4];
                            for (int _4573 = _8983; _4573 < _8984; ++_4573)
                            {
                              {
                                int _4574 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4569,_ptr__4553[(int)0] ),safe_mul( _4570,_ptr__4553[(int)1] ) ),safe_mul( _4571,_ptr__4553[(int)2] ) ),safe_mul( _4572,_ptr__4553[(int)3] ) ),safe_mul( _4573,_ptr__4553[(int)4] ) );
                                _4555 += (_ptr__4532[safe_add( safe_add( _4543,_4574 ),(int)1 )] - _ptr__4532[safe_add( _4543,_4574 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _4575 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__4548[(int)0],_ptr__4548[(int)2] ),_ptr__4548[(int)4] ),_ptr__4548[(int)1] ),safe_add( _ptr__4548[(int)1],(int)1 ) ) / (int)2);
  int _4576 = _4529->alloci32(safe_add( _4575,(int)1 ));
  _4529->pushi32((int)1);
  _4529->pushi32(_4555);
  _4529->pushi32(_4575);
  int _8985 = (int)0;
  int _8986 = _4538;
  for (int _4577 = _8985; _4577 < _8986; ++_4577)
  {
    {
      _4529->pushi32(_ptr__4532[safe_add( _4539,_4577 )]);
    }
  }
  _4529->pushi32(_4538);
  int _4578 = _4529->alloci64(_4555);
  int _4579 = _4529->alloci64(_4575);
  int _4580 = _4529->allocf64(_4555);
  int _4581 = _4529->allocf64(_4575);
  std::shared_ptr< monty::ndarray< int,1 > > _4582 = mosek::fusion::p_WorkStack::_get_impl(_4529)->i32;
  _checked_ptr_1<int> _ptr__4582(_4582 ? _4582->raw() : nullptr,_4582 ? _4582->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4583 = mosek::fusion::p_WorkStack::_get_impl(_4529)->i64;
  _checked_ptr_1<long long> _ptr__4583(_4583 ? _4583->raw() : nullptr,_4583 ? _4583->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4584 = mosek::fusion::p_WorkStack::_get_impl(_4529)->f64;
  _checked_ptr_1<double> _ptr__4584(_4584 ? _4584->raw() : nullptr,_4584 ? _4584->size(0) : 0);
  _ptr__4582[_4576] = (int)0;
  if (_4537)
  {
    {
      int _4585 = (int)0;
      int _8987 = (int)0;
      int _8988 = _ptr__4548[(int)0];
      for (int _4586 = _8987; _4586 < _8988; ++_4586)
      {
        {
          int _8989 = (int)0;
          int _8990 = _ptr__4548[(int)1];
          for (int _4587 = _8989; _4587 < _8990; ++_4587)
          {
            {
              int _8991 = (int)0;
              int _8992 = _ptr__4548[(int)2];
              for (int _4588 = _8991; _4588 < _8992; ++_4588)
              {
                {
                  int _8993 = (int)0;
                  int _8994 = safe_add( _4587,(int)1 );
                  for (int _4589 = _8993; _4589 < _8994; ++_4589)
                  {
                    {
                      int _8995 = (int)0;
                      int _8996 = _ptr__4548[(int)4];
                      for (int _4590 = _8995; _4590 < _8996; ++_4590)
                      {
                        {
                          _ptr__4583[safe_add( _4579,_4585 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4586,_ptr__4553[(int)0] ),safe_mul( _4587,_ptr__4553[(int)1] ) ),safe_mul( _4588,_ptr__4553[(int)2] ) ),safe_mul( _4589,_ptr__4553[(int)3] ) ),safe_mul( _4590,_ptr__4553[(int)4] ) );
                          ++ _4585;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4591 = (int)0;
      int _8997 = (int)0;
      int _8998 = _ptr__4548[(int)0];
      for (int _4592 = _8997; _4592 < _8998; ++_4592)
      {
        {
          int _8999 = (int)0;
          int _9000 = _ptr__4548[(int)1];
          for (int _4593 = _8999; _4593 < _9000; ++_4593)
          {
            {
              int _9001 = (int)0;
              int _9002 = _ptr__4548[(int)2];
              for (int _4594 = _9001; _4594 < _9002; ++_4594)
              {
                {
                  int _9003 = _4593;
                  int _9004 = _ptr__4548[(int)3];
                  for (int _4595 = _9003; _4595 < _9004; ++_4595)
                  {
                    {
                      int _9005 = (int)0;
                      int _9006 = _ptr__4548[(int)4];
                      for (int _4596 = _9005; _4596 < _9006; ++_4596)
                      {
                        {
                          _ptr__4583[safe_add( _4579,_4591 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4592,_ptr__4553[(int)0] ),safe_mul( _4593,_ptr__4553[(int)1] ) ),safe_mul( _4594,_ptr__4553[(int)2] ) ),safe_mul( _4595,_ptr__4553[(int)3] ) ),safe_mul( _4596,_ptr__4553[(int)4] ) );
                          ++ _4591;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    int _4597 = (int)0;
    if (_4542)
    {
      {
        int _4598 = (int)0;
        int _4599 = (int)0;
        while ( ((_4599 < _4540) && (_4598 < _4575)) )
        {
          {
            if ((_ptr__4533[safe_add( _4544,_4599 )] < _ptr__4583[safe_add( _4579,_4598 )]))
            {
              {
                ++ _4599;
              }
            }
            else if((_ptr__4533[safe_add( _4544,_4599 )] > _ptr__4583[safe_add( _4579,_4598 )]))
            {
              {
                _ptr__4584[safe_add( _4581,_4598 )] = 0.0;
                _ptr__4582[safe_add( safe_add( _4576,_4598 ),(int)1 )] = _4597;
                ++ _4598;
              }
            }
            else
            {
              {
                int _9007 = _ptr__4532[safe_add( _4543,_4599 )];
                int _9008 = _ptr__4532[safe_add( safe_add( _4543,_4599 ),(int)1 )];
                for (int _4600 = _9007; _4600 < _9008; ++_4600)
                {
                  {
                    _ptr__4583[safe_add( _4578,_4597 )] = _ptr__4533[safe_add( _4545,_4600 )];
                    _ptr__4584[safe_add( _4580,_4597 )] = _ptr__4534[safe_add( _4547,_4600 )];
                    ++ _4597;
                  }
                }
                _ptr__4584[safe_add( _4581,_4598 )] = _ptr__4534[safe_add( _4546,_4599 )];
                _ptr__4582[safe_add( safe_add( _4576,_4598 ),(int)1 )] = _4597;
                ++ _4599;
                ++ _4598;
              }
            }
          }
        }
        while ( (_4598 < _4575) )
        {
          {
            _ptr__4582[safe_add( safe_add( _4576,_4598 ),(int)1 )] = _4597;
            _ptr__4584[safe_add( _4581,_4598 )] = 0.0;
            ++ _4598;
          }
        }
      }
    }
    else
    {
      {
        int _9009 = (int)0;
        int _9010 = _4575;
        for (int _4601 = _9009; _4601 < _9010; ++_4601)
        {
          {
            long long _4602 = _ptr__4583[safe_add( _4579,_4601 )];
            _ptr__4584[safe_add( _4581,_4601 )] = _ptr__4534[safe_add( _4546,_4602 )];
            int _9011 = _ptr__4532[safe_add( _4543,_4602 )];
            int _9012 = _ptr__4532[safe_add( safe_add( _4543,_4602 ),(int)1 )];
            for (int _4603 = _9011; _4603 < _9012; ++_4603)
            {
              {
                _ptr__4583[safe_add( _4578,_4597 )] = _ptr__4533[safe_add( _4545,_4603 )];
                _ptr__4584[safe_add( _4580,_4597 )] = _ptr__4534[safe_add( _4547,_4603 )];
                ++ _4597;
              }
            }
            _ptr__4582[safe_add( safe_add( _4576,_4601 ),(int)1 )] = _4597;
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4604){ return new mosek::fusion::ExprDense(_4604); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4604) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_4604); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4604){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4604->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _4604;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4605,monty::rc_ptr< ::mosek::fusion::WorkStack > _4606,monty::rc_ptr< ::mosek::fusion::WorkStack > _4607) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_4605,_4606,_4607); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4605,monty::rc_ptr< ::mosek::fusion::WorkStack > _4606,monty::rc_ptr< ::mosek::fusion::WorkStack > _4607){
  expr->eval(_4605,_4606,_4607);
  _4605->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_4605)->hassp)
  {
    {
      int _4608 = mosek::fusion::p_WorkStack::_get_impl(_4605)->nd;
      int _4609 = mosek::fusion::p_WorkStack::_get_impl(_4605)->nnz;
      int _4610 = mosek::fusion::p_WorkStack::_get_impl(_4605)->nelem;
      int _4611 = mosek::fusion::p_WorkStack::_get_impl(_4605)->sp_base;
      std::vector<int> _9013;
      for (int _4613 = (int)0, _9014 = _4608; _4613 < _9014 ; ++_4613)
      {
        _9013.push_back(((*mosek::fusion::p_WorkStack::_get_impl(_4605)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4605)->shape_base,_4613 ))));
      }
      auto _9015 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9013.size()),_9013.begin(),_9013.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _4612 = _9015;
      _checked_ptr_1<int> _ptr__4612(_4612 ? _4612->raw() : nullptr,_4612 ? _4612->size(0) : 0);
      int _4614 = (int)::mosek::fusion::p_Set::size(_4612);
      _4605->popi32(safe_add( (int)4,_4608 ));
      if ((_4614 == _4610))
      {
        {
          _4605->popi64(_4610);
          _4605->pushi32((int)0);
          _4605->pushi32(_4609);
          _4605->pushi32(_4610);
          int _4615 = _4605->alloci32(_4608);
          int _9016 = (int)0;
          int _9017 = _4608;
          for (int _4616 = _9016; _4616 < _9017; ++_4616)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4605)->i32)(safe_add( _4615,_4616 ))) = _ptr__4612[_4616];
            }
          }
          _4605->pushi32(_4608);
          _4605->peek_expr();
        }
      }
      else
      {
        {
          int _4617 = _4607->alloci32(safe_add( _4614,(int)1 ));
          int _4618 = _4607->allocf64(_4614);
          std::shared_ptr< monty::ndarray< int,1 > > _4619 = mosek::fusion::p_WorkStack::_get_impl(_4607)->i32;
          _checked_ptr_1<int> _ptr__4619(_4619 ? _4619->raw() : nullptr,_4619 ? _4619->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4620 = mosek::fusion::p_WorkStack::_get_impl(_4607)->f64;
          _checked_ptr_1<double> _ptr__4620(_4620 ? _4620->raw() : nullptr,_4620 ? _4620->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4605)->f64,mosek::fusion::p_WorkStack::_get_impl(_4605)->bfix_base,_4620,_4618,_4610);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4605)->i32,mosek::fusion::p_WorkStack::_get_impl(_4605)->ptr_base,_4619,_4617,safe_add( _4610,(int)1 ));
          _4605->popi32(safe_add( _4610,(int)1 ));
          _4605->popf64(_4610);
          int _4621 = _4605->alloci32(safe_add( _4614,(int)1 ));
          int _4622 = _4605->allocf64(_4614);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _4623 = mosek::fusion::p_WorkStack::_get_impl(_4605)->i32;
            _checked_ptr_1<int> _ptr__4623(_4623 ? _4623->raw() : nullptr,_4623 ? _4623->size(0) : 0);
            std::shared_ptr< monty::ndarray< long long,1 > > _4624 = mosek::fusion::p_WorkStack::_get_impl(_4605)->i64;
            _checked_ptr_1<long long> _ptr__4624(_4624 ? _4624->raw() : nullptr,_4624 ? _4624->size(0) : 0);
            std::shared_ptr< monty::ndarray< double,1 > > _4625 = mosek::fusion::p_WorkStack::_get_impl(_4605)->f64;
            _checked_ptr_1<double> _ptr__4625(_4625 ? _4625->raw() : nullptr,_4625 ? _4625->size(0) : 0);
            _ptr__4623[_4621] = (int)0;
            int _4626 = (int)0;
            if ((_4610 > (int)0))
            {
              {
                int _9018 = (int)0;
                int _9019 = _4614;
                for (int _4627 = _9018; _4627 < _9019; ++_4627)
                {
                  {
                    if (((_4626 < _4610) && (_ptr__4624[safe_add( _4611,_4626 )] == _4627)))
                    {
                      {
                        _ptr__4625[safe_add( _4622,_4627 )] = _ptr__4620[safe_add( _4618,_4626 )];
                        ++ _4626;
                      }
                    }
                    else
                    {
                      {
                        _ptr__4625[safe_add( _4622,_4627 )] = (int)0;
                      }
                    }
                    _ptr__4623[safe_add( safe_add( _4621,_4627 ),(int)1 )] = _ptr__4619[safe_add( _4617,_4626 )];
                  }
                }
              }
            }
            else
            {
              {
                int _9020 = (int)0;
                int _9021 = _4614;
                for (int _4628 = _9020; _4628 < _9021; ++_4628)
                {
                  {
                    _ptr__4625[safe_add( _4622,_4628 )] = (int)0;
                    _ptr__4623[safe_add( safe_add( _4621,_4628 ),(int)1 )] = (int)0;
                  }
                }
              }
            }
          }
          _4605->popi64(_4610);
          _4605->pushi32((int)0);
          _4605->pushi32(_4609);
          _4605->pushi32(_4614);
          int _9022 = (int)0;
          int _9023 = _4608;
          for (int _4629 = _9022; _4629 < _9023; ++_4629)
          {
            {
              _4605->pushi32(_ptr__4612[_4629]);
            }
          }
          _4605->pushi32(_4608);
          if ((((*mosek::fusion::p_WorkStack::_get_impl(_4605)->i32)(safe_add( _4621,_4614 ))) != _4609))
          {
            {
              throw ::mosek::fusion::FatalError(std::string ("Internal: Mismatching ptr and nnz"));
            }
          }
          {}
        }
      }
      _4605->peek_expr();
    }
  }
  {}
  _4607->clear();
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4630,    int _4631,    monty::rc_ptr< ::mosek::fusion::Expression > _4632,    int _4633){ return new mosek::fusion::ExprSymmetrize(_4630,_4631,_4632,_4633); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4630,    int _4631,    monty::rc_ptr< ::mosek::fusion::Expression > _4632,    int _4633) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4630,_4631,_4632,_4633); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4630,    int _4631,    monty::rc_ptr< ::mosek::fusion::Expression > _4632,    int _4633){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4632->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _4632;
    if ((_4630 < _4631))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4630;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4631;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4631;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4630;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4634,    int _4635,    monty::rc_ptr< ::mosek::fusion::Expression > _4636){ return new mosek::fusion::ExprSymmetrize(_4634,_4635,_4636); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4634,    int _4635,    monty::rc_ptr< ::mosek::fusion::Expression > _4636) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4634,_4635,_4636); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4634,    int _4635,    monty::rc_ptr< ::mosek::fusion::Expression > _4636){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_4634,_4635,_4636,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4637 = _4636->getShape();
    _checked_ptr_1<int> _ptr__4637(_4637 ? _4637->raw() : nullptr,_4637 ? _4637->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_4637)->size(0))) || (_ptr__4637[dim0] != _ptr__4637[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4638,monty::rc_ptr< ::mosek::fusion::WorkStack > _4639,monty::rc_ptr< ::mosek::fusion::WorkStack > _4640) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_4638,_4639,_4640); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4638,monty::rc_ptr< ::mosek::fusion::WorkStack > _4639,monty::rc_ptr< ::mosek::fusion::WorkStack > _4640){
  expr->eval(_4639,_4638,_4640);
  int _4641 = (int)0;
  int _4642 = _4639->peeki32();
  int _4643 = _4639->peeki32(safe_add( _4642,(int)3 ));
  int _4644 = _4639->peeki32(safe_add( _4642,(int)2 ));
  int _9024 = (int)0;
  int _9025 = _4642;
  for (int _4645 = _9024; _4645 < _9025; ++_4645)
  {
    {
      int _4646 = _4639->peeki32(safe_add( _4645,(int)1 ));
      if ((_4646 > _4641))
      {
        {
          _4646 = _4641;
        }
      }
      {}
    }
  }
  int _4647 = _4639->alloci32(_4644);
  int _4648 = _4639->alloci32(_4644);
  int _4649 = _4639->alloci32(safe_add( _4641,(int)1 ));
  int _4650 = _4639->alloci64(_4644);
  _4639->popi32(safe_add( safe_add( safe_mul( (int)2,_4644 ),_4641 ),(int)1 ));
  _4639->popi64(_4644);
  int _4651 = _4639->popi32();
  int _4652 = _4639->popi32(_4651);
  int _4653 = _4639->popi32();
  int _4654 = _4639->popi32();
  bool _4655 = (_4639->popi32() != (int)0);
  int _4656 = _4639->popi32(safe_add( _4653,(int)1 ));
  int _9026;
  bool _9027 = _4655;
  if (_9027)
  {
    _9026 = _4639->popi64(_4653);
  }
  else
  {
    _9026 = (-(int)1);
  }
  int _4657 = _9026;
  int _4658 = _4639->popi64(_4654);
  int _4659 = _4639->popf64(_4653);
  int _4660 = _4639->popf64(_4654);
  int _4661 = (int)0;
  int _4662 = (int)0;
  std::vector<int> _9028;
  for (int _4664 = (int)0, _9029 = (int)5; _4664 < _9029 ; ++_4664)
  {
    _9028.push_back((int)1);
  }
  auto _9030 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9028.size()),_9028.begin(),_9028.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4663 = _9030;
  _checked_ptr_1<int> _ptr__4663(_4663 ? _4663->raw() : nullptr,_4663 ? _4663->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4665 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__4665(_4665 ? _4665->raw() : nullptr,_4665 ? _4665->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4666 = mosek::fusion::p_WorkStack::_get_impl(_4639)->i32;
  _checked_ptr_1<int> _ptr__4666(_4666 ? _4666->raw() : nullptr,_4666 ? _4666->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4667 = mosek::fusion::p_WorkStack::_get_impl(_4639)->i64;
  _checked_ptr_1<long long> _ptr__4667(_4667 ? _4667->raw() : nullptr,_4667 ? _4667->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4668 = mosek::fusion::p_WorkStack::_get_impl(_4639)->f64;
  _checked_ptr_1<double> _ptr__4668(_4668 ? _4668->raw() : nullptr,_4668 ? _4668->size(0) : 0);
  int _9031 = (int)0;
  int _9032 = dim0;
  for (int _4669 = _9031; _4669 < _9032; ++_4669)
  {
    {
      _ptr__4663[(int)0] *= _ptr__4666[safe_add( _4652,_4669 )];
    }
  }
  _ptr__4663[(int)1] = _ptr__4666[safe_add( _4652,dim0 )];
  int _9033 = safe_add( dim0,(int)1 );
  int _9034 = dim1;
  for (int _4670 = _9033; _4670 < _9034; ++_4670)
  {
    {
      _ptr__4663[(int)2] *= _ptr__4666[safe_add( _4652,_4670 )];
    }
  }
  _ptr__4663[(int)3] = _ptr__4666[safe_add( _4652,dim1 )];
  int _9035 = safe_add( dim1,(int)1 );
  int _9036 = _4651;
  for (int _4671 = _9035; _4671 < _9036; ++_4671)
  {
    {
      _ptr__4663[(int)4] *= _ptr__4666[safe_add( _4652,_4671 )];
    }
  }
  _ptr__4665[(int)4] = (int)1;
  int _9037 = (int)1;
  int _9038 = (int)5;
  for (int _4672 = _9037; _4672 < _9038; ++_4672)
  {
    {
      _ptr__4665[(((int)5 - _4672) - (int)1)] = safe_mul( _ptr__4665[((int)5 - _4672)],_ptr__4663[((int)5 - _4672)] );
    }
  }
  if (_4655)
  {
    {
      int _4673 = _4647;
      int _9039 = (int)0;
      int _9040 = _4653;
      for (int _4674 = _9039; _4674 < _9040; ++_4674)
      {
        {
          _ptr__4666[safe_add( _4673,_4674 )] = _4674;
        }
      }
      int _4675 = _4648;
      std::shared_ptr< monty::ndarray< int,1 > > _4676 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__4676(_4676 ? _4676->raw() : nullptr,_4676 ? _4676->size(0) : 0);
      int _9041 = (int)0;
      int _9042 = (int)4;
      for (int _4677 = _9041; _4677 < _9042; ++_4677)
      {
        {
          long long _4678 = _ptr__4665[_ptr__4676[_4677]];
          int _4679 = _ptr__4663[_ptr__4676[_4677]];
          if ((_4679 > (int)1))
          {
            {
              int _9043 = (int)0;
              int _9044 = safe_add( _4679,(int)1 );
              for (int _4680 = _9043; _4680 < _9044; ++_4680)
              {
                {
                  _ptr__4666[safe_add( _4649,_4680 )] = (int)0;
                }
              }
              int _9045 = (int)0;
              int _9046 = _4653;
              for (int _4681 = _9045; _4681 < _9046; ++_4681)
              {
                {
                  ++ _ptr__4666[safe_add( safe_add( _4649,((_ptr__4667[safe_add( _4657,_ptr__4666[safe_add( _4673,_4681 )] )] / _4678) % _4679) ),(int)1 )];
                }
              }
              int _9047 = (int)0;
              int _9048 = _ptr__4663[(int)3];
              for (int _4682 = _9047; _4682 < _9048; ++_4682)
              {
                {
                  _ptr__4666[safe_add( safe_add( _4649,_4682 ),(int)1 )] += _ptr__4666[safe_add( _4649,_4682 )];
                }
              }
              int _9049 = (int)0;
              int _9050 = _4653;
              for (int _4683 = _9049; _4683 < _9050; ++_4683)
              {
                {
                  int _4684 = _ptr__4666[safe_add( _4673,_4683 )];
                  long long _4685 = ((_ptr__4667[safe_add( _4657,_4684 )] / _4678) % _4679);
                  _ptr__4666[safe_add( _4675,_ptr__4666[safe_add( _4649,_4685 )] )] = _4684;
                  ++ _ptr__4666[safe_add( _4649,_4685 )];
                }
              }
              int _4686 = _4673;
              _4673 = _4675;
              _4675 = _4686;
            }
          }
          {}
        }
      }
      int _9051 = (int)0;
      int _9052 = _4653;
      for (int _4687 = _9051; _4687 < _9052; ++_4687)
      {
        {
          _ptr__4667[safe_add( _4650,_4687 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__4667[safe_add( _4657,_4687 )] / _ptr__4665[(int)0]) % _ptr__4663[(int)0]),_ptr__4665[(int)0] ),safe_mul( ((_ptr__4667[safe_add( _4657,_4687 )] / _ptr__4665[(int)1]) % _ptr__4663[(int)1]),_ptr__4665[(int)3] ) ),safe_mul( ((_ptr__4667[safe_add( _4657,_4687 )] / _ptr__4665[(int)2]) % _ptr__4663[(int)2]),_ptr__4665[(int)2] ) ),safe_mul( ((_ptr__4667[safe_add( _4657,_4687 )] / _ptr__4665[(int)3]) % _ptr__4663[(int)3]),_ptr__4665[(int)1] ) ),safe_mul( ((_ptr__4667[safe_add( _4657,_4687 )] / _ptr__4665[(int)4]) % _ptr__4663[(int)4]),_ptr__4665[(int)4] ) );
        }
      }
      {
        int _4688 = (int)0;
        int _4689 = (int)0;
        while ( ((_4689 < _4653) && (_4688 < _4653)) )
        {
          {
            int _4690 = _ptr__4666[safe_add( _4673,_4688 )];
            if ((_ptr__4667[safe_add( _4657,_4689 )] < _ptr__4667[safe_add( _4650,_4690 )]))
            {
              {
                _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4689 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4689 )]);
                ++ _4661;
                ++ _4689;
              }
            }
            else if((_ptr__4667[safe_add( _4657,_4689 )] > _ptr__4667[safe_add( _4650,_4690 )]))
            {
              {
                _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4690 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4690 )]);
                ++ _4661;
                ++ _4688;
              }
            }
            else if((_ptr__4667[safe_add( _4657,_4689 )] != _ptr__4667[safe_add( _4657,_4690 )]))
            {
              {
                _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4689 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4689 )]);
                _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4690 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4690 )]);
                ++ _4661;
                ++ _4688;
                ++ _4689;
              }
            }
            else
            {
              {
                _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4689 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4689 )]);
                ++ _4661;
                ++ _4688;
                ++ _4689;
              }
            }
          }
        }
        while ( (_4689 < _4653) )
        {
          {
            _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4689 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4689 )]);
            ++ _4661;
            ++ _4689;
          }
        }
        while ( (_4688 < _4653) )
        {
          {
            int _4691 = _ptr__4666[safe_add( _4673,_4688 )];
            _4662 += (_ptr__4666[safe_add( safe_add( _4656,_4691 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4691 )]);
            ++ _4661;
            ++ _4688;
          }
        }
      }
      int _4692 = _4638->alloci32(safe_add( _4661,(int)1 ));
      _4638->pushi32((int)1);
      _4638->pushi32(_4662);
      _4638->pushi32(_4661);
      int _9053 = (int)0;
      int _9054 = _4651;
      for (int _4693 = _9053; _4693 < _9054; ++_4693)
      {
        {
          _4638->pushi32(_ptr__4666[safe_add( _4652,_4693 )]);
        }
      }
      _4638->pushi32(_4651);
      int _4694 = _4638->alloci64(_4662);
      int _4695 = _4638->alloci64(_4661);
      int _4696 = _4638->allocf64(_4662);
      int _4697 = _4638->allocf64(_4661);
      std::shared_ptr< monty::ndarray< int,1 > > _4698 = mosek::fusion::p_WorkStack::_get_impl(_4638)->i32;
      _checked_ptr_1<int> _ptr__4698(_4698 ? _4698->raw() : nullptr,_4698 ? _4698->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4699 = mosek::fusion::p_WorkStack::_get_impl(_4638)->i64;
      _checked_ptr_1<long long> _ptr__4699(_4699 ? _4699->raw() : nullptr,_4699 ? _4699->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4700 = mosek::fusion::p_WorkStack::_get_impl(_4638)->f64;
      _checked_ptr_1<double> _ptr__4700(_4700 ? _4700->raw() : nullptr,_4700 ? _4700->size(0) : 0);
      _ptr__4698[_4692] = (int)0;
      {
        int _4701 = (int)0;
        int _4702 = (int)0;
        int _4703 = (int)0;
        int _4704 = (int)0;
        _ptr__4666[_4692] = (int)0;
        while ( ((_4704 < _4653) && (_4703 < _4653)) )
        {
          {
            int _4705 = _ptr__4666[safe_add( _4673,_4703 )];
            if ((_ptr__4667[safe_add( _4657,_4704 )] < _ptr__4667[safe_add( _4650,_4705 )]))
            {
              {
                int _9055 = _ptr__4666[safe_add( _4656,_4704 )];
                int _9056 = _ptr__4666[safe_add( safe_add( _4656,_4704 ),(int)1 )];
                for (int _4706 = _9055; _4706 < _9056; ++_4706)
                {
                  {
                    _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4706 )];
                    _ptr__4700[safe_add( _4696,_4701 )] = (_ptr__4668[safe_add( _4660,_4706 )] * 0.5);
                    ++ _4701;
                  }
                }
                _ptr__4700[safe_add( _4697,_4702 )] = (_ptr__4668[safe_add( _4659,_4704 )] * 0.5);
                _ptr__4699[safe_add( _4695,_4702 )] = _ptr__4667[safe_add( _4657,_4704 )];
                _ptr__4698[safe_add( safe_add( _4692,_4702 ),(int)1 )] = _4701;
                ++ _4702;
                ++ _4704;
              }
            }
            else if((_ptr__4667[safe_add( _4657,_4704 )] > _ptr__4667[safe_add( _4650,_4705 )]))
            {
              {
                int _9057 = _ptr__4666[safe_add( _4656,_4705 )];
                int _9058 = _ptr__4666[safe_add( safe_add( _4656,_4705 ),(int)1 )];
                for (int _4707 = _9057; _4707 < _9058; ++_4707)
                {
                  {
                    _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4707 )];
                    _ptr__4700[safe_add( _4696,_4701 )] = (_ptr__4668[safe_add( _4660,_4707 )] * 0.5);
                    ++ _4701;
                  }
                }
                _ptr__4700[safe_add( _4697,_4702 )] = (_ptr__4668[safe_add( _4659,_4705 )] * 0.5);
                _ptr__4699[safe_add( _4695,_4702 )] = _ptr__4667[safe_add( _4650,_4705 )];
                _ptr__4698[safe_add( safe_add( _4692,_4702 ),(int)1 )] = _4701;
                ++ _4702;
                ++ _4703;
              }
            }
            else if((_ptr__4667[safe_add( _4657,_4704 )] != _ptr__4667[safe_add( _4657,_4705 )]))
            {
              {
                int _9059 = _ptr__4666[safe_add( _4656,_4704 )];
                int _9060 = _ptr__4666[safe_add( safe_add( _4656,_4704 ),(int)1 )];
                for (int _4708 = _9059; _4708 < _9060; ++_4708)
                {
                  {
                    _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4708 )];
                    _ptr__4700[safe_add( _4696,_4701 )] = (_ptr__4668[safe_add( _4660,_4708 )] * 0.5);
                    ++ _4701;
                  }
                }
                int _9061 = _ptr__4666[safe_add( _4656,_4705 )];
                int _9062 = _ptr__4666[safe_add( safe_add( _4656,_4705 ),(int)1 )];
                for (int _4709 = _9061; _4709 < _9062; ++_4709)
                {
                  {
                    _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4709 )];
                    _ptr__4700[safe_add( _4696,_4701 )] = (_ptr__4668[safe_add( _4660,_4709 )] * 0.5);
                    ++ _4701;
                  }
                }
                _ptr__4700[safe_add( _4697,_4702 )] = (0.5 * (_ptr__4668[safe_add( _4659,_4704 )] + _ptr__4668[safe_add( _4659,_4705 )]));
                _ptr__4699[safe_add( _4695,_4702 )] = _ptr__4667[safe_add( _4657,_4704 )];
                _ptr__4698[safe_add( safe_add( _4692,_4702 ),(int)1 )] = _4701;
                ++ _4702;
                ++ _4703;
                ++ _4704;
              }
            }
            else
            {
              {
                int _9063 = _ptr__4666[safe_add( _4656,_4704 )];
                int _9064 = _ptr__4666[safe_add( safe_add( _4656,_4704 ),(int)1 )];
                for (int _4710 = _9063; _4710 < _9064; ++_4710)
                {
                  {
                    _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4710 )];
                    _ptr__4700[safe_add( _4696,_4701 )] = _ptr__4668[safe_add( _4660,_4710 )];
                    ++ _4701;
                  }
                }
                _ptr__4700[safe_add( _4697,_4702 )] = _ptr__4668[safe_add( _4659,_4704 )];
                _ptr__4699[safe_add( _4695,_4702 )] = _ptr__4667[safe_add( _4657,_4704 )];
                _ptr__4698[safe_add( safe_add( _4692,_4702 ),(int)1 )] = _4701;
                ++ _4702;
                ++ _4703;
                ++ _4704;
              }
            }
          }
        }
        while ( (_4704 < _4653) )
        {
          {
            int _9065 = _ptr__4666[safe_add( _4656,_4704 )];
            int _9066 = _ptr__4666[safe_add( safe_add( _4656,_4704 ),(int)1 )];
            for (int _4711 = _9065; _4711 < _9066; ++_4711)
            {
              {
                _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4711 )];
                _ptr__4700[safe_add( _4696,_4701 )] = (_ptr__4668[safe_add( _4660,_4711 )] * 0.5);
                ++ _4701;
              }
            }
            _ptr__4700[safe_add( _4697,_4702 )] = (_ptr__4668[safe_add( _4659,_4704 )] * 0.5);
            _ptr__4699[safe_add( _4695,_4702 )] = _ptr__4667[safe_add( _4657,_4704 )];
            _ptr__4698[safe_add( safe_add( _4692,_4702 ),(int)1 )] = _4701;
            ++ _4702;
            ++ _4704;
          }
        }
        while ( (_4703 < _4653) )
        {
          {
            int _4712 = _ptr__4666[safe_add( _4673,_4703 )];
            int _9067 = _ptr__4666[safe_add( _4656,_4712 )];
            int _9068 = _ptr__4666[safe_add( safe_add( _4656,_4712 ),(int)1 )];
            for (int _4713 = _9067; _4713 < _9068; ++_4713)
            {
              {
                _ptr__4699[safe_add( _4694,_4701 )] = _ptr__4667[safe_add( _4658,_4713 )];
                _ptr__4700[safe_add( _4696,_4701 )] = (_ptr__4668[safe_add( _4660,_4713 )] * 0.5);
                ++ _4701;
              }
            }
            _ptr__4700[safe_add( _4697,_4702 )] = (_ptr__4668[safe_add( _4659,_4712 )] * 0.5);
            _ptr__4699[safe_add( _4695,_4702 )] = _ptr__4667[safe_add( _4650,_4712 )];
            _ptr__4698[safe_add( safe_add( _4692,_4702 ),(int)1 )] = _4701;
            ++ _4702;
            ++ _4703;
          }
        }
      }
    }
  }
  else
  {
    {
      _4661 = _4653;
      _4662 = safe_mul( _4654,(int)2 );
      int _9069 = (int)0;
      int _9070 = _ptr__4663[(int)0];
      for (int _4714 = _9069; _4714 < _9070; ++_4714)
      {
        {
          int _9071 = (int)0;
          int _9072 = _ptr__4663[(int)2];
          for (int _4715 = _9071; _4715 < _9072; ++_4715)
          {
            {
              int _9073 = (int)0;
              int _9074 = _ptr__4663[(int)4];
              for (int _4716 = _9073; _4716 < _9074; ++_4716)
              {
                {
                  int _9075 = (int)0;
                  int _9076 = _ptr__4663[(int)1];
                  for (int _4717 = _9075; _4717 < _9076; ++_4717)
                  {
                    {
                      long long _4718 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__4665[(int)0],_4714 ),safe_mul( _ptr__4665[(int)1],_4717 ) ),safe_mul( _ptr__4665[(int)2],_4715 ) ),safe_mul( _ptr__4665[(int)3],_4717 ) ),safe_mul( _ptr__4665[(int)4],_4716 ) );
                      _4662 -= (_ptr__4666[safe_add( safe_add( _4656,_4718 ),(int)1 )] - _ptr__4666[safe_add( _4656,_4718 )]);
                    }
                  }
                }
              }
            }
          }
        }
      }
      int _4719 = _4638->alloci32(safe_add( _4661,(int)1 ));
      _4638->pushi32((int)0);
      _4638->pushi32(_4662);
      _4638->pushi32(_4661);
      int _9077 = (int)0;
      int _9078 = _4651;
      for (int _4720 = _9077; _4720 < _9078; ++_4720)
      {
        {
          _4638->pushi32(_ptr__4666[safe_add( _4652,_4720 )]);
        }
      }
      _4638->pushi32(_4651);
      int _4721 = _4638->alloci64(_4662);
      int _4722 = _4638->allocf64(_4662);
      int _4723 = _4638->allocf64(_4661);
      std::shared_ptr< monty::ndarray< int,1 > > _4724 = mosek::fusion::p_WorkStack::_get_impl(_4638)->i32;
      _checked_ptr_1<int> _ptr__4724(_4724 ? _4724->raw() : nullptr,_4724 ? _4724->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4725 = mosek::fusion::p_WorkStack::_get_impl(_4638)->i64;
      _checked_ptr_1<long long> _ptr__4725(_4725 ? _4725->raw() : nullptr,_4725 ? _4725->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4726 = mosek::fusion::p_WorkStack::_get_impl(_4638)->f64;
      _checked_ptr_1<double> _ptr__4726(_4726 ? _4726->raw() : nullptr,_4726 ? _4726->size(0) : 0);
      int _4727 = (int)0;
      int _4728 = (int)0;
      _ptr__4724[_4719] = (int)0;
      int _4729 = (int)0;
      int _9079 = (int)0;
      int _9080 = _ptr__4663[(int)0];
      for (int _4730 = _9079; _4730 < _9080; ++_4730)
      {
        {
          int _9081 = (int)0;
          int _9082 = _ptr__4663[(int)1];
          for (int _4731 = _9081; _4731 < _9082; ++_4731)
          {
            {
              int _9083 = (int)0;
              int _9084 = _ptr__4663[(int)2];
              for (int _4732 = _9083; _4732 < _9084; ++_4732)
              {
                {
                  int _9085 = (int)0;
                  int _9086 = _ptr__4663[(int)3];
                  for (int _4733 = _9085; _4733 < _9086; ++_4733)
                  {
                    {
                      int _9087 = (int)0;
                      int _9088 = _ptr__4663[(int)4];
                      for (int _4734 = _9087; _4734 < _9088; ++_4734)
                      {
                        {
                          if ((_4731 == _4733))
                          {
                            {
                              int _9089 = _ptr__4666[safe_add( _4656,_4729 )];
                              int _9090 = _ptr__4666[safe_add( safe_add( _4656,_4729 ),(int)1 )];
                              for (int _4735 = _9089; _4735 < _9090; ++_4735)
                              {
                                {
                                  _ptr__4725[safe_add( _4721,_4727 )] = _ptr__4667[safe_add( _4658,_4735 )];
                                  _ptr__4726[safe_add( _4722,_4727 )] = _ptr__4668[safe_add( _4660,_4735 )];
                                  ++ _4727;
                                }
                              }
                              _ptr__4726[safe_add( _4723,_4728 )] = _ptr__4668[safe_add( _4659,_4730 )];
                              _ptr__4724[safe_add( safe_add( _4719,_4728 ),(int)1 )] = _4727;
                              ++ _4729;
                            }
                          }
                          else
                          {
                            {
                              long long _4736 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4730,_ptr__4665[(int)0] ),safe_mul( _4733,_ptr__4665[(int)1] ) ),safe_mul( _4732,_ptr__4665[(int)2] ) ),safe_mul( _4731,_ptr__4665[(int)3] ) ),_4734 );
                              int _9091 = _ptr__4666[safe_add( _4656,_4729 )];
                              int _9092 = _ptr__4666[safe_add( safe_add( _4656,_4729 ),(int)1 )];
                              for (int _4737 = _9091; _4737 < _9092; ++_4737)
                              {
                                {
                                  _ptr__4725[safe_add( _4721,_4727 )] = _ptr__4667[safe_add( _4658,_4737 )];
                                  _ptr__4726[safe_add( _4722,_4727 )] = (_ptr__4668[safe_add( _4660,_4737 )] * 0.5);
                                  ++ _4727;
                                }
                              }
                              int _9093 = _ptr__4666[safe_add( _4656,_4736 )];
                              int _9094 = _ptr__4666[safe_add( safe_add( _4656,_4736 ),(int)1 )];
                              for (int _4738 = _9093; _4738 < _9094; ++_4738)
                              {
                                {
                                  _ptr__4725[safe_add( _4721,_4727 )] = _ptr__4667[safe_add( _4658,_4738 )];
                                  _ptr__4726[safe_add( _4722,_4727 )] = (_ptr__4668[safe_add( _4660,_4738 )] * 0.5);
                                  ++ _4727;
                                }
                              }
                              _ptr__4726[safe_add( _4723,_4728 )] = (0.5 * (_ptr__4668[safe_add( _4659,_4729 )] + _ptr__4668[safe_add( _4659,_4736 )]));
                              _ptr__4724[safe_add( safe_add( _4719,_4728 ),(int)1 )] = _4727;
                              ++ _4729;
                            }
                          }
                          ++ _4728;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4739){ return new mosek::fusion::ExprCompress(_4739); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4739) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4739); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4739){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4739->getShape());
    eps = 0.0;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4739;
  }
}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4740,    double _4741){ return new mosek::fusion::ExprCompress(_4740,_4741); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4740,    double _4741) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4740,_4741); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4740,    double _4741){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4740->getShape());
    eps = _4741;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4740;
  }
}void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4742,monty::rc_ptr< ::mosek::fusion::WorkStack > _4743,monty::rc_ptr< ::mosek::fusion::WorkStack > _4744) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4742,_4743,_4744); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4742,monty::rc_ptr< ::mosek::fusion::WorkStack > _4743,monty::rc_ptr< ::mosek::fusion::WorkStack > _4744){
  expr->eval(_4743,_4742,_4744);
  _4743->pop_expr();
  int _4745 = mosek::fusion::p_WorkStack::_get_impl(_4743)->nd;
  int _4746 = mosek::fusion::p_WorkStack::_get_impl(_4743)->shape_base;
  int _4747 = mosek::fusion::p_WorkStack::_get_impl(_4743)->nelem;
  int _4748 = mosek::fusion::p_WorkStack::_get_impl(_4743)->nnz;
  bool _4749 = mosek::fusion::p_WorkStack::_get_impl(_4743)->hassp;
  int _4750 = mosek::fusion::p_WorkStack::_get_impl(_4743)->ptr_base;
  int _4751 = mosek::fusion::p_WorkStack::_get_impl(_4743)->sp_base;
  int _4752 = mosek::fusion::p_WorkStack::_get_impl(_4743)->nidxs_base;
  int _4753 = mosek::fusion::p_WorkStack::_get_impl(_4743)->bfix_base;
  int _4754 = mosek::fusion::p_WorkStack::_get_impl(_4743)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4755 = mosek::fusion::p_WorkStack::_get_impl(_4743)->i32;
  _checked_ptr_1<int> _ptr__4755(_4755 ? _4755->raw() : nullptr,_4755 ? _4755->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4756 = mosek::fusion::p_WorkStack::_get_impl(_4743)->i64;
  _checked_ptr_1<long long> _ptr__4756(_4756 ? _4756->raw() : nullptr,_4756 ? _4756->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4757 = mosek::fusion::p_WorkStack::_get_impl(_4743)->f64;
  _checked_ptr_1<double> _ptr__4757(_4757 ? _4757->raw() : nullptr,_4757 ? _4757->size(0) : 0);
  std::vector<int> _9095;
  for (int _4759 = (int)0, _9096 = _4745; _4759 < _9096 ; ++_4759)
  {
    _9095.push_back(_ptr__4755[safe_add( _4746,_4759 )]);
  }
  auto _9097 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9095.size()),_9095.begin(),_9095.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4758 = _9097;
  _checked_ptr_1<int> _ptr__4758(_4758 ? _4758->raw() : nullptr,_4758 ? _4758->size(0) : 0);
  bool _4760 = true;
  {
    int _9098 = (int)0;
    int _9099 = _4747;
    for (int _4761 = _9098; _4761 < _9099; ++_4761)
    {
      {
        int _9100 = safe_add( _ptr__4755[safe_add( _4750,_4761 )],(int)1 );
        int _9101 = _ptr__4755[safe_add( safe_add( _4750,_4761 ),(int)1 )];
        for (int _4762 = _9100; _4762 < _9101; ++_4762)
        {
          {
            _4760 = (_4760 && ((_ptr__4756[safe_add( _4752,_4762 )] != (int)0) && (_ptr__4756[(safe_add( _4752,_4762 ) - (int)1)] < _ptr__4756[safe_add( _4752,_4762 )])));
          }
        }
      }
    }
    if (_4760)
    {
      {
        int _9102 = (int)0;
        int _9103 = _4748;
        for (int _4763 = _9102; _4763 < _9103; ++_4763)
        {
          {
            _4760 = (_4760 && ((_ptr__4757[safe_add( _4754,_4763 )] <= (0.0 - eps)) || ((0.0 + eps) <= _ptr__4757[safe_add( _4754,_4763 )])));
          }
        }
      }
    }
    {}
  }
  if (_4760)
  {
    {
      _4742->alloc_expr(_4745,_4747,_4748,_4749);
      int _4764 = mosek::fusion::p_WorkStack::_get_impl(_4742)->ptr_base;
      int _4765 = mosek::fusion::p_WorkStack::_get_impl(_4742)->nidxs_base;
      int _4766 = mosek::fusion::p_WorkStack::_get_impl(_4742)->sp_base;
      int _4767 = mosek::fusion::p_WorkStack::_get_impl(_4742)->cof_base;
      int _4768 = mosek::fusion::p_WorkStack::_get_impl(_4742)->bfix_base;
      int _4769 = mosek::fusion::p_WorkStack::_get_impl(_4742)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4770 = mosek::fusion::p_WorkStack::_get_impl(_4742)->i32;
      _checked_ptr_1<int> _ptr__4770(_4770 ? _4770->raw() : nullptr,_4770 ? _4770->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4771 = mosek::fusion::p_WorkStack::_get_impl(_4742)->i64;
      _checked_ptr_1<long long> _ptr__4771(_4771 ? _4771->raw() : nullptr,_4771 ? _4771->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4772 = mosek::fusion::p_WorkStack::_get_impl(_4742)->f64;
      _checked_ptr_1<double> _ptr__4772(_4772 ? _4772->raw() : nullptr,_4772 ? _4772->size(0) : 0);
      {
        int _9104 = (int)0;
        int _9105 = _4745;
        for (int _4773 = _9104; _4773 < _9105; ++_4773)
        {
          {
            _ptr__4770[safe_add( _4769,_4773 )] = _ptr__4758[_4773];
          }
        }
        int _9106 = (int)0;
        int _9107 = safe_add( _4747,(int)1 );
        for (int _4774 = _9106; _4774 < _9107; ++_4774)
        {
          {
            _ptr__4770[safe_add( _4764,_4774 )] = _ptr__4755[safe_add( _4750,_4774 )];
          }
        }
        if (_4749)
        {
          {
            int _9108 = (int)0;
            int _9109 = _4747;
            for (int _4775 = _9108; _4775 < _9109; ++_4775)
            {
              {
                _ptr__4771[safe_add( _4766,_4775 )] = _ptr__4756[safe_add( _4751,_4775 )];
              }
            }
          }
        }
        {}
        int _9110 = (int)0;
        int _9111 = _4747;
        for (int _4776 = _9110; _4776 < _9111; ++_4776)
        {
          {
            _ptr__4772[safe_add( _4768,_4776 )] = _ptr__4757[safe_add( _4753,_4776 )];
          }
        }
        int _9112 = (int)0;
        int _9113 = _4748;
        for (int _4777 = _9112; _4777 < _9113; ++_4777)
        {
          {
            _ptr__4771[safe_add( _4765,_4777 )] = _ptr__4756[safe_add( _4752,_4777 )];
          }
        }
        int _9114 = (int)0;
        int _9115 = _4748;
        for (int _4778 = _9114; _4778 < _9115; ++_4778)
        {
          {
            _ptr__4772[safe_add( _4767,_4778 )] = _ptr__4757[safe_add( _4754,_4778 )];
          }
        }
      }
    }
  }
  else
  {
    {
      int _4779 = _4744->alloci32(_4748);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4743,_4744,_4779,_4747,_4748,_4750,_4752);
      std::shared_ptr< monty::ndarray< int,1 > > _4780 = mosek::fusion::p_WorkStack::_get_impl(_4744)->i32;
      _checked_ptr_1<int> _ptr__4780(_4780 ? _4780->raw() : nullptr,_4780 ? _4780->size(0) : 0);
      int _4781 = (int)0;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4782 = mosek::fusion::p_WorkStack::_get_impl(_4742)->i32;
        _checked_ptr_1<int> _ptr__4782(_4782 ? _4782->raw() : nullptr,_4782 ? _4782->size(0) : 0);
        int _9116 = (int)0;
        int _9117 = _4747;
        for (int _4783 = _9116; _4783 < _9117; ++_4783)
        {
          {
            int _4784 = _ptr__4755[safe_add( safe_add( _4750,_4783 ),(int)1 )];
            int _4785 = _ptr__4755[safe_add( _4750,_4783 )];
            if ((_4785 < _4784))
            {
              {
                int _4786 = _4785;
                while ( (_4786 < _4784) )
                {
                  {
                    double _4787 = 0.0;
                    long long _4788 = _ptr__4756[safe_add( _4752,_ptr__4780[safe_add( _4779,_4786 )] )];
                    if ((_4788 == (int)0))
                    {
                      {
                        ++ _4786;
                      }
                    }
                    else
                    {
                      {
                        while ( ((_4786 < _4784) && (_ptr__4756[safe_add( _4752,_ptr__4780[safe_add( _4779,_4786 )] )] == _4788)) )
                        {
                          {
                            _4787 += _ptr__4757[safe_add( _4754,_ptr__4780[safe_add( _4779,_4786 )] )];
                            ++ _4786;
                          }
                        }
                        {
                        }
                        if (((_4788 != (int)0) && ((_4787 < (-eps)) || (eps < _4787))))
                        {
                          {
                            ++ _4781;
                          }
                        }
                        {}
                      }
                    }
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4742->alloc_expr(_4745,_4747,_4781,_4749);
      int _4789 = mosek::fusion::p_WorkStack::_get_impl(_4742)->nidxs_base;
      int _4790 = mosek::fusion::p_WorkStack::_get_impl(_4742)->shape_base;
      int _4791 = mosek::fusion::p_WorkStack::_get_impl(_4742)->sp_base;
      int _4792 = mosek::fusion::p_WorkStack::_get_impl(_4742)->cof_base;
      int _4793 = mosek::fusion::p_WorkStack::_get_impl(_4742)->bfix_base;
      int _4794 = mosek::fusion::p_WorkStack::_get_impl(_4742)->ptr_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4795 = mosek::fusion::p_WorkStack::_get_impl(_4742)->i32;
      _checked_ptr_1<int> _ptr__4795(_4795 ? _4795->raw() : nullptr,_4795 ? _4795->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4796 = mosek::fusion::p_WorkStack::_get_impl(_4742)->i64;
      _checked_ptr_1<long long> _ptr__4796(_4796 ? _4796->raw() : nullptr,_4796 ? _4796->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4797 = mosek::fusion::p_WorkStack::_get_impl(_4742)->f64;
      _checked_ptr_1<double> _ptr__4797(_4797 ? _4797->raw() : nullptr,_4797 ? _4797->size(0) : 0);
      {
        int _9118 = (int)0;
        int _9119 = _4745;
        for (int _4798 = _9118; _4798 < _9119; ++_4798)
        {
          {
            _ptr__4795[safe_add( _4790,_4798 )] = _ptr__4758[_4798];
          }
        }
        int _9120 = (int)0;
        int _9121 = _4747;
        for (int _4799 = _9120; _4799 < _9121; ++_4799)
        {
          {
            _ptr__4797[safe_add( _4792,_4799 )] = 0.0;
          }
        }
        int _9122 = (int)0;
        int _9123 = _4747;
        for (int _4800 = _9122; _4800 < _9123; ++_4800)
        {
          {
            _ptr__4797[safe_add( _4793,_4800 )] = _ptr__4757[safe_add( _4753,_4800 )];
          }
        }
        if (_4749)
        {
          {
            int _9124 = (int)0;
            int _9125 = _4747;
            for (int _4801 = _9124; _4801 < _9125; ++_4801)
            {
              {
                _ptr__4796[safe_add( _4791,_4801 )] = _ptr__4756[safe_add( _4791,_4801 )];
              }
            }
          }
        }
        {}
        int _4802 = (int)0;
        {
          int _4803 = (_4792 - _4789);
          _ptr__4795[_4794] = (int)0;
          int _9126 = (int)0;
          int _9127 = _4747;
          for (int _4804 = _9126; _4804 < _9127; ++_4804)
          {
            {
              int _4805 = _ptr__4755[safe_add( safe_add( _4750,_4804 ),(int)1 )];
              int _4806 = _ptr__4755[safe_add( _4750,_4804 )];
              if ((_4806 < _4805))
              {
                {
                  int _4807 = _4806;
                  while ( (_4807 < _4805) )
                  {
                    {
                      double _4808 = 0.0;
                      long long _4809 = _ptr__4756[safe_add( _4752,_ptr__4780[safe_add( _4779,_4807 )] )];
                      while ( ((_4807 < _4805) && (_ptr__4756[safe_add( _4752,_ptr__4780[safe_add( _4779,_4807 )] )] == _4809)) )
                      {
                        {
                          _4808 += _ptr__4757[safe_add( _4754,_ptr__4780[safe_add( _4779,_4807 )] )];
                          ++ _4807;
                        }
                      }
                      {
                      }
                      if (((_4809 != (int)0) && ((_4808 < (-eps)) || (eps < _4808))))
                      {
                        {
                          _ptr__4796[safe_add( _4789,_4802 )] = _4809;
                          _ptr__4797[safe_add( _4792,_4802 )] = _4808;
                          ++ _4802;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              {}
              _ptr__4795[safe_add( safe_add( _4794,_4804 ),(int)1 )] = _4802;
            }
          }
        }
      }
    }
  }
  _4744->clear();
}
void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4810,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4811,    int _4812,    int _4813,    int _4814,    int _4815,    int _4816) { mosek::fusion::p_ExprCompress::arg_sort(_4810,_4811,_4812,_4813,_4814,_4815,_4816); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4810,monty::rc_ptr< ::mosek::fusion::WorkStack > _4811,int _4812,int _4813,int _4814,int _4815,int _4816){
  int _4817 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4818 = mosek::fusion::p_WorkStack::_get_impl(_4810)->i32;
  _checked_ptr_1<int> _ptr__4818(_4818 ? _4818->raw() : nullptr,_4818 ? _4818->size(0) : 0);
  int _9128 = (int)0;
  int _9129 = _4813;
  for (int _4819 = _9128; _4819 < _9129; ++_4819)
  {
    {
      if (((_ptr__4818[safe_add( safe_add( _4815,_4819 ),(int)1 )] - _ptr__4818[safe_add( _4815,_4819 )]) > _4817))
      {
        {
          _4817 = (_ptr__4818[safe_add( safe_add( _4815,_4819 ),(int)1 )] - _ptr__4818[safe_add( _4815,_4819 )]);
        }
      }
      {}
    }
  }
  int _9130;
  bool _9131 = (_4817 > (int)2);
  if (_9131)
  {
    _9130 = _4811->alloci32(safe_mul( _4817,(int)2 ));
  }
  else
  {
    _9130 = (int)99999;
  }
  int _4820 = _9130;
  std::shared_ptr< monty::ndarray< int,1 > > _4821 = mosek::fusion::p_WorkStack::_get_impl(_4811)->i32;
  _checked_ptr_1<int> _ptr__4821(_4821 ? _4821->raw() : nullptr,_4821 ? _4821->size(0) : 0);
  _4818 = mosek::fusion::p_WorkStack::_get_impl(_4810)->i32;
  _ptr__4818.update(_4818 ? _4818->raw() : nullptr, _4818 ? _4818->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4822 = mosek::fusion::p_WorkStack::_get_impl(_4810)->i64;
  _checked_ptr_1<long long> _ptr__4822(_4822 ? _4822->raw() : nullptr,_4822 ? _4822->size(0) : 0);
  int _9132 = (int)0;
  int _9133 = _4813;
  for (int _4823 = _9132; _4823 < _9133; ++_4823)
  {
    {
      int _4824 = _ptr__4818[safe_add( _4815,_4823 )];
      int _4825 = _ptr__4818[safe_add( safe_add( _4815,_4823 ),(int)1 )];
      int _4826 = (_4825 - _4824);
      if ((_4826 == (int)0))
      {
        {
        }
      }
      else if((_4826 == (int)1))
      {
        {
          _ptr__4821[safe_add( _4812,_4824 )] = _4824;
        }
      }
      else if((_4826 == (int)2))
      {
        {
          if ((_ptr__4822[safe_add( _4816,_4824 )] <= _ptr__4822[safe_add( safe_add( _4816,_4824 ),(int)1 )]))
          {
            {
              _ptr__4821[safe_add( _4812,_4824 )] = _4824;
              _ptr__4821[safe_add( safe_add( _4812,_4824 ),(int)1 )] = safe_add( _4824,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4821[safe_add( _4812,_4824 )] = safe_add( _4824,(int)1 );
              _ptr__4821[safe_add( safe_add( _4812,_4824 ),(int)1 )] = _4824;
            }
          }
        }
      }
      else
      {
        {
          long long _4827 = _ptr__4822[safe_add( _4816,_4824 )];
          long long _4828 = _ptr__4822[safe_add( _4816,_4824 )];
          bool _4829 = false;
          int _9134 = safe_add( _4824,(int)1 );
          int _9135 = _4825;
          for (int _4830 = _9134; _4830 < _9135; ++_4830)
          {
            {
              _4829 = (_4829 && (_ptr__4822[(safe_add( _4816,_4830 ) - (int)1)] <= _ptr__4822[safe_add( _4816,_4830 )]));
              if ((_4827 > _ptr__4822[safe_add( _4816,_4830 )]))
              {
                {
                  _4827 = _ptr__4822[safe_add( _4816,_4830 )];
                }
              }
              {}
              if ((_4828 < _ptr__4822[safe_add( _4816,_4830 )]))
              {
                {
                  _4828 = _ptr__4822[safe_add( _4816,_4830 )];
                }
              }
              {}
            }
          }
          if (_4829)
          {
            {
              int _9136 = _4824;
              int _9137 = _4825;
              for (int _4831 = _9136; _4831 < _9137; ++_4831)
              {
                {
                  _ptr__4821[safe_add( _4812,_4831 )] = _4831;
                }
              }
            }
          }
          else if((safe_add( (_4828 - _4827),(int)1 ) <= _4826))
          {
            {
              long long _4832 = safe_add( (_4828 - _4827),(int)1 );
              int _9138 = (int)0;
              long long _9139 = safe_add( _4832,(int)1 );
              for (long long _4833 = _9138; _4833 < _9139; ++_4833)
              {
                {
                  _ptr__4821[safe_add( _4820,_4833 )] = (int)0;
                }
              }
              int _9140 = _4824;
              int _9141 = _4825;
              for (int _4834 = _9140; _4834 < _9141; ++_4834)
              {
                {
                  ++ _ptr__4821[safe_add( (safe_add( _4820,_ptr__4822[safe_add( _4816,_4834 )] ) - _4827),(int)1 )];
                }
              }
              int _9142 = (int)0;
              long long _9143 = _4832;
              for (long long _4835 = _9142; _4835 < _9143; ++_4835)
              {
                {
                  _ptr__4821[safe_add( safe_add( _4820,_4835 ),(int)1 )] += _ptr__4821[safe_add( _4820,_4835 )];
                }
              }
              int _9144 = _4824;
              int _9145 = _4825;
              for (int _4836 = _9144; _4836 < _9145; ++_4836)
              {
                {
                  _ptr__4821[safe_add( safe_add( _4812,_4824 ),_ptr__4821[(safe_add( _4820,_ptr__4822[safe_add( _4816,_4836 )] ) - _4827)] )] = _4836;
                  ++ _ptr__4821[(safe_add( _4820,_ptr__4822[safe_add( _4816,_4836 )] ) - _4827)];
                }
              }
            }
          }
          else
          {
            {
              int _4837 = (int)1;
              int _4838 = _4820;
              int _4839 = safe_add( _4820,_4826 );
              int _9146 = (int)0;
              int _9147 = _4826;
              for (int _4840 = _9146; _4840 < _9147; ++_4840)
              {
                {
                  _ptr__4821[safe_add( _4838,_4840 )] = _4840;
                }
              }
              while ( (_4837 < _4826) )
              {
                {
                  int _4841 = safe_mul( _4837,(int)2 );
                  int _4842 = (_4826 / _4841);
                  if ((safe_add( safe_mul( _4842,_4841 ),_4837 ) < _4826))
                  {
                    {
                      ++ _4842;
                    }
                  }
                  {}
                  int _4843 = (int)0;
                  int _9148 = (int)0;
                  int _9149 = _4842;
                  for (int _4844 = _9148; _4844 < _9149; ++_4844)
                  {
                    {
                      int _4845 = safe_mul( _4844,_4841 );
                      int _4846 = safe_add( _4845,_4837 );
                      int _4847 = _4846;
                      int _4848 = safe_add( _4847,_4837 );
                      if ((_4848 > _4826))
                      {
                        {
                          _4848 = _4826;
                        }
                      }
                      {}
                      while ( ((_4845 < _4846) && (_4847 < _4848)) )
                      {
                        {
                          if ((_ptr__4822[safe_add( safe_add( _4816,_ptr__4821[safe_add( _4838,_4845 )] ),_4824 )] <= _ptr__4822[safe_add( safe_add( _4816,_ptr__4821[safe_add( _4838,_4847 )] ),_4824 )]))
                          {
                            {
                              _ptr__4821[safe_add( _4839,_4843 )] = _ptr__4821[safe_add( _4838,_4845 )];
                              ++ _4843;
                              ++ _4845;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4821[safe_add( _4839,_4843 )] = _ptr__4821[safe_add( _4838,_4847 )];
                              ++ _4843;
                              ++ _4847;
                            }
                          }
                        }
                      }
                      while ( (_4845 < _4846) )
                      {
                        {
                          _ptr__4821[safe_add( _4839,_4843 )] = _ptr__4821[safe_add( _4838,_4845 )];
                          ++ _4843;
                          ++ _4845;
                        }
                      }
                      while ( (_4847 < _4848) )
                      {
                        {
                          _ptr__4821[safe_add( _4839,_4843 )] = _ptr__4821[safe_add( _4838,_4847 )];
                          ++ _4843;
                          ++ _4847;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4842,_4841 ) < _4826))
                  {
                    {
                      int _4849 = safe_mul( _4842,_4841 );
                      while ( (_4849 < _4826) )
                      {
                        {
                          _ptr__4821[safe_add( _4839,_4843 )] = _ptr__4821[safe_add( _4838,_4849 )];
                          ++ _4849;
                          ++ _4843;
                        }
                      }
                    }
                  }
                  {}
                  int _4850 = _4838;
                  _4838 = _4839;
                  _4839 = _4850;
                  _4837 *= (int)2;
                }
              }
              int _9150 = (int)0;
              int _9151 = _4826;
              for (int _4851 = _9150; _4851 < _9151; ++_4851)
              {
                {
                  _ptr__4821[safe_add( safe_add( _4812,_4824 ),_4851 )] = safe_add( _ptr__4821[safe_add( _4838,_4851 )],_4824 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4852,    int _4853,    int _4854,    int _4855,    int _4856,    int _4857,    std::shared_ptr< monty::ndarray< int,1 > > _4858,    std::shared_ptr< monty::ndarray< long long,1 > > _4859) { mosek::fusion::p_ExprCompress::merge_sort(_4852,_4853,_4854,_4855,_4856,_4857,_4858,_4859); }void mosek::fusion::p_ExprCompress::merge_sort(int _4852,int _4853,int _4854,int _4855,int _4856,int _4857,std::shared_ptr< monty::ndarray< int,1 > > _4858,std::shared_ptr< monty::ndarray< long long,1 > > _4859){
  _checked_ptr_1<int> _ptr__4858(_4858 ? _4858->raw() : nullptr, _4858 ? _4858->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4859(_4859 ? _4859->raw() : nullptr, _4859 ? _4859->size(0) : 0);
  int _4860 = _4852;
  int _4861 = _4853;
  int _9152 = (int)0;
  int _9153 = _4855;
  for (int _4862 = _9152; _4862 < _9153; ++_4862)
  {
    {
      _ptr__4858[safe_add( _4860,_4862 )] = _4862;
    }
  }
  int _9154 = (int)0;
  int _9155 = _4854;
  for (int _4863 = _9154; _4863 < _9155; ++_4863)
  {
    {
      _4860 = _4852;
      _4861 = _4853;
      int _4864 = _ptr__4858[safe_add( safe_add( _4856,_4863 ),(int)1 )];
      int _4865 = _ptr__4858[safe_add( _4856,_4863 )];
      if ((safe_add( _4865,(int)1 ) < _4864))
      {
        {
          int _4866 = (_4864 - _4865);
          int _4867 = (int)0;
          while ( (_4866 > (int)1) )
          {
            {
              ++ _4867;
              _4866 /= (int)2;
            }
          }
          _4866 = (_4864 - _4865);
          int _4868 = (int)1;
          int _9156 = (int)0;
          int _9157 = safe_add( _4867,(int)1 );
          for (int _4869 = _9156; _4869 < _9157; ++_4869)
          {
            {
              int _4870 = ((safe_add( _4866,_4868 ) - (int)1) / _4868);
              int _4871 = (_4870 / (int)2);
              int _4872 = _4865;
              int _9158 = (int)0;
              int _9159 = _4871;
              for (int _4873 = _9158; _4873 < _9159; ++_4873)
              {
                {
                  int _4874 = safe_mul( safe_mul( _4873,_4868 ),(int)2 );
                  int _9160;
                  bool _9161 = (safe_add( safe_add( _4865,_4874 ),safe_mul( (int)2,_4868 ) ) < _4864);
                  if (_9161)
                  {
                    _9160 = safe_add( safe_add( _4865,_4874 ),safe_mul( (int)2,_4868 ) );
                  }
                  else
                  {
                    _9160 = _4864;
                  }
                  int _4875 = _9160;
                  int _4876 = safe_add( safe_add( _4865,_4874 ),_4868 );
                  int _4877 = safe_add( safe_add( _4865,_4874 ),_4868 );
                  int _4878 = safe_add( _4865,_4874 );
                  while ( ((_4878 < _4877) && (_4876 < _4875)) )
                  {
                    {
                      if ((_ptr__4859[safe_add( _4857,_ptr__4858[safe_add( _4860,_4878 )] )] <= _ptr__4859[safe_add( _4857,_ptr__4858[safe_add( _4860,_4876 )] )]))
                      {
                        {
                          _ptr__4858[safe_add( _4861,_4872 )] = _ptr__4858[safe_add( _4860,_4878 )];
                          ++ _4872;
                          ++ _4878;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4858[safe_add( _4861,_4872 )] = _ptr__4858[safe_add( _4860,_4876 )];
                          ++ _4872;
                          ++ _4876;
                        }
                      }
                    }
                  }
                  while ( (_4878 < _4877) )
                  {
                    {
                      _ptr__4858[safe_add( _4861,_4872 )] = _ptr__4858[safe_add( _4860,_4878 )];
                      ++ _4872;
                      ++ _4878;
                    }
                  }
                  while ( (_4876 < _4875) )
                  {
                    {
                      _ptr__4858[safe_add( _4861,_4872 )] = _ptr__4858[safe_add( _4860,_4876 )];
                      ++ _4872;
                      ++ _4876;
                    }
                  }
                }
              }
              int _9162 = _4872;
              int _9163 = _4864;
              for (int _4879 = _9162; _4879 < _9163; ++_4879)
              {
                {
                  _ptr__4858[safe_add( _4861,_4879 )] = _ptr__4858[safe_add( _4860,_4879 )];
                }
              }
              int _4880 = _4860;
              _4860 = _4861;
              _4861 = _4880;
              _4868 *= (int)2;
            }
          }
        }
      }
      {}
      int _9164 = _4865;
      int _9165 = _4864;
      for (int _4881 = _9164; _4881 < _9165; ++_4881)
      {
        {
          _ptr__4858[safe_add( _4852,_4881 )] = _ptr__4858[safe_add( _4860,_4881 )];
        }
      }
    }
  }
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4882){ return new mosek::fusion::ExprCondense(_4882); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4882) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_4882); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4882){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4882->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _4882;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4883,monty::rc_ptr< ::mosek::fusion::WorkStack > _4884,monty::rc_ptr< ::mosek::fusion::WorkStack > _4885) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_4883,_4884,_4885); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4883,monty::rc_ptr< ::mosek::fusion::WorkStack > _4884,monty::rc_ptr< ::mosek::fusion::WorkStack > _4885){
  expr->eval(_4883,_4884,_4885);
  int _4886 = _4883->popi32();
  long long _4887 = (int)1;
  int _9166 = (int)0;
  int _9167 = _4886;
  for (int _4888 = _9166; _4888 < _9167; ++_4888)
  {
    {
      _4887 *= _4883->popi32();
    }
  }
  int _4889 = _4883->popi32();
  int _4890 = _4883->popi32();
  bool _4891 = (_4883->popi32() != (int)0);
  if (_4891)
  {
    {
      _4883->popi64(_4889);
    }
  }
  {}
  _4883->pushi32((int)0);
  _4883->pushi32(_4890);
  _4883->pushi32(_4889);
  _4883->pushi32(_4889);
  _4883->pushi32((int)1);
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4892){ return new mosek::fusion::ExprFromVar(_4892); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4892) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_4892); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4892){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4892->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _4892;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4893,monty::rc_ptr< ::mosek::fusion::WorkStack > _4894,monty::rc_ptr< ::mosek::fusion::WorkStack > _4895) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_4893,_4894,_4895); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4893,monty::rc_ptr< ::mosek::fusion::WorkStack > _4894,monty::rc_ptr< ::mosek::fusion::WorkStack > _4895){
  std::shared_ptr< monty::ndarray< int,1 > > _4896 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4896(_4896 ? _4896->raw() : nullptr,_4896 ? _4896->size(0) : 0);
  long long _4897 = ::mosek::fusion::p_Set::size(_4896);
  int _4898 = x->numInst();
  int _4899 = _4898;
  bool _4900 = (_4897 > _4898);
  int _4901 = _4893->alloci32(safe_add( _4898,(int)1 ));
  int _4902 = _4893->alloci64(_4899);
  int _9168;
  bool _9169 = _4900;
  if (_9169)
  {
    _9168 = _4893->alloci64(_4898);
  }
  else
  {
    _9168 = (-(int)1);
  }
  int _4903 = _9168;
  int _4904 = _4893->allocf64(_4899);
  int _4905 = _4893->allocf64(_4898);
  int _9170;
  bool _9171 = _4900;
  if (_9171)
  {
    _9170 = (int)1;
  }
  else
  {
    _9170 = (int)0;
  }
  _4893->pushi32(_9170);
  _4893->pushi32(_4899);
  _4893->pushi32(_4898);
  int _9172 = (int)0;
  int _9173 = (int)((_4896)->size(0));
  for (int _4906 = _9172; _4906 < _9173; ++_4906)
  {
    {
      _4893->pushi32(_ptr__4896[_4906]);
    }
  }
  _4893->pushi32((int)((_4896)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4907 = mosek::fusion::p_WorkStack::_get_impl(_4893)->i32;
  _checked_ptr_1<int> _ptr__4907(_4907 ? _4907->raw() : nullptr,_4907 ? _4907->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4908 = mosek::fusion::p_WorkStack::_get_impl(_4893)->i64;
  _checked_ptr_1<long long> _ptr__4908(_4908 ? _4908->raw() : nullptr,_4908 ? _4908->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4909 = mosek::fusion::p_WorkStack::_get_impl(_4893)->f64;
  _checked_ptr_1<double> _ptr__4909(_4909 ? _4909->raw() : nullptr,_4909 ? _4909->size(0) : 0);
  {
    int _9174 = (int)0;
    int _9175 = safe_add( _4898,(int)1 );
    for (int _4910 = _9174; _4910 < _9175; ++_4910)
    {
      {
        _ptr__4907[safe_add( _4901,_4910 )] = _4910;
      }
    }
    int _9176 = (int)0;
    int _9177 = _4898;
    for (int _4911 = _9176; _4911 < _9177; ++_4911)
    {
      {
        _ptr__4909[safe_add( _4905,_4911 )] = 0.0;
      }
    }
    int _9178 = (int)0;
    int _9179 = _4899;
    for (int _4912 = _9178; _4912 < _9179; ++_4912)
    {
      {
        _ptr__4909[safe_add( _4904,_4912 )] = 1.0;
      }
    }
  }
  if (_4900)
  {
    {
      x->inst(_4903,_4908,_4902,_4908);
    }
  }
  else
  {
    {
      x->inst(_4902,_4908);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4913,    monty::rc_ptr< ::mosek::fusion::Expression > _4914){ return new mosek::fusion::ExprReshape(_4913,_4914); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4913,    monty::rc_ptr< ::mosek::fusion::Expression > _4914) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_4913,_4914); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4913,    monty::rc_ptr< ::mosek::fusion::Expression > _4914){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4913(_4913 ? _4913->raw() : nullptr, _4913 ? _4913->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_4913));
    long long _4915 = _4914->getSize();
    if ((::mosek::fusion::p_Set::size(_4913) != _4914->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _4914;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4916,monty::rc_ptr< ::mosek::fusion::WorkStack > _4917,monty::rc_ptr< ::mosek::fusion::WorkStack > _4918) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_4916,_4917,_4918); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4916,monty::rc_ptr< ::mosek::fusion::WorkStack > _4917,monty::rc_ptr< ::mosek::fusion::WorkStack > _4918){
  std::shared_ptr< monty::ndarray< int,1 > > _4919 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4919(_4919 ? _4919->raw() : nullptr,_4919 ? _4919->size(0) : 0);
  e->eval(_4916,_4917,_4918);
  _4916->peek_expr();
  int _4920 = _4916->popi32();
  long long _4921 = (int)1;
  int _9180 = (int)0;
  int _9181 = _4920;
  for (int _4922 = _9180; _4922 < _9181; ++_4922)
  {
    {
      _4921 *= _4916->popi32();
    }
  }
  if ((_4921 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _9182 = (int)0;
  int _9183 = (int)((_4919)->size(0));
  for (int _4923 = _9182; _4923 < _9183; ++_4923)
  {
    {
      _4916->pushi32(_ptr__4919[_4923]);
    }
  }
  _4916->pushi32((int)((_4919)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4924 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _4924->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _9184 = (int)1;
      int _9185 = _pubthis->getND();
      for (int _4925 = _9184; _4925 < _9185; ++_4925)
      {
        {
          _4924->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_4925));
        }
      }
    }
  }
  {}
  _4924->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4924->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4926){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4926(_4926 ? _4926->raw() : nullptr, _4926 ? _4926->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _4926;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__eval() { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::eval() { return __mosek_2fusion_2BaseExpression__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__eval(){
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4927 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4928 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4929 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  _pubthis->eval(_4927,_4928,_4929);
  int _4930 = _4927->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4931 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4930)));
  _checked_ptr_1<int> _ptr__4931(_4931 ? _4931->raw() : nullptr,_4931 ? _4931->size(0) : 0);
  _4927->popi32(_4930,_4931,(int)0);
  int _4932 = _4927->popi32();
  int _4933 = _4927->popi32();
  int _4934 = (int)1;
  int _9186 = (int)0;
  int _9187 = _4930;
  for (int _4935 = _9186; _4935 < _9187; ++_4935)
  {
    {
      _4934 *= _ptr__4931[_4935];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4936 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4933)));
  _checked_ptr_1<long long> _ptr__4936(_4936 ? _4936->raw() : nullptr,_4936 ? _4936->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4937 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4932,(int)1 ))));
  _checked_ptr_1<int> _ptr__4937(_4937 ? _4937->raw() : nullptr,_4937 ? _4937->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4938 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4932)));
  _checked_ptr_1<double> _ptr__4938(_4938 ? _4938->raw() : nullptr,_4938 ? _4938->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4939 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4933)));
  _checked_ptr_1<double> _ptr__4939(_4939 ? _4939->raw() : nullptr,_4939 ? _4939->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4940 = nullptr;
  _checked_ptr_1<long long> _ptr__4940(_4940 ? _4940->raw() : nullptr,_4940 ? _4940->size(0) : 0);
  if ((_4934 < _4932))
  {
    {
      _4940 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4932)));
      _ptr__4940.update(_4940 ? _4940->raw() : nullptr, _4940 ? _4940->size(0) : 0);
      _4927->popi64(_4932,_4940,(int)0);
    }
  }
  {}
  _4927->popi32(_4932,_4937,(int)1);
  _4927->popi64(_4933,_4936,(int)0);
  _4927->popf64(_4932,_4938,(int)0);
  _4927->popf64(_4933,_4939,(int)0);
  std::vector<long long> _9188;
  for (int _4941 = (int)0, _9189 = safe_add( _4932,(int)1 ); _4941 < _9189 ; ++_4941)
  {
    _9188.push_back(_ptr__4937[_4941]);
  }
  auto _9190 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9188.size()),_9188.begin(),_9188.end()));
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4938,_9190,_4936,_4939,_4931,_4940);
}
void mosek::fusion::BaseExpression::storeexpr  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4942,    std::shared_ptr< monty::ndarray< int,1 > > _4943,    std::shared_ptr< monty::ndarray< int,1 > > _4944,    std::shared_ptr< monty::ndarray< long long,1 > > _4945,    std::shared_ptr< monty::ndarray< long long,1 > > _4946,    std::shared_ptr< monty::ndarray< double,1 > > _4947,    std::shared_ptr< monty::ndarray< double,1 > > _4948) { mosek::fusion::p_BaseExpression::storeexpr(_4942,_4943,_4944,_4945,_4946,_4947,_4948); }void mosek::fusion::p_BaseExpression::storeexpr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4942,std::shared_ptr< monty::ndarray< int,1 > > _4943,std::shared_ptr< monty::ndarray< int,1 > > _4944,std::shared_ptr< monty::ndarray< long long,1 > > _4945,std::shared_ptr< monty::ndarray< long long,1 > > _4946,std::shared_ptr< monty::ndarray< double,1 > > _4947,std::shared_ptr< monty::ndarray< double,1 > > _4948){
  _checked_ptr_1<int> _ptr__4943(_4943 ? _4943->raw() : nullptr, _4943 ? _4943->size(0) : 0);
  _checked_ptr_1<int> _ptr__4944(_4944 ? _4944->raw() : nullptr, _4944 ? _4944->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4945(_4945 ? _4945->raw() : nullptr, _4945 ? _4945->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4946(_4946 ? _4946->raw() : nullptr, _4946 ? _4946->size(0) : 0);
  _checked_ptr_1<double> _ptr__4947(_4947 ? _4947->raw() : nullptr, _4947 ? _4947->size(0) : 0);
  _checked_ptr_1<double> _ptr__4948(_4948 ? _4948->raw() : nullptr, _4948 ? _4948->size(0) : 0);
  int _4949 = _ptr__4944[((int)((_4944)->size(0)) - (int)1)];
  int _4950 = ((int)((_4944)->size(0)) - (int)1);
  int _4951 = (int)((_4943)->size(0));
  {
    int _4952 = _4942->alloci32(safe_add( _4950,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_4944,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4942)->i32,_4952,safe_add( _4950,(int)1 ));
  }
  int _9191;
  bool _9192 = (NULL != _4945.get());
  if (_9192)
  {
    _9191 = (int)1;
  }
  else
  {
    _9191 = (int)0;
  }
  _4942->pushi32(_9191);
  _4942->pushi32(_4949);
  _4942->pushi32(_4950);
  {
    int _4953 = _4942->alloci32(_4951);
    ::mosek::fusion::Utils::Tools::arraycopy(_4943,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4942)->i32,_4953,_4951);
  }
  _4942->pushi32(_4951);
  {
    int _4954 = _4942->alloci64(_4949);
    ::mosek::fusion::Utils::Tools::arraycopy(_4946,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4942)->i64,_4954,_4949);
  }
  if ((NULL != _4945.get()))
  {
    {
      int _4955 = _4942->alloci64(_4950);
      ::mosek::fusion::Utils::Tools::arraycopy(_4945,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4942)->i64,_4955,_4950);
    }
  }
  {}
  {
    int _4956 = _4942->allocf64(_4949);
    ::mosek::fusion::Utils::Tools::arraycopy(_4947,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4942)->f64,_4956,_4949);
  }
  {
    int _4957 = _4942->allocf64(_4950);
    if ((NULL != _4948.get()))
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_4948,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4942)->f64,_4957,_4950);
      }
    }
    else
    {
      {
        int _9193 = (int)0;
        int _9194 = _4950;
        for (int _4958 = _9193; _4958 < _9194; ++_4958)
        {
          {
            ((*mosek::fusion::p_WorkStack::_get_impl(_4942)->f64)(safe_add( _4957,_4958 ))) = (int)0;
          }
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4962) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _4962) { return __mosek_2fusion_2BaseExpression__pick(_4962); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4962) { return __mosek_2fusion_2BaseExpression__pick(_4962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4962){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4962)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4963) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _4963) { return __mosek_2fusion_2BaseExpression__pick(_4963); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4963) { return __mosek_2fusion_2BaseExpression__pick(_4963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4963){
  _checked_ptr_1<int> _ptr__4963(_4963 ? _4963->raw() : nullptr, _4963 ? _4963->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4964 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_4963)->size(0)),(int)1)));
  int _9195 = (int)0;
  int _9196 = (int)((_4963)->size(0));
  for (int _4965 = _9195; _4965 < _9196; ++_4965)
  {
    {
      ((*_4964)(_4965,(int)0)) = _ptr__4963[_4965];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4964)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4966) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _4966) { return __mosek_2fusion_2BaseExpression__index(_4966); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4966) { return __mosek_2fusion_2BaseExpression__index(_4966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4966){
  _checked_ptr_1<int> _ptr__4966(_4966 ? _4966->raw() : nullptr, _4966 ? _4966->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4967 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_4966)->size(0)))));
  int _9197 = (int)0;
  int _9198 = (int)((_4966)->size(0));
  for (int _4968 = _9197; _4968 < _9198; ++_4968)
  {
    {
      ((*_4967)((int)0,_4968)) = _ptr__4966[_4968];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4967)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _4969) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _4969) { return __mosek_2fusion_2BaseExpression__index(_4969); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _4969) { return __mosek_2fusion_2BaseExpression__index(_4969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _4969){
  std::shared_ptr< monty::ndarray< int,2 > > _4970 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_4970)((int)0,(int)0)) = _4969;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4970)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4971,std::shared_ptr< monty::ndarray< int,1 > > _4972) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4971,_4972); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _4971,std::shared_ptr< monty::ndarray< int,1 > > _4972) { return __mosek_2fusion_2BaseExpression__slice(_4971,_4972); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4971,std::shared_ptr< monty::ndarray< int,1 > > _4972) { return __mosek_2fusion_2BaseExpression__slice(_4971,_4972); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4971,std::shared_ptr< monty::ndarray< int,1 > > _4972){
  _checked_ptr_1<int> _ptr__4971(_4971 ? _4971->raw() : nullptr, _4971 ? _4971->size(0) : 0);
  _checked_ptr_1<int> _ptr__4972(_4972 ? _4972->raw() : nullptr, _4972 ? _4972->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4971,_4972)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _4973,int _4974) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4973,_4974); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _4973,int _4974) { return __mosek_2fusion_2BaseExpression__slice(_4973,_4974); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _4973,int _4974) { return __mosek_2fusion_2BaseExpression__slice(_4973,_4974); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _4973,int _4974){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4973)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4974)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _4975) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_4975); }int mosek::fusion::p_BaseExpression::getDim(int _4975){
  return ((*shape)(_4975));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_bfix_base() { return _impl->bfix_base; }
void mosek::fusion::WorkStack::set_bfix_base(int _val) { _impl->bfix_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    bfix_base = (int)0;
    cof_base = (int)0;
  }
}bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _4976) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_4976); }int mosek::fusion::p_WorkStack::peek_dim(int _4976){
  return _pubthis->peeki32(safe_add( _4976,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _4977,int _4978,int _4979,bool _4980) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_4977,_4978,_4979,_4980); }void mosek::fusion::p_WorkStack::alloc_expr(int _4977,int _4978,int _4979,bool _4980){
  cof_base = _pubthis->allocf64(_4979);
  bfix_base = _pubthis->allocf64(_4978);
  nidxs_base = _pubthis->alloci64(_4979);
  int _9199;
  bool _9200 = _4980;
  if (_9200)
  {
    _9199 = _pubthis->alloci64(_4978);
  }
  else
  {
    _9199 = (-(int)9999);
  }
  sp_base = _9199;
  ptr_base = _pubthis->alloci32(safe_add( _4978,(int)1 ));
  int _9201;
  bool _9202 = _4980;
  if (_9202)
  {
    _9201 = (int)1;
  }
  else
  {
    _9201 = (int)0;
  }
  _pubthis->pushi32(_9201);
  _pubthis->pushi32(_4979);
  _pubthis->pushi32(_4978);
  shape_base = _pubthis->alloci32(_4977);
  _pubthis->pushi32(_4977);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _4977;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _4978;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _4979;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _4980;
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4981) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_4981); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4981){
  int _4982 = pi32;
  int _4983 = pi64;
  int _4984 = pf64;
  _pubthis->pop_expr();
  int _4985 = _4981->alloci32((_4982 - pi32));
  int _4986 = _4981->alloci64((_4983 - pi64));
  int _4987 = _4981->allocf64((_4984 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_4981)->i32,_4985,(_4982 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_4981)->i64,_4986,(_4983 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_4981)->f64,_4987,(_4984 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _4988 = pi32;
  int _4989 = pi64;
  int _4990 = pf64;
  _pubthis->pop_expr();
  pi32 = _4988;
  pi64 = _4989;
  pf64 = _4990;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _9203;
  bool _9204 = hassp;
  if (_9204)
  {
    _9203 = _pubthis->popi64(nelem);
  }
  else
  {
    _9203 = (-(int)9999);
  }
  sp_base = _9203;
  nidxs_base = _pubthis->popi64(nnz);
  bfix_base = _pubthis->popf64(nelem);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _4991 = ((*i32)((pi32 - (int)1)));
  bool _4992 = (((*i32)(((pi32 - _4991) - (int)3))) != (int)0);
  int _4993 = ((*i32)(((pi32 - _4991) - (int)1)));
  if ((!_4992))
  {
    {
      ((*i32)(((pi32 - _4991) - (int)3))) = (int)1;
      int _4994 = _pubthis->alloci64(_4993);
      int _9205 = (int)0;
      int _9206 = _4993;
      for (int _4995 = _9205; _4995 < _9206; ++_4995)
      {
        {
          ((*i64)(_4994)) = _4995;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _4996) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_4996); }int mosek::fusion::p_WorkStack::allocf64(int _4996){
  _pubthis->ensuref64(_4996);
  int _4997 = pf64;
  pf64 += _4996;
  return _4997;
}
int mosek::fusion::WorkStack :: alloci64(int _4998) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_4998); }int mosek::fusion::p_WorkStack::alloci64(int _4998){
  _pubthis->ensurei64(_4998);
  int _4999 = pi64;
  pi64 += _4998;
  return _4999;
}
int mosek::fusion::WorkStack :: alloci32(int _5000) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_5000); }int mosek::fusion::p_WorkStack::alloci32(int _5000){
  if ((_5000 > (int)0))
  {
    {
      _pubthis->ensurei32(_5000);
      int _5001 = pi32;
      pi32 += _5000;
      return _5001;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _5002) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_5002); }void mosek::fusion::p_WorkStack::pushf64(double _5002){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _5002;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _5003) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_5003); }void mosek::fusion::p_WorkStack::pushi64(long long _5003){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _5003;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _5004) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_5004); }void mosek::fusion::p_WorkStack::pushi32(int _5004){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _5004;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _5005) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_5005); }void mosek::fusion::p_WorkStack::ensuref64(int _5005){
  if ((safe_add( pf64,_5005 ) > (int)((f64)->size(0))))
  {
    {
      int _9207;
      bool _9208 = (_5005 < (int)((f64)->size(0)));
      if (_9208)
      {
        _9207 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _9207 = safe_add( (int)((f64)->size(0)),_5005 );
      }
      int _5006 = _9207;
      std::shared_ptr< monty::ndarray< double,1 > > _5007 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5006)));
      _checked_ptr_1<double> _ptr__5007(_5007 ? _5007->raw() : nullptr,_5007 ? _5007->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_5007,(int)0,pf64);
      f64 = _5007;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _5008) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_5008); }void mosek::fusion::p_WorkStack::ensurei64(int _5008){
  if ((safe_add( pi64,_5008 ) > (int)((i64)->size(0))))
  {
    {
      int _9209;
      bool _9210 = (_5008 < (int)((i64)->size(0)));
      if (_9210)
      {
        _9209 = (int)((i64)->size(0));
      }
      else
      {
        _9209 = _5008;
      }
      int _5009 = safe_add( (int)((i64)->size(0)),_9209 );
      std::shared_ptr< monty::ndarray< long long,1 > > _5010 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5009)));
      _checked_ptr_1<long long> _ptr__5010(_5010 ? _5010->raw() : nullptr,_5010 ? _5010->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_5010,(int)0,pi64);
      i64 = _5010;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _5011) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_5011); }void mosek::fusion::p_WorkStack::ensurei32(int _5011){
  if ((safe_add( pi32,_5011 ) > (int)((i32)->size(0))))
  {
    {
      int _9211;
      bool _9212 = (_5011 < (int)((i32)->size(0)));
      if (_9212)
      {
        _9211 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _9211 = safe_add( (int)((i32)->size(0)),_5011 );
      }
      int _5012 = _9211;
      std::shared_ptr< monty::ndarray< int,1 > > _5013 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5012)));
      _checked_ptr_1<int> _ptr__5013(_5013 ? _5013->raw() : nullptr,_5013 ? _5013->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_5013,(int)0,pi32);
      i32 = _5013;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _5014) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_5014); }int mosek::fusion::p_WorkStack::popf64(int _5014){
  pf64 -= _5014;
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _5015) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_5015); }int mosek::fusion::p_WorkStack::popi64(int _5015){
  pi64 -= _5015;
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _5016) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_5016); }int mosek::fusion::p_WorkStack::popi32(int _5016){
  pi32 -= _5016;
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _5017,std::shared_ptr< monty::ndarray< double,1 > > _5018,int _5019) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_5017,_5018,_5019); }void mosek::fusion::p_WorkStack::popf64(int _5017,std::shared_ptr< monty::ndarray< double,1 > > _5018,int _5019){
  _checked_ptr_1<double> _ptr__5018(_5018 ? _5018->raw() : nullptr, _5018 ? _5018->size(0) : 0);
  pf64 -= _5017;
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_5018,_5019,_5017);
}
void mosek::fusion::WorkStack :: popi64(int _5020,std::shared_ptr< monty::ndarray< long long,1 > > _5021,int _5022) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_5020,_5021,_5022); }void mosek::fusion::p_WorkStack::popi64(int _5020,std::shared_ptr< monty::ndarray< long long,1 > > _5021,int _5022){
  _checked_ptr_1<long long> _ptr__5021(_5021 ? _5021->raw() : nullptr, _5021 ? _5021->size(0) : 0);
  pi64 -= _5020;
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_5021,_5022,_5020);
}
void mosek::fusion::WorkStack :: popi32(int _5023,std::shared_ptr< monty::ndarray< int,1 > > _5024,int _5025) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_5023,_5024,_5025); }void mosek::fusion::p_WorkStack::popi32(int _5023,std::shared_ptr< monty::ndarray< int,1 > > _5024,int _5025){
  _checked_ptr_1<int> _ptr__5024(_5024 ? _5024->raw() : nullptr, _5024 ? _5024->size(0) : 0);
  pi32 -= _5023;
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_5024,_5025,_5023);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _5026) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_5026); }double mosek::fusion::p_WorkStack::peekf64(int _5026){
  return ((*f64)(((pf64 - _5026) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _5027) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_5027); }long long mosek::fusion::p_WorkStack::peeki64(int _5027){
  return ((*i64)(((pi64 - _5027) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _5028) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_5028); }int mosek::fusion::p_WorkStack::peeki32(int _5028){
  return ((*i32)(((pi32 - _5028) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _5029,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5030,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5031,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5032){ return new mosek::fusion::SymmetricExpr(_5029,_5030,_5031,_5032); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _5029,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5030,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5031,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5032) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_5029,_5030,_5031,_5032); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _5029,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5030,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5031,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5032){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _5029;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _5030;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _5031;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _5032;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5033,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5034){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_5033)->n != _5034->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9213;
  bool _9214 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5033)->b.get());
  if (_9214)
  {
    _9213 = mosek::fusion::p_SymmetricExpr::_get_impl(_5033)->b->__mosek_2fusion_2SymmetricMatrix__add(_5034);
  }
  else
  {
    _9213 = _5034;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_5033)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_5033)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_5033)->xs,_9213);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5035,double _5036){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _9215;
  for (int _5037 = (int)0, _9216 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5035)->Ms)->size(0)); _5037 < _9216 ; ++_5037)
  {
    _9215.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_5035)->Ms)(_5037))->__mosek_2fusion_2SymmetricMatrix__mul(_5036));
  }
  auto _9217 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_9215.size()),_9215.begin(),_9215.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9218;
  bool _9219 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5035)->b.get());
  if (_9219)
  {
    _9218 = mosek::fusion::p_SymmetricExpr::_get_impl(_5035)->b->__mosek_2fusion_2SymmetricMatrix__mul(_5036);
  }
  else
  {
    _9218 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_5035)->n,_9217,mosek::fusion::p_SymmetricExpr::_get_impl(_5035)->xs,_9218);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5038,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _5039){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _5040 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5041 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->xs)->size(0)) ))));
  int _5042 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->Ms)->size(0));
  int _9220 = (int)0;
  int _9221 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->Ms)->size(0));
  for (int _5043 = _9220; _5043 < _9221; ++_5043)
  {
    {
      ((*_5040)(_5043)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->Ms)(_5043));
    }
  }
  int _9222 = (int)0;
  int _9223 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->Ms)->size(0));
  for (int _5044 = _9222; _5044 < _9223; ++_5044)
  {
    {
      ((*_5040)(safe_add( _5044,_5042 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->Ms)(_5044));
    }
  }
  int _5045 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->xs)->size(0));
  int _9224 = (int)0;
  int _9225 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->xs)->size(0));
  for (int _5046 = _9224; _5046 < _9225; ++_5046)
  {
    {
      ((*_5041)(_5046)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->xs)(_5046));
    }
  }
  int _9226 = (int)0;
  int _9227 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->xs)->size(0));
  for (int _5047 = _9226; _5047 < _9227; ++_5047)
  {
    {
      ((*_5041)(safe_add( _5047,_5045 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->xs)(_5047));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9228;
  bool _9229 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->b.get()));
  if (_9229)
  {
    _9228 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9230;
    bool _9231 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->b.get()));
    if (_9231)
    {
      _9230 = mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9232;
      bool _9233 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->b.get());
      if (_9233)
      {
        _9232 = mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->b;
      }
      else
      {
        _9232 = mosek::fusion::p_SymmetricExpr::_get_impl(_5039)->b;
      }
      _9230 = _9232;
    }
    _9228 = _9230;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5048 = _9228;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_5038)->n,_5040,_5041,_5048);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5049 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5049->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _5049->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5050,    std::shared_ptr< monty::ndarray< long long,1 > > _5051,    std::shared_ptr< monty::ndarray< double,1 > > _5052,    std::shared_ptr< monty::ndarray< double,1 > > _5053,    std::shared_ptr< monty::ndarray< int,1 > > _5054,    std::shared_ptr< monty::ndarray< long long,1 > > _5055){ return new mosek::fusion::Expr(_5050,_5051,_5052,_5053,_5054,_5055); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5050,    std::shared_ptr< monty::ndarray< long long,1 > > _5051,    std::shared_ptr< monty::ndarray< double,1 > > _5052,    std::shared_ptr< monty::ndarray< double,1 > > _5053,    std::shared_ptr< monty::ndarray< int,1 > > _5054,    std::shared_ptr< monty::ndarray< long long,1 > > _5055) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5050,_5051,_5052,_5053,_5054,_5055); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _5050,    std::shared_ptr< monty::ndarray< long long,1 > > _5051,    std::shared_ptr< monty::ndarray< double,1 > > _5052,    std::shared_ptr< monty::ndarray< double,1 > > _5053,    std::shared_ptr< monty::ndarray< int,1 > > _5054,    std::shared_ptr< monty::ndarray< long long,1 > > _5055){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5050(_5050 ? _5050->raw() : nullptr, _5050 ? _5050->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5051(_5051 ? _5051->raw() : nullptr, _5051 ? _5051->size(0) : 0);
    _checked_ptr_1<double> _ptr__5052(_5052 ? _5052->raw() : nullptr, _5052 ? _5052->size(0) : 0);
    _checked_ptr_1<double> _ptr__5053(_5053 ? _5053->raw() : nullptr, _5053 ? _5053->size(0) : 0);
    _checked_ptr_1<int> _ptr__5054(_5054 ? _5054->raw() : nullptr, _5054 ? _5054->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5055(_5055 ? _5055->raw() : nullptr, _5055 ? _5055->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _9234;
    bool _9235 = (NULL != _5054.get());
    if (_9235)
    {
      _9234 = ::mosek::fusion::Utils::Tools::arraycopy(_5054);
    }
    else
    {
      _9234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_5050)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _9236;
    bool _9237 = (NULL != _5055.get());
    if (_9237)
    {
      _9236 = ::mosek::fusion::Utils::Tools::arraycopy(_5055);
    }
    else
    {
      _9236 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_5050),::mosek::fusion::Utils::Tools::arraycopy(_5051),::mosek::fusion::Utils::Tools::arraycopy(_5052),::mosek::fusion::Utils::Tools::arraycopy(_5053),_9234,_9236,(int)1);
    int _5056 = ((int)((_5050)->size(0)) - (int)1);
    if ((_5056 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _5057 = _ptr__5050[_5056];
    if (((_5057 < (int)0) || ((_5057 != (int)((_5052)->size(0))) || (_5057 != (int)((_5051)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _5058 = true;
    bool _5059 = true;
    bool _5060 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _5061 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__5061(_5061 ? _5061->raw() : nullptr,_5061 ? _5061->size(0) : 0);
    long long _5062 = ::mosek::fusion::p_Set::size(_5061);
    {
      int _9238 = (int)0;
      int _9239 = (int)((_5061)->size(0));
      for (int _5063 = _9238; _5063 < _9239; ++_5063)
      {
        {
          _5059 = (_5059 && (_ptr__5061[_5063] >= (int)0));
        }
      }
      int _9240 = (int)0;
      int _9241 = _5056;
      for (int _5064 = _9240; _5064 < _9241; ++_5064)
      {
        {
          _5058 = (_5058 && (_ptr__5050[_5064] <= _ptr__5050[safe_add( _5064,(int)1 )]));
        }
      }
      if (((NULL != _5055.get()) && ((int)((_5055)->size(0)) > (int)0)))
      {
        {
          _5060 = ((_ptr__5055[(int)0] >= (int)0) && (_ptr__5055[(_5056 - (int)1)] < _5062));
          int _9242 = (int)0;
          int _9243 = (_5056 - (int)1);
          for (int _5065 = _9242; _5065 < _9243; ++_5065)
          {
            {
              _5060 = (_5060 && (_ptr__5055[_5065] < _ptr__5055[safe_add( _5065,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_5059))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_5058))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_5060))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5066,    std::shared_ptr< monty::ndarray< long long,1 > > _5067,    std::shared_ptr< monty::ndarray< double,1 > > _5068,    std::shared_ptr< monty::ndarray< double,1 > > _5069,    std::shared_ptr< monty::ndarray< int,1 > > _5070,    std::shared_ptr< monty::ndarray< long long,1 > > _5071,    int _5072){ return new mosek::fusion::Expr(_5066,_5067,_5068,_5069,_5070,_5071,_5072); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _5066,    std::shared_ptr< monty::ndarray< long long,1 > > _5067,    std::shared_ptr< monty::ndarray< double,1 > > _5068,    std::shared_ptr< monty::ndarray< double,1 > > _5069,    std::shared_ptr< monty::ndarray< int,1 > > _5070,    std::shared_ptr< monty::ndarray< long long,1 > > _5071,    int _5072) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5066,_5067,_5068,_5069,_5070,_5071,_5072); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _5066,    std::shared_ptr< monty::ndarray< long long,1 > > _5067,    std::shared_ptr< monty::ndarray< double,1 > > _5068,    std::shared_ptr< monty::ndarray< double,1 > > _5069,    std::shared_ptr< monty::ndarray< int,1 > > _5070,    std::shared_ptr< monty::ndarray< long long,1 > > _5071,    int _5072){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5066(_5066 ? _5066->raw() : nullptr, _5066 ? _5066->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5067(_5067 ? _5067->raw() : nullptr, _5067 ? _5067->size(0) : 0);
    _checked_ptr_1<double> _ptr__5068(_5068 ? _5068->raw() : nullptr, _5068 ? _5068->size(0) : 0);
    _checked_ptr_1<double> _ptr__5069(_5069 ? _5069->raw() : nullptr, _5069 ? _5069->size(0) : 0);
    _checked_ptr_1<int> _ptr__5070(_5070 ? _5070->raw() : nullptr, _5070 ? _5070->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5071(_5071 ? _5071->raw() : nullptr, _5071 ? _5071->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5070);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _5070;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _5066;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _5067;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _5068;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _5069;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _5071;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _5073){ return new mosek::fusion::Expr(_5073); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _5073) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_5073); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5073){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5073->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _9244 = _5073;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_9244.get()))
    {
      ::mosek::fusion::Expr::t _5074 (dynamic_cast<::mosek::fusion::Expr*>(_9244.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_5074)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_5074)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_5074)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_5074)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_5074)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_5074)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _5075 = _9244;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5076 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5077 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _5078 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _5075->eval(_5078,_5077,_5076);
        int _5079 = _5078->popi32();
        int _5080 = _5078->popi32(_5079);
        int _5081 = _5078->popi32();
        int _5082 = _5078->popi32();
        bool _5083 = (_5078->popi32() != (int)0);
        int _5084 = _5078->popi32(safe_add( _5081,(int)1 ));
        int _9245;
        bool _9246 = _5083;
        if (_9246)
        {
          _9245 = _5078->popi64(_5081);
        }
        else
        {
          _9245 = (int)0;
        }
        int _5085 = _9245;
        int _5086 = _5078->popi64(_5082);
        int _5087 = _5078->popf64(_5081);
        int _5088 = _5078->popf64(_5082);
        std::shared_ptr< monty::ndarray< int,1 > > _5089 = mosek::fusion::p_WorkStack::_get_impl(_5078)->i32;
        _checked_ptr_1<int> _ptr__5089(_5089 ? _5089->raw() : nullptr,_5089 ? _5089->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _5090 = mosek::fusion::p_WorkStack::_get_impl(_5078)->i64;
        _checked_ptr_1<long long> _ptr__5090(_5090 ? _5090->raw() : nullptr,_5090 ? _5090->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _5091 = mosek::fusion::p_WorkStack::_get_impl(_5078)->f64;
        _checked_ptr_1<double> _ptr__5091(_5091 ? _5091->raw() : nullptr,_5091 ? _5091->size(0) : 0);
        std::vector<int> _9247;
        for (int _5092 = (int)0, _9248 = _5079; _5092 < _9248 ; ++_5092)
        {
          _9247.push_back(_ptr__5089[safe_add( _5080,_5092 )]);
        }
        auto _9249 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9247.size()),_9247.begin(),_9247.end()));
        shape = _9249;
        std::vector<long long> _9250;
        for (int _5093 = (int)0, _9251 = safe_add( _5081,(int)1 ); _5093 < _9251 ; ++_5093)
        {
          _9250.push_back(_ptr__5089[safe_add( _5084,_5093 )]);
        }
        auto _9252 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9250.size()),_9250.begin(),_9250.end()));
        ptrb = _9252;
        std::vector<long long> _9253;
        for (int _5094 = (int)0, _9254 = _5082; _5094 < _9254 ; ++_5094)
        {
          _9253.push_back(_ptr__5090[safe_add( _5086,_5094 )]);
        }
        auto _9255 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9253.size()),_9253.begin(),_9253.end()));
        subj = _9255;
        std::vector<double> _9256;
        for (int _5095 = (int)0, _9257 = _5082; _5095 < _9257 ; ++_5095)
        {
          _9256.push_back(_ptr__5091[safe_add( _5088,_5095 )]);
        }
        auto _9258 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9256.size()),_9256.begin(),_9256.end()));
        cof_v = _9258;
        std::vector<double> _9259;
        for (int _5096 = (int)0, _9260 = _5082; _5096 < _9260 ; ++_5096)
        {
          _9259.push_back(_ptr__5091[safe_add( _5087,_5096 )]);
        }
        auto _9261 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9259.size()),_9259.begin(),_9259.end()));
        bfix = _9261;
        std::shared_ptr< monty::ndarray< long long,1 > > _9262;
        bool _9263 = _5083;
        if (_9263)
        {
          std::vector<long long> _9264;
          for (int _5097 = (int)0, _9265 = _5082; _5097 < _9265 ; ++_5097)
          {
            _9264.push_back(_ptr__5090[safe_add( _5085,_5097 )]);
          }
          auto _9266 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9264.size()),_9264.begin(),_9264.end()));
          _9262 = _9266;
        }
        else
        {
          _9262 = nullptr;
        }
        inst = _9262;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _5098){
  _checked_ptr_1<int> _ptr__5098(_5098 ? _5098->raw() : nullptr, _5098 ? _5098->size(0) : 0);
  int _5099 = (int)1;
  int _9267 = (int)0;
  int _9268 = (int)((_5098)->size(0));
  for (int _5100 = _9267; _5100 < _9268; ++_5100)
  {
    {
      _5099 *= _ptr__5098[_5100];
    }
  }
  return _5099;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _5101){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9269;
  for (int _5102 = (int)0, _9270 = (int)((_5101)->size(0)); _5102 < _9270 ; ++_5102)
  {
    for (int _5103 = (int)0, _9271 = (int)((((*_5101)(_5102)))->size(0)); _5103 < _9271 ; ++_5103)
    {
      _9269.push_back(((*((*_5101)(_5102)))(_5103)));
    }
  }
  auto _9272 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9269.size()),_9269.begin(),_9269.end()));
  return _9272;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5104,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5105){
  if ((NULL == _5104.get()))
  {
    {
      return _5105;
    }
  }
  else if((NULL == _5105.get()))
  {
    {
      return _5104;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5106 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_5104)->size(0)),(int)((_5105)->size(0)) ))));
      int _9273 = (int)0;
      int _9274 = (int)((_5104)->size(0));
      for (int _5107 = _9273; _5107 < _9274; ++_5107)
      {
        {
          ((*_5106)(_5107)) = ((*_5104)(_5107));
        }
      }
      int _9275 = (int)0;
      int _9276 = (int)((_5105)->size(0));
      for (int _5108 = _9275; _5108 < _9276; ++_5108)
      {
        {
          ((*_5106)(safe_add( _5108,(int)((_5104)->size(0)) ))) = ((*_5105)(_5108));
        }
      }
      return _5106;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _5109) { return mosek::fusion::p_Expr::condense(_5109); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _5109){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_5109)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _5110) { return mosek::fusion::p_Expr::flatten(_5110); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _5110){
  if ((NULL == _5110.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5110,(int)_5110->getSize());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5111,    int _5112,    int _5113) { return mosek::fusion::p_Expr::reshape(_5111,_5112,_5113); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5111,int _5112,int _5113){
  if ((NULL == _5111.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5111,::mosek::fusion::p_Set::make(_5112,_5113));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5114,    int _5115) { return mosek::fusion::p_Expr::reshape(_5114,_5115); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5114,int _5115){
  if ((NULL == _5114.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5114,::mosek::fusion::p_Set::make(_5115));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5116,    std::shared_ptr< monty::ndarray< int,1 > > _5117) { return mosek::fusion::p_Expr::reshape(_5116,_5117); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5116,std::shared_ptr< monty::ndarray< int,1 > > _5117){
  _checked_ptr_1<int> _ptr__5117(_5117 ? _5117->raw() : nullptr, _5117 ? _5117->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5117,_5116)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr :: __mosek_2fusion_2Expr__eval() { return mosek::fusion::p_Expr::_get_impl(this)->__mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval() { return __mosek_2fusion_2Expr__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::__mosek_2fusion_2BaseExpression__eval() { return __mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::__mosek_2fusion_2Expr__eval(){
  std::shared_ptr< monty::ndarray< double,1 > > _9277;
  bool _9278 = (NULL == bfix.get());
  if (_9278)
  {
    _9277 = nullptr;
  }
  else
  {
    _9277 = ::mosek::fusion::Utils::Tools::arraycopy(bfix);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5118 = _9277;
  _checked_ptr_1<double> _ptr__5118(_5118 ? _5118->raw() : nullptr,_5118 ? _5118->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9279;
  bool _9280 = (NULL == inst.get());
  if (_9280)
  {
    _9279 = nullptr;
  }
  else
  {
    _9279 = ::mosek::fusion::Utils::Tools::arraycopy(inst);
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5119 = _9279;
  _checked_ptr_1<long long> _ptr__5119(_5119 ? _5119->raw() : nullptr,_5119 ? _5119->size(0) : 0);
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_5118,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape,inst);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _5120) { return mosek::fusion::p_Expr::zeros(_5120); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _5120){
  _checked_ptr_1<int> _ptr__5120(_5120 ? _5120->raw() : nullptr, _5120 ? _5120->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5120,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _5121) { return mosek::fusion::p_Expr::zeros(_5121); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _5121){
  return ::mosek::fusion::p_Expr::constTerm(_5121,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5122,    std::shared_ptr< monty::ndarray< int,2 > > _5123) { return mosek::fusion::p_Expr::ones(_5122,_5123); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5122,std::shared_ptr< monty::ndarray< int,2 > > _5123){
  _checked_ptr_1<int> _ptr__5122(_5122 ? _5122->raw() : nullptr, _5122 ? _5122->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5122,_5123,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5124) { return mosek::fusion::p_Expr::ones(_5124); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5124){
  _checked_ptr_1<int> _ptr__5124(_5124 ? _5124->raw() : nullptr, _5124 ? _5124->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5124,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _5125) { return mosek::fusion::p_Expr::ones(_5125); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _5125){
  return ::mosek::fusion::p_Expr::constTerm(_5125,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5126) { return mosek::fusion::p_Expr::constTerm(_5126); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5126){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_5126)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_5126)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5126)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5127) { return mosek::fusion::p_Expr::constTerm(_5127); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _5127){
  int _5128 = _5127->numRows();
  int _5129 = _5127->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _5130 = ::mosek::fusion::p_Set::make(_5128,_5129);
  _checked_ptr_1<int> _ptr__5130(_5130 ? _5130->raw() : nullptr,_5130 ? _5130->size(0) : 0);
  if (_5127->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5131 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5127->numNonzeros())));
      _checked_ptr_1<double> _ptr__5131(_5131 ? _5131->raw() : nullptr,_5131 ? _5131->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5132 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5127->numNonzeros())));
      _checked_ptr_1<int> _ptr__5132(_5132 ? _5132->raw() : nullptr,_5132 ? _5132->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5133 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5127->numNonzeros())));
      _checked_ptr_1<int> _ptr__5133(_5133 ? _5133->raw() : nullptr,_5133 ? _5133->size(0) : 0);
      _5127->getDataAsTriplets(_5133,_5132,_5131);
      std::vector<long long> _9281;
      for (int _5135 = (int)0, _9282 = (int)((_5132)->size(0)); _5135 < _9282 ; ++_5135)
      {
        _9281.push_back(safe_add( safe_mul( _ptr__5133[_5135],_5129 ),_ptr__5132[_5135] ));
      }
      auto _9283 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9281.size()),_9281.begin(),_9281.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _5134 = _9283;
      _checked_ptr_1<long long> _ptr__5134(_5134 ? _5134->raw() : nullptr,_5134 ? _5134->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5130,_5134,_5131)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5130,nullptr,_5127->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _5136) { return mosek::fusion::p_Expr::constTerm(_5136); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _5136){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_5136)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5137,    std::shared_ptr< monty::ndarray< int,2 > > _5138,    double _5139) { return mosek::fusion::p_Expr::constTerm(_5137,_5138,_5139); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5137,std::shared_ptr< monty::ndarray< int,2 > > _5138,double _5139){
  _checked_ptr_1<int> _ptr__5137(_5137 ? _5137->raw() : nullptr, _5137 ? _5137->size(0) : 0);
  int _5140 = (int)((_5138)->size(0));
  int _5141 = (int)((_5137)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5142 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5140)));
  _checked_ptr_1<long long> _ptr__5142(_5142 ? _5142->raw() : nullptr,_5142 ? _5142->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5143 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5141)));
  _checked_ptr_1<long long> _ptr__5143(_5143 ? _5143->raw() : nullptr,_5143 ? _5143->size(0) : 0);
  _ptr__5143[(_5141 - (int)1)] = (int)1;
  int _9284 = (int)1;
  int _9285 = _5141;
  for (int _5144 = _9284; _5144 < _9285; ++_5144)
  {
    {
      _ptr__5143[((_5141 - _5144) - (int)1)] = safe_mul( _ptr__5143[(_5141 - _5144)],_ptr__5137[(_5141 - _5144)] );
    }
  }
  int _9286 = (int)0;
  int _9287 = _5140;
  for (int _5145 = _9286; _5145 < _9287; ++_5145)
  {
    {
      int _9288 = (int)0;
      int _9289 = _5141;
      for (int _5146 = _9288; _5146 < _9289; ++_5146)
      {
        {
          _ptr__5142[_5145] += safe_mul( _ptr__5143[_5146],((*_5138)(_5145,_5146)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5137,_5142,_5139)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5147,    std::shared_ptr< monty::ndarray< int,2 > > _5148,    std::shared_ptr< monty::ndarray< double,1 > > _5149) { return mosek::fusion::p_Expr::constTerm(_5147,_5148,_5149); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5147,std::shared_ptr< monty::ndarray< int,2 > > _5148,std::shared_ptr< monty::ndarray< double,1 > > _5149){
  _checked_ptr_1<int> _ptr__5147(_5147 ? _5147->raw() : nullptr, _5147 ? _5147->size(0) : 0);
  _checked_ptr_1<double> _ptr__5149(_5149 ? _5149->raw() : nullptr, _5149 ? _5149->size(0) : 0);
  int _5150 = (int)((_5148)->size(0));
  int _5151 = (int)((_5147)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5152 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5150)));
  _checked_ptr_1<long long> _ptr__5152(_5152 ? _5152->raw() : nullptr,_5152 ? _5152->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5153 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5151)));
  _checked_ptr_1<long long> _ptr__5153(_5153 ? _5153->raw() : nullptr,_5153 ? _5153->size(0) : 0);
  _ptr__5153[(_5151 - (int)1)] = (int)1;
  int _9290 = (int)1;
  int _9291 = _5151;
  for (int _5154 = _9290; _5154 < _9291; ++_5154)
  {
    {
      _ptr__5153[((_5151 - _5154) - (int)1)] = safe_mul( _ptr__5153[(_5151 - _5154)],_ptr__5147[(_5151 - _5154)] );
    }
  }
  int _9292 = (int)0;
  int _9293 = _5150;
  for (int _5155 = _9292; _5155 < _9293; ++_5155)
  {
    {
      int _9294 = (int)0;
      int _9295 = _5151;
      for (int _5156 = _9294; _5156 < _9295; ++_5156)
      {
        {
          _ptr__5152[_5155] += safe_mul( _ptr__5153[_5156],((*_5148)(_5155,_5156)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5147,_5152,_5149)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5157,    double _5158) { return mosek::fusion::p_Expr::constTerm(_5157,_5158); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5157,double _5158){
  _checked_ptr_1<int> _ptr__5157(_5157 ? _5157->raw() : nullptr, _5157 ? _5157->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5157,nullptr,_5158)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _5159,    double _5160) { return mosek::fusion::p_Expr::constTerm(_5159,_5160); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _5159,double _5160){
  std::vector<double> _9296;
  for (int _5161 = (int)0, _9297 = _5159; _5161 < _9297 ; ++_5161)
  {
    _9296.push_back(_5160);
  }
  auto _9298 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9296.size()),_9296.begin(),_9296.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5159)}),nullptr,_9298)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _5162) { return mosek::fusion::p_Expr::constTerm(_5162); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _5162){
  std::vector<double> _9299;
  for (int _5163 = (int)0, _9300 = (int)((_5162)->size(0)); _5163 < _9300 ; ++_5163)
  {
    for (int _5164 = (int)0, _9301 = (int)((_5162)->size(1)); _5164 < _9301 ; ++_5164)
    {
      _9299.push_back(((*_5162)(_5163,_5164)));
    }
  }
  auto _9302 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9299.size()),_9299.begin(),_9299.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5162)->size(0))),(int)((int)((_5162)->size(1)))}),nullptr,_9302)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _5165) { return mosek::fusion::p_Expr::constTerm(_5165); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _5165){
  _checked_ptr_1<double> _ptr__5165(_5165 ? _5165->raw() : nullptr, _5165 ? _5165->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5165)->size(0)))}),nullptr,_5165)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5166,    int _5167) { return mosek::fusion::p_Expr::sum(_5166,_5167); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5166,int _5167){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_5167,_5166)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5168) { return mosek::fusion::p_Expr::sum(_5168); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5168){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_5168))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _5169) { return mosek::fusion::p_Expr::neg(_5169); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _5169){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_5169)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _5170,monty::rc_ptr< ::mosek::fusion::Matrix > _5171,monty::rc_ptr< ::mosek::fusion::Expression > _5172){
  long long _5173 = _5171->numNonzeros();
  int _5174 = _5171->numRows();
  int _5175 = _5171->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5176 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5173)));
  _checked_ptr_1<double> _ptr__5176(_5176 ? _5176->raw() : nullptr,_5176 ? _5176->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5177 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5173)));
  _checked_ptr_1<int> _ptr__5177(_5177 ? _5177->raw() : nullptr,_5177 ? _5177->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5178 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5173)));
  _checked_ptr_1<int> _ptr__5178(_5178 ? _5178->raw() : nullptr,_5178 ? _5178->size(0) : 0);
  _5171->getDataAsTriplets(_5178,_5177,_5176);
  if (_5170)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_5174,_5175,_5178,_5177,_5176,_5172)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_5174,_5175,_5178,_5177,_5176,_5172)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5179,    monty::rc_ptr< ::mosek::fusion::Matrix > _5180) { return mosek::fusion::p_Expr::mulDiag(_5179,_5180); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5179,monty::rc_ptr< ::mosek::fusion::Matrix > _5180){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5180,_5179->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5181,    monty::rc_ptr< ::mosek::fusion::Variable > _5182) { return mosek::fusion::p_Expr::mulDiag(_5181,_5182); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5181,monty::rc_ptr< ::mosek::fusion::Variable > _5182){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5181,_5182->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5183,    monty::rc_ptr< ::mosek::fusion::Matrix > _5184) { return mosek::fusion::p_Expr::mulDiag(_5183,_5184); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5183,monty::rc_ptr< ::mosek::fusion::Matrix > _5184){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5184,_5183);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5185,    monty::rc_ptr< ::mosek::fusion::Expression > _5186) { return mosek::fusion::p_Expr::mulDiag(_5185,_5186); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5185,monty::rc_ptr< ::mosek::fusion::Expression > _5186){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5185,_5186);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5187,    std::shared_ptr< monty::ndarray< double,2 > > _5188) { return mosek::fusion::p_Expr::mulDiag(_5187,_5188); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5187,std::shared_ptr< monty::ndarray< double,2 > > _5188){
  std::vector<int> _9303;
  for (int _5189 = (int)0, _9304 = (int)((_5188)->size(0)); _5189 < _9304 ; ++_5189)
  {
    for (int _5190 = (int)0, _9305 = (int)((_5188)->size(1)); _5190 < _9305 ; ++_5190)
    {
      _9303.push_back(_5189);
    }
  }
  auto _9306 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9303.size()),_9303.begin(),_9303.end()));
  std::vector<int> _9307;
  for (int _5191 = (int)0, _9308 = (int)((_5188)->size(0)); _5191 < _9308 ; ++_5191)
  {
    for (int _5192 = (int)0, _9309 = (int)((_5188)->size(1)); _5192 < _9309 ; ++_5192)
    {
      _9307.push_back(_5192);
    }
  }
  auto _9310 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9307.size()),_9307.begin(),_9307.end()));
  std::vector<double> _9311;
  for (int _5193 = (int)0, _9312 = (int)((_5188)->size(0)); _5193 < _9312 ; ++_5193)
  {
    for (int _5194 = (int)0, _9313 = (int)((_5188)->size(1)); _5194 < _9313 ; ++_5194)
    {
      _9311.push_back(((*_5188)(_5193,_5194)));
    }
  }
  auto _9314 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9311.size()),_9311.begin(),_9311.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5188)->size(0)),(int)((_5188)->size(1)),_9306,_9310,_9314,_5187->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5195,    std::shared_ptr< monty::ndarray< double,2 > > _5196) { return mosek::fusion::p_Expr::mulDiag(_5195,_5196); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5195,std::shared_ptr< monty::ndarray< double,2 > > _5196){
  std::vector<int> _9315;
  for (int _5197 = (int)0, _9316 = (int)((_5196)->size(0)); _5197 < _9316 ; ++_5197)
  {
    for (int _5198 = (int)0, _9317 = (int)((_5196)->size(1)); _5198 < _9317 ; ++_5198)
    {
      _9315.push_back(_5197);
    }
  }
  auto _9318 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9315.size()),_9315.begin(),_9315.end()));
  std::vector<int> _9319;
  for (int _5199 = (int)0, _9320 = (int)((_5196)->size(0)); _5199 < _9320 ; ++_5199)
  {
    for (int _5200 = (int)0, _9321 = (int)((_5196)->size(1)); _5200 < _9321 ; ++_5200)
    {
      _9319.push_back(_5200);
    }
  }
  auto _9322 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9319.size()),_9319.begin(),_9319.end()));
  std::vector<double> _9323;
  for (int _5201 = (int)0, _9324 = (int)((_5196)->size(0)); _5201 < _9324 ; ++_5201)
  {
    for (int _5202 = (int)0, _9325 = (int)((_5196)->size(1)); _5202 < _9325 ; ++_5202)
    {
      _9323.push_back(((*_5196)(_5201,_5202)));
    }
  }
  auto _9326 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9323.size()),_9323.begin(),_9323.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5196)->size(0)),(int)((_5196)->size(1)),_9318,_9322,_9326,_5195)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5203,    monty::rc_ptr< ::mosek::fusion::Variable > _5204) { return mosek::fusion::p_Expr::mulDiag(_5203,_5204); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5203,monty::rc_ptr< ::mosek::fusion::Variable > _5204){
  std::vector<int> _9327;
  for (int _5205 = (int)0, _9328 = (int)((_5203)->size(0)); _5205 < _9328 ; ++_5205)
  {
    for (int _5206 = (int)0, _9329 = (int)((_5203)->size(1)); _5206 < _9329 ; ++_5206)
    {
      _9327.push_back(_5205);
    }
  }
  auto _9330 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9327.size()),_9327.begin(),_9327.end()));
  std::vector<int> _9331;
  for (int _5207 = (int)0, _9332 = (int)((_5203)->size(0)); _5207 < _9332 ; ++_5207)
  {
    for (int _5208 = (int)0, _9333 = (int)((_5203)->size(1)); _5208 < _9333 ; ++_5208)
    {
      _9331.push_back(_5208);
    }
  }
  auto _9334 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9331.size()),_9331.begin(),_9331.end()));
  std::vector<double> _9335;
  for (int _5209 = (int)0, _9336 = (int)((_5203)->size(0)); _5209 < _9336 ; ++_5209)
  {
    for (int _5210 = (int)0, _9337 = (int)((_5203)->size(1)); _5210 < _9337 ; ++_5210)
    {
      _9335.push_back(((*_5203)(_5209,_5210)));
    }
  }
  auto _9338 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9335.size()),_9335.begin(),_9335.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5203)->size(0)),(int)((_5203)->size(1)),_9330,_9334,_9338,_5204->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5211,    monty::rc_ptr< ::mosek::fusion::Expression > _5212) { return mosek::fusion::p_Expr::mulDiag(_5211,_5212); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5211,monty::rc_ptr< ::mosek::fusion::Expression > _5212){
  std::vector<int> _9339;
  for (int _5213 = (int)0, _9340 = (int)((_5211)->size(0)); _5213 < _9340 ; ++_5213)
  {
    for (int _5214 = (int)0, _9341 = (int)((_5211)->size(1)); _5214 < _9341 ; ++_5214)
    {
      _9339.push_back(_5213);
    }
  }
  auto _9342 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9339.size()),_9339.begin(),_9339.end()));
  std::vector<int> _9343;
  for (int _5215 = (int)0, _9344 = (int)((_5211)->size(0)); _5215 < _9344 ; ++_5215)
  {
    for (int _5216 = (int)0, _9345 = (int)((_5211)->size(1)); _5216 < _9345 ; ++_5216)
    {
      _9343.push_back(_5216);
    }
  }
  auto _9346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9343.size()),_9343.begin(),_9343.end()));
  std::vector<double> _9347;
  for (int _5217 = (int)0, _9348 = (int)((_5211)->size(0)); _5217 < _9348 ; ++_5217)
  {
    for (int _5218 = (int)0, _9349 = (int)((_5211)->size(1)); _5218 < _9349 ; ++_5218)
    {
      _9347.push_back(((*_5211)(_5217,_5218)));
    }
  }
  auto _9350 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9347.size()),_9347.begin(),_9347.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5211)->size(0)),(int)((_5211)->size(1)),_9342,_9346,_9350,_5212)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _5219,monty::rc_ptr< ::mosek::fusion::Expression > _5220){
  std::shared_ptr< monty::ndarray< int,1 > > _5221 = _5220->getShape();
  _checked_ptr_1<int> _ptr__5221(_5221 ? _5221->raw() : nullptr,_5221 ? _5221->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _5222 = _5220;
  if (((int)((_5221)->size(0)) == (int)1))
  {
    {
      _5221 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5221[(int)0]),(int)((int)1)});
      _ptr__5221.update(_5221 ? _5221->raw() : nullptr, _5221 ? _5221->size(0) : 0);
      _5222 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5221,_5220)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5221)->size(0)) != (int)2) || ((_5219->numRows() != _ptr__5221[(int)0]) || (_5219->numColumns() != _ptr__5221[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _5223 = _5219->numColumns();
  long long _5224 = _5219->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5225 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5224)));
  _checked_ptr_1<int> _ptr__5225(_5225 ? _5225->raw() : nullptr,_5225 ? _5225->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5224)));
  _checked_ptr_1<int> _ptr__5226(_5226 ? _5226->raw() : nullptr,_5226 ? _5226->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5227 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5224)));
  _checked_ptr_1<double> _ptr__5227(_5227 ? _5227->raw() : nullptr,_5227 ? _5227->size(0) : 0);
  _5219->getDataAsTriplets(_5225,_5226,_5227);
  std::vector<long long> _9351;
  for (long long _5228 = (int)0, _9352 = _5224; _5228 < _9352 ; ++_5228)
  {
    _9351.push_back(safe_add( safe_mul( _ptr__5225[_5228],_5223 ),_ptr__5226[_5228] ));
  }
  auto _9353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9351.size()),_9351.begin(),_9351.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5227,_9353,_5222,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _5229,monty::rc_ptr< ::mosek::fusion::Expression > _5230){
  _checked_ptr_1<double> _ptr__5229(_5229 ? _5229->raw() : nullptr, _5229 ? _5229->size(0) : 0);
  if (((NULL == _5229.get()) || (NULL == _5230.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_5230->getND() == (int)0) && ((int)((_5229)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__5229[(int)0],_5230)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_5230->getND() != (int)1) || (_5230->getDim((int)0) != (int)((_5229)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _9354;
      for (int _5231 = (int)0, _9355 = (int)((_5229)->size(0)); _5231 < _9355 ; ++_5231)
      {
        _9354.push_back(_5231);
      }
      auto _9356 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9354.size()),_9354.begin(),_9354.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5229,_9356,_5230)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5232,monty::rc_ptr< ::mosek::fusion::Expression > _5233){
  if (((NULL == _5232.get()) || (NULL == _5233.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _5234 = _5233->getShape();
  _checked_ptr_1<int> _ptr__5234(_5234 ? _5234->raw() : nullptr,_5234 ? _5234->size(0) : 0);
  if (((int)((_5234)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5232)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _9357 = (int)0;
  int _9358 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5232)->dims)->size(0));
  for (int _5235 = _9357; _5235 < _9358; ++_5235)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5232)->dims)(_5235)) != _ptr__5234[_5235]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_5232)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_5232)->inst,_5233)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5236,    double _5237) { return mosek::fusion::p_Expr::mul(_5236,_5237); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5236,double _5237){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5237,_5236)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5238,    monty::rc_ptr< ::mosek::fusion::Expression > _5239) { return mosek::fusion::p_Expr::mul(_5238,_5239); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _5238,monty::rc_ptr< ::mosek::fusion::Expression > _5239){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5238,_5239)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5240,    std::shared_ptr< monty::ndarray< double,1 > > _5241) { return mosek::fusion::p_Expr::mul(_5240,_5241); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5240,std::shared_ptr< monty::ndarray< double,1 > > _5241){
  _checked_ptr_1<double> _ptr__5241(_5241 ? _5241->raw() : nullptr, _5241 ? _5241->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_5241,_5240);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5242,    monty::rc_ptr< ::mosek::fusion::Expression > _5243) { return mosek::fusion::p_Expr::mul(_5242,_5243); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _5242,monty::rc_ptr< ::mosek::fusion::Expression > _5243){
  _checked_ptr_1<double> _ptr__5242(_5242 ? _5242->raw() : nullptr, _5242 ? _5242->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_5242,_5243);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5244,    std::shared_ptr< monty::ndarray< double,2 > > _5245) { return mosek::fusion::p_Expr::mul(_5244,_5245); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5244,std::shared_ptr< monty::ndarray< double,2 > > _5245){
  return ::mosek::fusion::p_Expr::mul(false,_5245,_5244);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5246,    monty::rc_ptr< ::mosek::fusion::Expression > _5247) { return mosek::fusion::p_Expr::mul(_5246,_5247); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _5246,monty::rc_ptr< ::mosek::fusion::Expression > _5247){
  return ::mosek::fusion::p_Expr::mul(true,_5246,_5247);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5248,    monty::rc_ptr< ::mosek::fusion::Matrix > _5249) { return mosek::fusion::p_Expr::mul(_5248,_5249); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5248,monty::rc_ptr< ::mosek::fusion::Matrix > _5249){
  return ::mosek::fusion::p_Expr::mul(false,_5249,_5248);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5250,    monty::rc_ptr< ::mosek::fusion::Expression > _5251) { return mosek::fusion::p_Expr::mul(_5250,_5251); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5250,monty::rc_ptr< ::mosek::fusion::Expression > _5251){
  return ::mosek::fusion::p_Expr::mul(true,_5250,_5251);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5252,std::shared_ptr< monty::ndarray< double,1 > > _5253,monty::rc_ptr< ::mosek::fusion::Expression > _5254){
  _checked_ptr_1<double> _ptr__5253(_5253 ? _5253->raw() : nullptr, _5253 ? _5253->size(0) : 0);
  int _5255 = (int)((_5253)->size(0));
  int _5256 = _5255;
  std::shared_ptr< monty::ndarray< double,1 > > _5257 = ::mosek::fusion::Utils::Tools::arraycopy(_5253);
  _checked_ptr_1<double> _ptr__5257(_5257 ? _5257->raw() : nullptr,_5257 ? _5257->size(0) : 0);
  int _5258 = _5254->getND();
  if ((_5258 == (int)0))
  {
    {
      std::vector<int> _9359;
      for (int _5259 = (int)0, _9360 = _5255; _5259 < _9360 ; ++_5259)
      {
        _9359.push_back(_5259);
      }
      auto _9361 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9359.size()),_9359.begin(),_9359.end()));
      std::vector<int> _9362;
      for (int _5260 = (int)0, _9363 = _5255; _5260 < _9363 ; ++_5260)
      {
        _9362.push_back((int)0);
      }
      auto _9364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9362.size()),_9362.begin(),_9362.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5255)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5255,(int)1,_9361,_9364,_5257,_5254,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5258 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_5252 && (_5254->getDim((int)0) == (int)((_5253)->size(0)))))
  {
    {
      std::vector<int> _9365;
      for (int _5261 = (int)0, _9366 = _5255; _5261 < _9366 ; ++_5261)
      {
        _9365.push_back((int)0);
      }
      auto _9367 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9365.size()),_9365.begin(),_9365.end()));
      std::vector<int> _9368;
      for (int _5262 = (int)0, _9369 = _5255; _5262 < _9369 ; ++_5262)
      {
        _9368.push_back(_5262);
      }
      auto _9370 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9368.size()),_9368.begin(),_9368.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5254->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_5255,_9367,_9370,_5257,_5254)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5252 && (_5254->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _9371;
      for (int _5263 = (int)0, _9372 = _5255; _5263 < _9372 ; ++_5263)
      {
        _9371.push_back(_5263);
      }
      auto _9373 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9371.size()),_9371.begin(),_9371.end()));
      std::vector<int> _9374;
      for (int _5264 = (int)0, _9375 = _5255; _5264 < _9375 ; ++_5264)
      {
        _9374.push_back((int)0);
      }
      auto _9376 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9374.size()),_9374.begin(),_9374.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5255,(int)1,_9373,_9376,_5257,_5254,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5252) && (_5254->getDim((int)1) == _5255)))
  {
    {
      std::vector<int> _9377;
      for (int _5265 = (int)0, _9378 = _5255; _5265 < _9378 ; ++_5265)
      {
        _9377.push_back(_5265);
      }
      auto _9379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9377.size()),_9377.begin(),_9377.end()));
      std::vector<int> _9380;
      for (int _5266 = (int)0, _9381 = _5255; _5266 < _9381 ; ++_5266)
      {
        _9380.push_back((int)0);
      }
      auto _9382 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9380.size()),_9380.begin(),_9380.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5254->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5255,(int)1,_9379,_9382,_5257,_5254)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5252) && (_5254->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _9383;
      for (int _5267 = (int)0, _9384 = _5255; _5267 < _9384 ; ++_5267)
      {
        _9383.push_back((int)0);
      }
      auto _9385 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9383.size()),_9383.begin(),_9383.end()));
      std::vector<int> _9386;
      for (int _5268 = (int)0, _9387 = _5255; _5268 < _9387 ; ++_5268)
      {
        _9386.push_back(_5268);
      }
      auto _9388 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9386.size()),_9386.begin(),_9386.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_5255,_9385,_9388,_5257,_5254,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5269,std::shared_ptr< monty::ndarray< double,2 > > _5270,monty::rc_ptr< ::mosek::fusion::Expression > _5271){
  int _5272 = (int)((_5270)->size(0));
  int _5273 = (int)((_5270)->size(1));
  int _5274 = safe_mul( _5272,_5273 );
  std::vector<int> _9389;
  for (int _5276 = (int)0, _9390 = _5272; _5276 < _9390 ; ++_5276)
  {
    for (int _5277 = (int)0, _9391 = _5273; _5277 < _9391 ; ++_5277)
    {
      _9389.push_back(_5276);
    }
  }
  auto _9392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9389.size()),_9389.begin(),_9389.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5275 = _9392;
  _checked_ptr_1<int> _ptr__5275(_5275 ? _5275->raw() : nullptr,_5275 ? _5275->size(0) : 0);
  std::vector<int> _9393;
  for (int _5279 = (int)0, _9394 = _5272; _5279 < _9394 ; ++_5279)
  {
    for (int _5280 = (int)0, _9395 = _5273; _5280 < _9395 ; ++_5280)
    {
      _9393.push_back(_5280);
    }
  }
  auto _9396 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9393.size()),_9393.begin(),_9393.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5278 = _9396;
  _checked_ptr_1<int> _ptr__5278(_5278 ? _5278->raw() : nullptr,_5278 ? _5278->size(0) : 0);
  std::vector<double> _9397;
  for (int _5282 = (int)0, _9398 = _5272; _5282 < _9398 ; ++_5282)
  {
    for (int _5283 = (int)0, _9399 = _5273; _5283 < _9399 ; ++_5283)
    {
      _9397.push_back(((*_5270)(_5282,_5283)));
    }
  }
  auto _9400 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9397.size()),_9397.begin(),_9397.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5281 = _9400;
  _checked_ptr_1<double> _ptr__5281(_5281 ? _5281->raw() : nullptr,_5281 ? _5281->size(0) : 0);
  long long _5284 = _5271->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _5285 = _5271->getShape();
  _checked_ptr_1<int> _ptr__5285(_5285 ? _5285->raw() : nullptr,_5285 ? _5285->size(0) : 0);
  if (((int)((_5285)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5272,_5273,_5275,_5278,_5281,_5271,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_5269)
  {
    {
      if (((int)((_5285)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5270)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5272,_5273,_5275,_5278,_5281,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5285[(int)0]),(int)((int)1)}),_5271)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5285)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5272,_5273,_5275,_5278,_5281,_5271)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_5285)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5270)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5272,_5273,_5275,_5278,_5281,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5285[(int)0])}),_5271)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5285)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5272,_5273,_5275,_5278,_5281,_5271)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5286,monty::rc_ptr< ::mosek::fusion::Matrix > _5287,monty::rc_ptr< ::mosek::fusion::Expression > _5288){
  long long _5289 = _5287->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5290 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5289)));
  _checked_ptr_1<int> _ptr__5290(_5290 ? _5290->raw() : nullptr,_5290 ? _5290->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5291 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5289)));
  _checked_ptr_1<int> _ptr__5291(_5291 ? _5291->raw() : nullptr,_5291 ? _5291->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5292 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5289)));
  _checked_ptr_1<double> _ptr__5292(_5292 ? _5292->raw() : nullptr,_5292 ? _5292->size(0) : 0);
  int _5293 = _5287->numRows();
  int _5294 = _5287->numColumns();
  _5287->getDataAsTriplets(_5290,_5291,_5292);
  int _5295 = _5288->getND();
  if ((_5295 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5293,_5294,_5290,_5291,_5292,_5288)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5295 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5296 = _5288->getShape();
      _checked_ptr_1<int> _ptr__5296(_5296 ? _5296->raw() : nullptr,_5296 ? _5296->size(0) : 0);
      if (_5286)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5293)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5293,_5294,_5290,_5291,_5292,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5296[(int)0]),(int)((int)1)}),_5288)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5294)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5293,_5294,_5290,_5291,_5292,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5296[(int)0])}),_5288)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_5295 == (int)2))
  {
    {
      if (_5286)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5293,_5294,_5290,_5291,_5292,_5288)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5293,_5294,_5290,_5291,_5292,_5288)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5297,    monty::rc_ptr< ::mosek::fusion::Matrix > _5298) { return mosek::fusion::p_Expr::mul(_5297,_5298); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _5297,monty::rc_ptr< ::mosek::fusion::Matrix > _5298){
  int _5299 = _5298->numRows();
  int _5300 = _5298->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5301 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5298->numNonzeros())));
  _checked_ptr_1<double> _ptr__5301(_5301 ? _5301->raw() : nullptr,_5301 ? _5301->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5298->numNonzeros())));
  _checked_ptr_1<int> _ptr__5302(_5302 ? _5302->raw() : nullptr,_5302 ? _5302->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5303 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5298->numNonzeros())));
  _checked_ptr_1<int> _ptr__5303(_5303 ? _5303->raw() : nullptr,_5303 ? _5303->size(0) : 0);
  _5298->getDataAsTriplets(_5303,_5302,_5301);
  return ::mosek::fusion::p_Expr::mul(false,_5299,_5300,_5303,_5302,_5301,_5297);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5304,    monty::rc_ptr< ::mosek::fusion::Variable > _5305) { return mosek::fusion::p_Expr::mul(_5304,_5305); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5304,monty::rc_ptr< ::mosek::fusion::Variable > _5305){
  int _5306 = _5304->numRows();
  int _5307 = _5304->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5308 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5304->numNonzeros())));
  _checked_ptr_1<double> _ptr__5308(_5308 ? _5308->raw() : nullptr,_5308 ? _5308->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5309 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5304->numNonzeros())));
  _checked_ptr_1<int> _ptr__5309(_5309 ? _5309->raw() : nullptr,_5309 ? _5309->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5310 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5304->numNonzeros())));
  _checked_ptr_1<int> _ptr__5310(_5310 ? _5310->raw() : nullptr,_5310 ? _5310->size(0) : 0);
  _5304->getDataAsTriplets(_5310,_5309,_5308);
  return ::mosek::fusion::p_Expr::mul(true,_5306,_5307,_5310,_5309,_5308,_5305);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5311,int _5312,int _5313,std::shared_ptr< monty::ndarray< int,1 > > _5314,std::shared_ptr< monty::ndarray< int,1 > > _5315,std::shared_ptr< monty::ndarray< double,1 > > _5316,monty::rc_ptr< ::mosek::fusion::Variable > _5317){
  _checked_ptr_1<int> _ptr__5314(_5314 ? _5314->raw() : nullptr, _5314 ? _5314->size(0) : 0);
  _checked_ptr_1<int> _ptr__5315(_5315 ? _5315->raw() : nullptr, _5315 ? _5315->size(0) : 0);
  _checked_ptr_1<double> _ptr__5316(_5316 ? _5316->raw() : nullptr, _5316 ? _5316->size(0) : 0);
  if ((_5317->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_5312,_5313,_5314,_5315,_5316,_5317)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5317->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5318 = _5317->getShape();
      _checked_ptr_1<int> _ptr__5318(_5318 ? _5318->raw() : nullptr,_5318 ? _5318->size(0) : 0);
      int _9401;
      bool _9402 = _5311;
      if (_9402)
      {
        _9401 = _5312;
      }
      else
      {
        _9401 = _5313;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _9403;
      bool _9404 = _5311;
      if (_9404)
      {
        _9403 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5318[(int)0]),(int)((int)1)});
      }
      else
      {
        _9403 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5318[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_9401)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5311,_5312,_5313,_5314,_5315,_5316,::mosek::fusion::p_Var::reshape(_5317,_9403))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5311,_5312,_5313,_5314,_5315,_5316,_5317)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5319,    monty::rc_ptr< ::mosek::fusion::Matrix > _5320) { return mosek::fusion::p_Expr::dot(_5319,_5320); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5319,monty::rc_ptr< ::mosek::fusion::Matrix > _5320){
  long long _5321 = _5320->numNonzeros();
  if ((!_5320->isSparse()))
  {
    {
      std::vector<long long> _9405;
      for (long long _5322 = (int)0, _9406 = _5321; _5322 < _9406 ; ++_5322)
      {
        _9405.push_back(_5322);
      }
      auto _9407 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9405.size()),_9405.begin(),_9405.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5319,_9407,_5320->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5323 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5321)));
      _checked_ptr_1<int> _ptr__5323(_5323 ? _5323->raw() : nullptr,_5323 ? _5323->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5324 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5321)));
      _checked_ptr_1<int> _ptr__5324(_5324 ? _5324->raw() : nullptr,_5324 ? _5324->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5325 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5321)));
      _checked_ptr_1<double> _ptr__5325(_5325 ? _5325->raw() : nullptr,_5325 ? _5325->size(0) : 0);
      int _5326 = _5320->numColumns();
      _5320->getDataAsTriplets(_5323,_5324,_5325);
      std::vector<long long> _9408;
      for (int _5327 = (int)0, _9409 = (int)((_5323)->size(0)); _5327 < _9409 ; ++_5327)
      {
        _9408.push_back(safe_add( safe_mul( _ptr__5323[_5327],_5326 ),_ptr__5324[_5327] ));
      }
      auto _9410 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9408.size()),_9408.begin(),_9408.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5319,_9410,_5325)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5328,    std::shared_ptr< monty::ndarray< double,2 > > _5329) { return mosek::fusion::p_Expr::dot(_5328,_5329); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5328,std::shared_ptr< monty::ndarray< double,2 > > _5329){
  std::vector<long long> _9411;
  for (int _5330 = (int)0, _9412 = safe_mul( (int)((_5329)->size(0)),(int)((_5329)->size(1)) ); _5330 < _9412 ; ++_5330)
  {
    _9411.push_back(_5330);
  }
  auto _9413 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9411.size()),_9411.begin(),_9411.end()));
  std::vector<double> _9414;
  for (int _5331 = (int)0, _9415 = (int)((_5329)->size(0)); _5331 < _9415 ; ++_5331)
  {
    for (int _5332 = (int)0, _9416 = (int)((_5329)->size(1)); _5332 < _9416 ; ++_5332)
    {
      _9414.push_back(((*_5329)(_5331,_5332)));
    }
  }
  auto _9417 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9414.size()),_9414.begin(),_9414.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5328,_9413,_9417)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5333,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5334) { return mosek::fusion::p_Expr::dot(_5333,_5334); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5333,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5334){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5333,mosek::fusion::p_NDSparseArray::_get_impl(_5334)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5334)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5335,    std::shared_ptr< monty::ndarray< double,1 > > _5336) { return mosek::fusion::p_Expr::dot(_5335,_5336); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5335,std::shared_ptr< monty::ndarray< double,1 > > _5336){
  _checked_ptr_1<double> _ptr__5336(_5336 ? _5336->raw() : nullptr, _5336 ? _5336->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5337 = _5335->getShape();
  _checked_ptr_1<int> _ptr__5337(_5337 ? _5337->raw() : nullptr,_5337 ? _5337->size(0) : 0);
  if (((_5335->getSize() == (int)((_5336)->size(0))) && ((int)((_5337)->size(0)) > (int)1)))
  {
    {
      int _5338 = (int)0;
      int _9418 = (int)0;
      int _9419 = (int)((_5337)->size(0));
      for (int _5339 = _9418; _5339 < _9419; ++_5339)
      {
        {
          if ((_ptr__5337[_5339] > (int)1))
          {
            {
              ++ _5338;
            }
          }
          {}
        }
      }
      if ((_5338 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5340 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_5335->getSize())});
          _checked_ptr_1<int> _ptr__5340(_5340 ? _5340->raw() : nullptr,_5340 ? _5340->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5340,_5335)).as<::mosek::fusion::Expression>(),_5336)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5335,_5336)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5341,    monty::rc_ptr< ::mosek::fusion::Expression > _5342) { return mosek::fusion::p_Expr::dot(_5341,_5342); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _5341,monty::rc_ptr< ::mosek::fusion::Expression > _5342){
  return ::mosek::fusion::p_Expr::dot(_5342,_5341);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5343,    monty::rc_ptr< ::mosek::fusion::Expression > _5344) { return mosek::fusion::p_Expr::dot(_5343,_5344); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5343,monty::rc_ptr< ::mosek::fusion::Expression > _5344){
  return ::mosek::fusion::p_Expr::dot(_5344,_5343);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _5345,    monty::rc_ptr< ::mosek::fusion::Expression > _5346) { return mosek::fusion::p_Expr::dot(_5345,_5346); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _5345,monty::rc_ptr< ::mosek::fusion::Expression > _5346){
  return ::mosek::fusion::p_Expr::dot(_5346,_5345);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _5347,    monty::rc_ptr< ::mosek::fusion::Expression > _5348) { return mosek::fusion::p_Expr::dot(_5347,_5348); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _5347,monty::rc_ptr< ::mosek::fusion::Expression > _5348){
  _checked_ptr_1<double> _ptr__5347(_5347 ? _5347->raw() : nullptr, _5347 ? _5347->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_5348,_5347);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5349,    monty::rc_ptr< ::mosek::fusion::Expression > _5350) { return mosek::fusion::p_Expr::outer(_5349,_5350); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5349,monty::rc_ptr< ::mosek::fusion::Expression > _5350){
  _checked_ptr_1<double> _ptr__5349(_5349 ? _5349->raw() : nullptr, _5349 ? _5349->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5351 = _5350->getShape();
  _checked_ptr_1<int> _ptr__5351(_5351 ? _5351->raw() : nullptr,_5351 ? _5351->size(0) : 0);
  if (((int)((_5351)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  if ((_ptr__5351[(int)0] != (int)((_5349)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Argument lengths do not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5352 = _5350->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9420;
  for (int _5353 = (int)0, _9421 = (int)((_5349)->size(0)); _5353 < _9421 ; ++_5353)
  {
    _9420.push_back(_5353);
  }
  auto _9422 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9420.size()),_9420.begin(),_9420.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5352)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5352)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5352)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5352)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5352)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5352)->inst,_5349,_9422,(int)((_5349)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5354,    std::shared_ptr< monty::ndarray< double,1 > > _5355) { return mosek::fusion::p_Expr::outer(_5354,_5355); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _5354,std::shared_ptr< monty::ndarray< double,1 > > _5355){
  _checked_ptr_1<double> _ptr__5355(_5355 ? _5355->raw() : nullptr, _5355 ? _5355->size(0) : 0);
  if (((_5354->getND() != (int)1) || (_5354->getND() != (int)1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5356 = _5354->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9423;
  for (int _5357 = (int)0, _9424 = (int)((_5355)->size(0)); _5357 < _9424 ; ++_5357)
  {
    _9423.push_back(_5357);
  }
  auto _9425 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9423.size()),_9423.begin(),_9423.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5356)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5356)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5356)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5356)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5356)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5356)->inst,_5355,_9425,(int)((_5355)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5358,    monty::rc_ptr< ::mosek::fusion::Variable > _5359) { return mosek::fusion::p_Expr::outer(_5358,_5359); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _5358,monty::rc_ptr< ::mosek::fusion::Variable > _5359){
  std::shared_ptr< monty::ndarray< int,1 > > _5360 = _5359->getShape();
  _checked_ptr_1<int> _ptr__5360(_5360 ? _5360->raw() : nullptr,_5360 ? _5360->size(0) : 0);
  if ((!(((int)((_5360)->size(0)) == (int)1) || (((int)((_5360)->size(0)) == (int)2) && (_ptr__5360[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5358)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9426 = _5358;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9426.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5361 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9426.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5359,_ptr__5360[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5361)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5361)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5362 = _9426;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5363 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5362->numNonzeros())));
      _checked_ptr_1<double> _ptr__5363(_5363 ? _5363->raw() : nullptr,_5363 ? _5363->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5362->numNonzeros())));
      _checked_ptr_1<int> _ptr__5364(_5364 ? _5364->raw() : nullptr,_5364 ? _5364->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5365 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5362->numNonzeros())));
      _checked_ptr_1<int> _ptr__5365(_5365 ? _5365->raw() : nullptr,_5365 ? _5365->size(0) : 0);
      _5362->getDataAsTriplets(_5365,_5364,_5363);
      return ::mosek::fusion::p_Expr::outer_(_5359,_ptr__5360[(int)0],_5363,_5365,mosek::fusion::p_Matrix::_get_impl(_5362)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5366,    monty::rc_ptr< ::mosek::fusion::Matrix > _5367) { return mosek::fusion::p_Expr::outer(_5366,_5367); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5366,monty::rc_ptr< ::mosek::fusion::Matrix > _5367){
  std::shared_ptr< monty::ndarray< int,1 > > _5368 = _5366->getShape();
  _checked_ptr_1<int> _ptr__5368(_5368 ? _5368->raw() : nullptr,_5368 ? _5368->size(0) : 0);
  if ((!((_5366->getND() == (int)1) || ((_5366->getND() == (int)2) && (_ptr__5368[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5367)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9427 = _5367;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9427.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5369 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9427.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5366,_ptr__5368[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5369)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5369)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5370 = _9427;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5371 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5370->numNonzeros())));
      _checked_ptr_1<double> _ptr__5371(_5371 ? _5371->raw() : nullptr,_5371 ? _5371->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5372 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5370->numNonzeros())));
      _checked_ptr_1<int> _ptr__5372(_5372 ? _5372->raw() : nullptr,_5372 ? _5372->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5373 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5367->numNonzeros())));
      _checked_ptr_1<int> _ptr__5373(_5373 ? _5373->raw() : nullptr,_5373 ? _5373->size(0) : 0);
      _5370->getDataAsTriplets(_5373,_5372,_5371);
      return ::mosek::fusion::p_Expr::outer_(_5366,((*_5366->getShape())((int)0)),_5371,_5373,mosek::fusion::p_Matrix::_get_impl(_5370)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5374,    monty::rc_ptr< ::mosek::fusion::Variable > _5375) { return mosek::fusion::p_Expr::outer(_5374,_5375); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5374,monty::rc_ptr< ::mosek::fusion::Variable > _5375){
  _checked_ptr_1<double> _ptr__5374(_5374 ? _5374->raw() : nullptr, _5374 ? _5374->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5376 = _5375->getShape();
  _checked_ptr_1<int> _ptr__5376(_5376 ? _5376->raw() : nullptr,_5376 ? _5376->size(0) : 0);
  if ((!((_5375->getND() == (int)1) || ((_5375->getND() == (int)2) && (_ptr__5376[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5375,_ptr__5376[(int)0],_5374,nullptr,(int)((_5374)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5377,    std::shared_ptr< monty::ndarray< double,1 > > _5378) { return mosek::fusion::p_Expr::outer(_5377,_5378); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5377,std::shared_ptr< monty::ndarray< double,1 > > _5378){
  _checked_ptr_1<double> _ptr__5378(_5378 ? _5378->raw() : nullptr, _5378 ? _5378->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5379 = _5377->getShape();
  _checked_ptr_1<int> _ptr__5379(_5379 ? _5379->raw() : nullptr,_5379 ? _5379->size(0) : 0);
  if ((!((_5377->getND() == (int)1) || ((_5377->getND() == (int)2) && (_ptr__5379[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5377,_ptr__5379[(int)0],_5378,nullptr,(int)((_5378)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _5380,std::shared_ptr< monty::ndarray< long long,1 > > _5381,std::shared_ptr< monty::ndarray< long long,1 > > _5382,std::shared_ptr< monty::ndarray< double,1 > > _5383,std::shared_ptr< monty::ndarray< double,1 > > _5384,std::shared_ptr< monty::ndarray< long long,1 > > _5385,std::shared_ptr< monty::ndarray< double,1 > > _5386,std::shared_ptr< monty::ndarray< int,1 > > _5387,int _5388,bool _5389){
  _checked_ptr_1<long long> _ptr__5381(_5381 ? _5381->raw() : nullptr, _5381 ? _5381->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5382(_5382 ? _5382->raw() : nullptr, _5382 ? _5382->size(0) : 0);
  _checked_ptr_1<double> _ptr__5383(_5383 ? _5383->raw() : nullptr, _5383 ? _5383->size(0) : 0);
  _checked_ptr_1<double> _ptr__5384(_5384 ? _5384->raw() : nullptr, _5384 ? _5384->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5385(_5385 ? _5385->raw() : nullptr, _5385 ? _5385->size(0) : 0);
  _checked_ptr_1<double> _ptr__5386(_5386 ? _5386->raw() : nullptr, _5386 ? _5386->size(0) : 0);
  _checked_ptr_1<int> _ptr__5387(_5387 ? _5387->raw() : nullptr, _5387 ? _5387->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9428;
  bool _9429 = (!_5389);
  if (_9429)
  {
    _9428 = ::mosek::fusion::p_Set::make(_5380,_5388);
  }
  else
  {
    _9428 = ::mosek::fusion::p_Set::make(_5388,_5380);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5390 = _9428;
  _checked_ptr_1<int> _ptr__5390(_5390 ? _5390->raw() : nullptr,_5390 ? _5390->size(0) : 0);
  int _5391 = safe_mul( (int)((_5386)->size(0)),(int)((_5385)->size(0)) );
  int _5392 = safe_mul( (int)((_5386)->size(0)),(int)((_5382)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _5393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5391)));
  _checked_ptr_1<long long> _ptr__5393(_5393 ? _5393->raw() : nullptr,_5393 ? _5393->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9430;
  bool _9431 = (NULL != _5384.get());
  if (_9431)
  {
    _9430 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5391)));
  }
  else
  {
    _9430 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5394 = _9430;
  _checked_ptr_1<double> _ptr__5394(_5394 ? _5394->raw() : nullptr,_5394 ? _5394->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5395 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5392)));
  _checked_ptr_1<double> _ptr__5395(_5395 ? _5395->raw() : nullptr,_5395 ? _5395->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5396 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5392)));
  _checked_ptr_1<long long> _ptr__5396(_5396 ? _5396->raw() : nullptr,_5396 ? _5396->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5397 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5391,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5397(_5397 ? _5397->raw() : nullptr,_5397 ? _5397->size(0) : 0);
  int _5398 = (int)_ptr__5397[((int)((_5397)->size(0)) - (int)1)];
  if ((!_5389))
  {
    {
      long long _5399 = (long long)0;
      long long _5400 = (long long)0;
      int _9432 = (int)0;
      int _9433 = (int)((_5385)->size(0));
      for (int _5401 = _9432; _5401 < _9433; ++_5401)
      {
        {
          long long _5402 = (_ptr__5381[safe_add( _5401,(int)1 )] - _ptr__5381[_5401]);
          int _9434 = (int)0;
          int _9435 = (int)((_5386)->size(0));
          for (int _5403 = _9434; _5403 < _9435; ++_5403)
          {
            {
              _ptr__5385[_5399] = safe_add( safe_mul( _ptr__5385[_5401],_5388 ),_ptr__5387[_5403] );
              _ptr__5397[safe_add( _5399,(int)1 )] = safe_add( _ptr__5397[_5399],_5402 );
              ++ _5399;
              long long _9436 = _ptr__5381[_5401];
              long long _9437 = _ptr__5381[safe_add( _5401,(int)1 )];
              for (long long _5404 = _9436; _5404 < _9437; ++_5404)
              {
                {
                  _ptr__5396[_5400] = _ptr__5382[_5404];
                  _ptr__5395[_5400] = (_ptr__5383[_5404] * _ptr__5386[_5403]);
                  ++ _5400;
                }
              }
            }
          }
        }
      }
      if ((NULL != _5394.get()))
      {
        {
          int _5405 = (int)0;
          int _9438 = (int)0;
          int _9439 = (int)((_5385)->size(0));
          for (int _5406 = _9438; _5406 < _9439; ++_5406)
          {
            {
              int _9440 = (int)0;
              int _9441 = (int)((_5386)->size(0));
              for (int _5407 = _9440; _5407 < _9441; ++_5407)
              {
                {
                  _ptr__5394[_5405] = (_ptr__5386[_5407] * _ptr__5384[_5406]);
                  ++ _5405;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _5408 = (long long)0;
      long long _5409 = (long long)0;
      int _9442 = (int)0;
      int _9443 = (int)((_5386)->size(0));
      for (int _5410 = _9442; _5410 < _9443; ++_5410)
      {
        {
          double _5411 = _ptr__5386[_5410];
          ::mosek::fusion::Utils::Tools::arraycopy(_5382,(long long)((int)0),_5396,_5409,(long long)(_5398));
          int _9444 = (int)0;
          int _9445 = _5398;
          for (int _5412 = _9444; _5412 < _9445; ++_5412)
          {
            {
              _ptr__5395[safe_add( _5409,_5412 )] = (_ptr__5383[_5412] * _ptr__5386[_5410]);
            }
          }
          int _9446 = (int)0;
          int _9447 = (int)((_5385)->size(0));
          for (int _5413 = _9446; _5413 < _9447; ++_5413)
          {
            {
              long long _5414 = (_ptr__5381[safe_add( _5413,(int)1 )] - _ptr__5381[_5413]);
              _ptr__5385[_5408] = safe_add( safe_mul( _ptr__5385[_5413],_5388 ),_ptr__5387[_5410] );
              _ptr__5397[safe_add( _5408,(int)1 )] = safe_add( _ptr__5397[_5408],_5414 );
              ++ _5408;
            }
          }
          _5409 += _5398;
        }
      }
      if ((NULL != _5394.get()))
      {
        {
          int _5415 = (int)0;
          int _9448 = (int)0;
          int _9449 = (int)((_5386)->size(0));
          for (int _5416 = _9448; _5416 < _9449; ++_5416)
          {
            {
              double _5417 = _ptr__5386[_5416];
              int _9450 = (int)0;
              int _9451 = (int)((_5385)->size(0));
              for (int _5418 = _9450; _5418 < _9451; ++_5418)
              {
                {
                  _ptr__5394[_5415] = (_ptr__5384[_5418] * _5417);
                  ++ _5415;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5397,_5396,_5395,_5394,_5390,_5393)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _5419,int _5420,std::shared_ptr< monty::ndarray< double,1 > > _5421,std::shared_ptr< monty::ndarray< int,1 > > _5422,int _5423,bool _5424){
  _checked_ptr_1<double> _ptr__5421(_5421 ? _5421->raw() : nullptr, _5421 ? _5421->size(0) : 0);
  _checked_ptr_1<int> _ptr__5422(_5422 ? _5422->raw() : nullptr, _5422 ? _5422->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9452;
  bool _9453 = (!_5424);
  if (_9453)
  {
    _9452 = ::mosek::fusion::p_Set::make(_5420,_5423);
  }
  else
  {
    _9452 = ::mosek::fusion::p_Set::make(_5423,_5420);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5425 = _9452;
  _checked_ptr_1<int> _ptr__5425(_5425 ? _5425->raw() : nullptr,_5425 ? _5425->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9454;
  bool _9455 = (_5423 == (int)((_5421)->size(0)));
  if (_9455)
  {
    _9454 = nullptr;
  }
  else
  {
    _9454 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5421)->size(0)),_5420 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5426 = _9454;
  _checked_ptr_1<long long> _ptr__5426(_5426 ? _5426->raw() : nullptr,_5426 ? _5426->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5427 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5421)->size(0)),_5420 ))));
  _checked_ptr_1<double> _ptr__5427(_5427 ? _5427->raw() : nullptr,_5427 ? _5427->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5428 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5421)->size(0)),_5420 ))));
  _checked_ptr_1<double> _ptr__5428(_5428 ? _5428->raw() : nullptr,_5428 ? _5428->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5429 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5421)->size(0)),_5420 ))));
  _checked_ptr_1<long long> _ptr__5429(_5429 ? _5429->raw() : nullptr,_5429 ? _5429->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5430 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_5421)->size(0)),_5420 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__5430(_5430 ? _5430->raw() : nullptr,_5430 ? _5430->size(0) : 0);
  if ((_5423 == (int)((_5421)->size(0))))
  {
    {
      long long _5431 = (long long)0;
      if ((!_5424))
      {
        {
          int _9456 = (int)0;
          int _9457 = _5420;
          for (int _5432 = _9456; _5432 < _9457; ++_5432)
          {
            {
              int _9458 = (int)0;
              int _9459 = _5423;
              for (int _5433 = _9458; _5433 < _9459; ++_5433)
              {
                {
                  _ptr__5430[safe_add( _5431,(int)1 )] = safe_add( _5431,(int)1 );
                  _ptr__5429[_5431] = (long long)_5432;
                  _ptr__5428[_5431] = _ptr__5421[_5433];
                  ++ _5431;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9460 = (int)0;
          int _9461 = _5423;
          for (int _5434 = _9460; _5434 < _9461; ++_5434)
          {
            {
              int _9462 = (int)0;
              int _9463 = _5420;
              for (int _5435 = _9462; _5435 < _9463; ++_5435)
              {
                {
                  _ptr__5430[safe_add( _5431,(int)1 )] = safe_add( _5431,(int)1 );
                  _ptr__5429[_5431] = (long long)_5435;
                  _ptr__5428[_5431] = _ptr__5421[_5434];
                  ++ _5431;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _5436 = (long long)0;
      if ((!_5424))
      {
        {
          int _9464 = (int)0;
          int _9465 = _5420;
          for (int _5437 = _9464; _5437 < _9465; ++_5437)
          {
            {
              int _9466 = (int)0;
              int _9467 = (int)((_5421)->size(0));
              for (int _5438 = _9466; _5438 < _9467; ++_5438)
              {
                {
                  _ptr__5430[safe_add( _5436,(int)1 )] = safe_add( _5436,(int)1 );
                  _ptr__5429[_5436] = (long long)_5437;
                  _ptr__5428[_5436] = _ptr__5421[_5438];
                  _ptr__5426[_5436] = safe_add( safe_mul( _5437,_5423 ),_ptr__5422[_5438] );
                  ++ _5436;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9468 = (int)0;
          int _9469 = (int)((_5421)->size(0));
          for (int _5439 = _9468; _5439 < _9469; ++_5439)
          {
            {
              int _9470 = (int)0;
              int _9471 = _5420;
              for (int _5440 = _9470; _5440 < _9471; ++_5440)
              {
                {
                  _ptr__5430[safe_add( _5436,(int)1 )] = safe_add( _5436,(int)1 );
                  _ptr__5429[_5436] = (long long)_5440;
                  _ptr__5428[_5436] = _ptr__5421[_5439];
                  _ptr__5426[_5436] = safe_add( safe_mul( _ptr__5422[_5439],_5420 ),_5440 );
                  ++ _5436;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5430,_5429,_5428,_5427,_5425,_5426)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5441) { return mosek::fusion::p_Expr::stack(_5441); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5441){
  if ((NULL == _5441.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9472 = (int)0;
  int _9473 = (int)((_5441)->size(0));
  for (int _5442 = _9472; _5442 < _9473; ++_5442)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5443 = ((*_5441)(_5442));
      if ((NULL == _5443.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _9474 = (int)0;
      int _9475 = (int)((_5443)->size(0));
      for (int _5444 = _9474; _5444 < _9475; ++_5444)
      {
        {
          if ((NULL == ((*_5443)(_5444)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9476;
  for (int _5446 = (int)0, _9477 = (int)((_5441)->size(0)); _5446 < _9477 ; ++_5446)
  {
    _9476.push_back(::mosek::fusion::p_Expr::stack_(((*_5441)(_5446)),(int)1));
  }
  auto _9478 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9476.size()),_9476.begin(),_9476.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5445 = _9478;
  return ::mosek::fusion::p_Expr::stack_(_5445,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5447,    double _5448,    double _5449) { return mosek::fusion::p_Expr::vstack(_5447,_5448,_5449); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5447,double _5448,double _5449){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5447).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5448).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5449).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5450,    double _5451,    monty::rc_ptr< ::mosek::fusion::Expression > _5452) { return mosek::fusion::p_Expr::vstack(_5450,_5451,_5452); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5450,double _5451,monty::rc_ptr< ::mosek::fusion::Expression > _5452){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5450).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5451).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5452.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5453,    monty::rc_ptr< ::mosek::fusion::Expression > _5454,    double _5455) { return mosek::fusion::p_Expr::vstack(_5453,_5454,_5455); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5453,monty::rc_ptr< ::mosek::fusion::Expression > _5454,double _5455){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5453).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5454.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5455).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5456,    monty::rc_ptr< ::mosek::fusion::Expression > _5457,    monty::rc_ptr< ::mosek::fusion::Expression > _5458) { return mosek::fusion::p_Expr::vstack(_5456,_5457,_5458); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5456,monty::rc_ptr< ::mosek::fusion::Expression > _5457,monty::rc_ptr< ::mosek::fusion::Expression > _5458){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5456).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5457.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5458.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5459,    double _5460,    double _5461) { return mosek::fusion::p_Expr::vstack(_5459,_5460,_5461); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5459,double _5460,double _5461){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5459.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5460).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5461).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5462,    double _5463,    monty::rc_ptr< ::mosek::fusion::Expression > _5464) { return mosek::fusion::p_Expr::vstack(_5462,_5463,_5464); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5462,double _5463,monty::rc_ptr< ::mosek::fusion::Expression > _5464){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5462.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5463).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5464.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5465,    monty::rc_ptr< ::mosek::fusion::Expression > _5466,    double _5467) { return mosek::fusion::p_Expr::vstack(_5465,_5466,_5467); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5465,monty::rc_ptr< ::mosek::fusion::Expression > _5466,double _5467){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5465.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5466.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5467).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5468,    monty::rc_ptr< ::mosek::fusion::Expression > _5469,    monty::rc_ptr< ::mosek::fusion::Expression > _5470) { return mosek::fusion::p_Expr::vstack(_5468,_5469,_5470); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5468,monty::rc_ptr< ::mosek::fusion::Expression > _5469,monty::rc_ptr< ::mosek::fusion::Expression > _5470){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5468.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5469.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5470.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5471,    monty::rc_ptr< ::mosek::fusion::Expression > _5472) { return mosek::fusion::p_Expr::vstack(_5471,_5472); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5471,monty::rc_ptr< ::mosek::fusion::Expression > _5472){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5471).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5472.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5473,    double _5474) { return mosek::fusion::p_Expr::vstack(_5473,_5474); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5473,double _5474){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5473.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5474).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5475,    monty::rc_ptr< ::mosek::fusion::Expression > _5476) { return mosek::fusion::p_Expr::vstack(_5475,_5476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5475,monty::rc_ptr< ::mosek::fusion::Expression > _5476){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5475.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5476.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5477) { return mosek::fusion::p_Expr::vstack(_5477); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5477){
  if ((NULL == _5477.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9479 = (int)0;
  int _9480 = (int)((_5477)->size(0));
  for (int _5478 = _9479; _5478 < _9480; ++_5478)
  {
    {
      if ((NULL == ((*_5477)(_5478)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5477,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5479,    monty::rc_ptr< ::mosek::fusion::Expression > _5480,    monty::rc_ptr< ::mosek::fusion::Expression > _5481) { return mosek::fusion::p_Expr::hstack(_5479,_5480,_5481); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5479,monty::rc_ptr< ::mosek::fusion::Expression > _5480,monty::rc_ptr< ::mosek::fusion::Expression > _5481){
  if (((NULL == _5479.get()) || ((NULL == _5480.get()) || (NULL == _5481.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5479.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5480.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5481.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5482,    monty::rc_ptr< ::mosek::fusion::Expression > _5483,    double _5484) { return mosek::fusion::p_Expr::hstack(_5482,_5483,_5484); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5482,monty::rc_ptr< ::mosek::fusion::Expression > _5483,double _5484){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5482.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5483.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5484).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5485,    double _5486,    monty::rc_ptr< ::mosek::fusion::Expression > _5487) { return mosek::fusion::p_Expr::hstack(_5485,_5486,_5487); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5485,double _5486,monty::rc_ptr< ::mosek::fusion::Expression > _5487){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5485.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5486).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5487.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5488,    double _5489,    double _5490) { return mosek::fusion::p_Expr::hstack(_5488,_5489,_5490); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5488,double _5489,double _5490){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5488.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5489).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5490).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5491,    monty::rc_ptr< ::mosek::fusion::Expression > _5492,    monty::rc_ptr< ::mosek::fusion::Expression > _5493) { return mosek::fusion::p_Expr::hstack(_5491,_5492,_5493); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5491,monty::rc_ptr< ::mosek::fusion::Expression > _5492,monty::rc_ptr< ::mosek::fusion::Expression > _5493){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5491).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5492.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5493.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5494,    monty::rc_ptr< ::mosek::fusion::Expression > _5495,    double _5496) { return mosek::fusion::p_Expr::hstack(_5494,_5495,_5496); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5494,monty::rc_ptr< ::mosek::fusion::Expression > _5495,double _5496){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5494).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5495.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5496).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5497,    double _5498,    monty::rc_ptr< ::mosek::fusion::Expression > _5499) { return mosek::fusion::p_Expr::hstack(_5497,_5498,_5499); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5497,double _5498,monty::rc_ptr< ::mosek::fusion::Expression > _5499){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5497).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5498).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5499.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5500,    monty::rc_ptr< ::mosek::fusion::Expression > _5501) { return mosek::fusion::p_Expr::hstack(_5500,_5501); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5500,monty::rc_ptr< ::mosek::fusion::Expression > _5501){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5500).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5501.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5502,    double _5503) { return mosek::fusion::p_Expr::hstack(_5502,_5503); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5502,double _5503){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5502.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5503).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5504,    monty::rc_ptr< ::mosek::fusion::Expression > _5505) { return mosek::fusion::p_Expr::hstack(_5504,_5505); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5504,monty::rc_ptr< ::mosek::fusion::Expression > _5505){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5504.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5505.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5506) { return mosek::fusion::p_Expr::hstack(_5506); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5506){
  if ((NULL == _5506.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9481 = (int)0;
  int _9482 = (int)((_5506)->size(0));
  for (int _5507 = _9481; _5507 < _9482; ++_5507)
  {
    {
      if ((NULL == ((*_5506)(_5507)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5506,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5508,    monty::rc_ptr< ::mosek::fusion::Expression > _5509,    monty::rc_ptr< ::mosek::fusion::Expression > _5510,    monty::rc_ptr< ::mosek::fusion::Expression > _5511) { return mosek::fusion::p_Expr::stack(_5508,_5509,_5510,_5511); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5508,monty::rc_ptr< ::mosek::fusion::Expression > _5509,monty::rc_ptr< ::mosek::fusion::Expression > _5510,monty::rc_ptr< ::mosek::fusion::Expression > _5511){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5509.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5510.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5511.get())}),_5508);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5512,    monty::rc_ptr< ::mosek::fusion::Expression > _5513,    monty::rc_ptr< ::mosek::fusion::Expression > _5514,    double _5515) { return mosek::fusion::p_Expr::stack(_5512,_5513,_5514,_5515); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5512,monty::rc_ptr< ::mosek::fusion::Expression > _5513,monty::rc_ptr< ::mosek::fusion::Expression > _5514,double _5515){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5513.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5514.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5515).get())}),_5512);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5516,    monty::rc_ptr< ::mosek::fusion::Expression > _5517,    double _5518,    monty::rc_ptr< ::mosek::fusion::Expression > _5519) { return mosek::fusion::p_Expr::stack(_5516,_5517,_5518,_5519); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5516,monty::rc_ptr< ::mosek::fusion::Expression > _5517,double _5518,monty::rc_ptr< ::mosek::fusion::Expression > _5519){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5517.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5518).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5519.get())}),_5516);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5520,    monty::rc_ptr< ::mosek::fusion::Expression > _5521,    double _5522,    double _5523) { return mosek::fusion::p_Expr::stack(_5520,_5521,_5522,_5523); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5520,monty::rc_ptr< ::mosek::fusion::Expression > _5521,double _5522,double _5523){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5521.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5522).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5523).get())}),_5520);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5524,    double _5525,    monty::rc_ptr< ::mosek::fusion::Expression > _5526,    monty::rc_ptr< ::mosek::fusion::Expression > _5527) { return mosek::fusion::p_Expr::stack(_5524,_5525,_5526,_5527); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5524,double _5525,monty::rc_ptr< ::mosek::fusion::Expression > _5526,monty::rc_ptr< ::mosek::fusion::Expression > _5527){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5525).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5526.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5527.get())}),_5524);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5528,    double _5529,    monty::rc_ptr< ::mosek::fusion::Expression > _5530,    double _5531) { return mosek::fusion::p_Expr::stack(_5528,_5529,_5530,_5531); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5528,double _5529,monty::rc_ptr< ::mosek::fusion::Expression > _5530,double _5531){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5529).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5530.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5531).get())}),_5528);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5532,    double _5533,    double _5534,    monty::rc_ptr< ::mosek::fusion::Expression > _5535) { return mosek::fusion::p_Expr::stack(_5532,_5533,_5534,_5535); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5532,double _5533,double _5534,monty::rc_ptr< ::mosek::fusion::Expression > _5535){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5533).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5534).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5535.get())}),_5532);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5536,    double _5537,    monty::rc_ptr< ::mosek::fusion::Expression > _5538) { return mosek::fusion::p_Expr::stack(_5536,_5537,_5538); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5536,double _5537,monty::rc_ptr< ::mosek::fusion::Expression > _5538){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5537).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5538.get())}),_5536);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5539,    monty::rc_ptr< ::mosek::fusion::Expression > _5540,    double _5541) { return mosek::fusion::p_Expr::stack(_5539,_5540,_5541); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5539,monty::rc_ptr< ::mosek::fusion::Expression > _5540,double _5541){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5540.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5541).get())}),_5539);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5542,    monty::rc_ptr< ::mosek::fusion::Expression > _5543,    monty::rc_ptr< ::mosek::fusion::Expression > _5544) { return mosek::fusion::p_Expr::stack(_5542,_5543,_5544); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5542,monty::rc_ptr< ::mosek::fusion::Expression > _5543,monty::rc_ptr< ::mosek::fusion::Expression > _5544){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5543.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5544.get())}),_5542);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5545,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5546) { return mosek::fusion::p_Expr::stack(_5545,_5546); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5545,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5546){
  return ::mosek::fusion::p_Expr::stack_(_5546,_5545);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5547,int _5548){
  if (((int)((_5547)->size(0)) == (int)1))
  {
    {
      return ((*_5547)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_5547,_5548),_5548)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5549,int _5550){
  int _5551 = (int)((_5549)->size(0));
  std::vector<int> _9483;
  for (int _5553 = (int)0, _9484 = _5551; _5553 < _9484 ; ++_5553)
  {
    _9483.push_back(((*_5549)(_5553))->getND());
  }
  auto _9485 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9483.size()),_9483.begin(),_9483.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5552 = _9485;
  _checked_ptr_1<int> _ptr__5552(_5552 ? _5552->raw() : nullptr,_5552 ? _5552->size(0) : 0);
  int _5554 = _ptr__5552[(int)0];
  int _5555 = _ptr__5552[(int)0];
  int _9486 = (int)1;
  int _9487 = _5551;
  for (int _5556 = _9486; _5556 < _9487; ++_5556)
  {
    {
      if ((_ptr__5552[_5556] < _5555))
      {
        {
          _5555 = _ptr__5552[_5556];
        }
      }
      {}
      if ((_ptr__5552[_5556] > _5554))
      {
        {
          _5554 = _ptr__5552[_5556];
        }
      }
      {}
    }
  }
  if ((_5554 < _5550))
  {
    {
      _5554 = _5550;
    }
  }
  {}
  if ((_5555 < _5554))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5557 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_5551)));
      std::shared_ptr< monty::ndarray< int,1 > > _5558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5554)));
      _checked_ptr_1<int> _ptr__5558(_5558 ? _5558->raw() : nullptr,_5558 ? _5558->size(0) : 0);
      int _9488 = (int)0;
      int _9489 = _5551;
      for (int _5559 = _9488; _5559 < _9489; ++_5559)
      {
        {
          if ((((*_5549)(_5559))->getND() == _5554))
          {
            {
              ((*_5557)(_5559)) = ((*_5549)(_5559));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _5560 = ((*_5549)(_5559))->getShape();
              _checked_ptr_1<int> _ptr__5560(_5560 ? _5560->raw() : nullptr,_5560 ? _5560->size(0) : 0);
              int _9490 = (int)0;
              int _9491 = (int)((_5560)->size(0));
              for (int _5561 = _9490; _5561 < _9491; ++_5561)
              {
                {
                  _ptr__5558[_5561] = _ptr__5560[_5561];
                }
              }
              int _9492 = (int)((_5560)->size(0));
              int _9493 = _5554;
              for (int _5562 = _9492; _5562 < _9493; ++_5562)
              {
                {
                  _ptr__5558[_5562] = (int)1;
                }
              }
              ((*_5557)(_5559)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5558,((*_5549)(_5559)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _5557;
    }
  }
  else
  {
    {
      return _5549;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _5563,    int _5564,    int _5565) { return mosek::fusion::p_Expr::repeat(_5563,_5564,_5565); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _5563,int _5564,int _5565){
  if ((_5564 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9494;
  for (int _5566 = (int)0, _9495 = _5564; _5566 < _9495 ; ++_5566)
  {
    _9494.push_back(_5563);
  }
  auto _9496 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9494.size()),_9494.begin(),_9494.end()));
  return ::mosek::fusion::p_Expr::stack_(_9496,_5565);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5567) { return mosek::fusion::p_Expr::add(_5567); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5567){
  std::vector<double> _9497;
  for (int _5568 = (int)0, _9498 = (int)((_5567)->size(0)); _5568 < _9498 ; ++_5568)
  {
    _9497.push_back(1.0);
  }
  auto _9499 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9497.size()),_9497.begin(),_9497.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_5567,_9499)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5569) { return mosek::fusion::p_Expr::add(_5569); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5569){
  if ((NULL == _5569.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_5569)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5569)->size(0)) > (int)0) && (NULL == ((*_5569)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _5570 = ((*_5569)((int)0))->getND();
  int _9500 = (int)1;
  int _9501 = (int)((_5569)->size(0));
  for (int _5571 = _9500; _5571 < _9501; ++_5571)
  {
    {
      if ((_5570 < ((*_5569)(_5571))->getND()))
      {
        {
          _5570 = ((*_5569)(_5571))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _5572 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_5569)->size(0)),_5570)));
  int _9502 = (int)0;
  int _9503 = (int)((_5569)->size(0));
  for (int _5573 = _9502; _5573 < _9503; ++_5573)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5574 = ((*_5569)(_5573))->getShape();
      _checked_ptr_1<int> _ptr__5574(_5574 ? _5574->raw() : nullptr,_5574 ? _5574->size(0) : 0);
      int _9504 = (int)0;
      int _9505 = (int)((_5574)->size(0));
      for (int _5575 = _9504; _5575 < _9505; ++_5575)
      {
        {
          ((*_5572)(_5573,_5575)) = _ptr__5574[_5575];
        }
      }
      int _9506 = (int)((_5574)->size(0));
      int _9507 = _5570;
      for (int _5576 = _9506; _5576 < _9507; ++_5576)
      {
        {
          ((*_5572)(_5573,_5576)) = (int)1;
        }
      }
    }
  }
  int _9508 = (int)1;
  int _9509 = (int)((_5569)->size(0));
  for (int _5577 = _9508; _5577 < _9509; ++_5577)
  {
    {
      int _9510 = (int)0;
      int _9511 = _5570;
      for (int _5578 = _9510; _5578 < _9511; ++_5578)
      {
        {
          if ((((*_5572)((int)0,_5578)) != ((*_5572)(_5577,_5578))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _9512;
  for (int _5580 = (int)0, _9513 = _5570; _5580 < _9513 ; ++_5580)
  {
    _9512.push_back(((*_5572)((int)0,_5580)));
  }
  auto _9514 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9512.size()),_9512.begin(),_9512.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5579 = _9514;
  _checked_ptr_1<int> _ptr__5579(_5579 ? _5579->raw() : nullptr,_5579 ? _5579->size(0) : 0);
  int _5581 = (int)1;
  int _9515 = (int)0;
  int _9516 = _5570;
  for (int _5582 = _9515; _5582 < _9516; ++_5582)
  {
    {
      _5581 *= _ptr__5579[_5582];
    }
  }
  int _5583 = (int)0;
  int _5584 = (int)0;
  int _9517 = (int)0;
  int _9518 = (int)((_5569)->size(0));
  for (int _5585 = _9517; _5585 < _9518; ++_5585)
  {
    {
      int _5586 = ((*_5569)(_5585))->numInst();
      _5583 += _5586;
      int _9519;
      bool _9520 = (_5584 > _5586);
      if (_9520)
      {
        _9519 = _5584;
      }
      else
      {
        _9519 = _5586;
      }
      _5584 = _9519;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5587 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5581,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5587(_5587 ? _5587->raw() : nullptr,_5587 ? _5587->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5588 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5583)));
  _checked_ptr_1<long long> _ptr__5588(_5588 ? _5588->raw() : nullptr,_5588 ? _5588->size(0) : 0);
  std::vector<double> _9521;
  for (int _5590 = (int)0, _9522 = _5583; _5590 < _9522 ; ++_5590)
  {
    _9521.push_back(1.0);
  }
  auto _9523 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9521.size()),_9521.begin(),_9521.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5589 = _9523;
  _checked_ptr_1<double> _ptr__5589(_5589 ? _5589->raw() : nullptr,_5589 ? _5589->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _5591 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5584)));
    _checked_ptr_1<long long> _ptr__5591(_5591 ? _5591->raw() : nullptr,_5591 ? _5591->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5592 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5584)));
    _checked_ptr_1<long long> _ptr__5592(_5592 ? _5592->raw() : nullptr,_5592 ? _5592->size(0) : 0);
    int _9524 = (int)0;
    int _9525 = (int)((_5569)->size(0));
    for (int _5593 = _9524; _5593 < _9525; ++_5593)
    {
      {
        int _5594 = ((*_5569)(_5593))->inst((int)0,_5591,(int)0,_5592);
        int _9526 = (int)0;
        int _9527 = _5594;
        for (int _5595 = _9526; _5595 < _9527; ++_5595)
        {
          {
            _ptr__5587[safe_add( _ptr__5591[_5595],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _9528 = (int)0;
    int _9529 = _5581;
    for (int _5596 = _9528; _5596 < _9529; ++_5596)
    {
      {
        _ptr__5587[safe_add( _5596,(int)1 )] += _ptr__5587[_5596];
      }
    }
    int _9530 = (int)0;
    int _9531 = (int)((_5569)->size(0));
    for (int _5597 = _9530; _5597 < _9531; ++_5597)
    {
      {
        int _5598 = ((*_5569)(_5597))->inst((int)0,_5591,(int)0,_5592);
        int _9532 = (int)0;
        int _9533 = _5598;
        for (int _5599 = _9532; _5599 < _9533; ++_5599)
        {
          {
            _ptr__5588[_ptr__5587[_ptr__5591[_5599]]] = _ptr__5592[_5599];
            ++ _ptr__5587[_ptr__5591[_5599]];
          }
        }
      }
    }
    int _9534 = (int)0;
    int _9535 = _5581;
    for (int _5600 = _9534; _5600 < _9535; ++_5600)
    {
      {
        _ptr__5587[(_5581 - _5600)] = _ptr__5587[((_5581 - _5600) - (int)1)];
      }
    }
    _ptr__5587[(int)0] = (int)0;
  }
  std::vector<double> _9536;
  for (int _5601 = (int)0, _9537 = _5581; _5601 < _9537 ; ++_5601)
  {
    _9536.push_back(0.0);
  }
  auto _9538 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9536.size()),_9536.begin(),_9536.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_5587,_5588,_5589,_9538,_5579,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _5602,double _5603,monty::rc_ptr< ::mosek::fusion::Expression > _5604,double _5605){
  int _5606 = _5602->getND();
  int _5607 = _5604->getND();
  if ((_5606 == _5607))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5602,_5604,_5603,_5605)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _9539;
      bool _9540 = (_5606 > _5607);
      if (_9540)
      {
        _9539 = _5606;
      }
      else
      {
        _9539 = _5607;
      }
      int _5608 = _9539;
      std::shared_ptr< monty::ndarray< int,1 > > _5609 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5608)));
      _checked_ptr_1<int> _ptr__5609(_5609 ? _5609->raw() : nullptr,_5609 ? _5609->size(0) : 0);
      if ((_5606 < _5607))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5610 = _5602->getShape();
          _checked_ptr_1<int> _ptr__5610(_5610 ? _5610->raw() : nullptr,_5610 ? _5610->size(0) : 0);
          int _9541 = (int)0;
          int _9542 = _5606;
          for (int _5611 = _9541; _5611 < _9542; ++_5611)
          {
            {
              _ptr__5609[_5611] = _ptr__5610[_5611];
            }
          }
          int _9543 = _5606;
          int _9544 = _5608;
          for (int _5612 = _9543; _5612 < _9544; ++_5612)
          {
            {
              _ptr__5609[_5612] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5609,_5602)).as<::mosek::fusion::Expression>(),_5604,_5603,_5605)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5613 = _5604->getShape();
          _checked_ptr_1<int> _ptr__5613(_5613 ? _5613->raw() : nullptr,_5613 ? _5613->size(0) : 0);
          int _9545 = (int)0;
          int _9546 = _5607;
          for (int _5614 = _9545; _5614 < _9546; ++_5614)
          {
            {
              _ptr__5609[_5614] = _ptr__5613[_5614];
            }
          }
          int _9547 = _5607;
          int _9548 = _5608;
          for (int _5615 = _9547; _5615 < _9548; ++_5615)
          {
            {
              _ptr__5609[_5615] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5602,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5609,_5604)).as<::mosek::fusion::Expression>(),_5603,_5605)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _5616) { return mosek::fusion::p_Expr::transpose(_5616); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _5616){
  if ((_5616->getND() == (int)0))
  {
    {
      return _5616;
    }
  }
  else if((_5616->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5616->getDim((int)0))}),_5616)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5616->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_5616)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5617,    monty::rc_ptr< ::mosek::fusion::Expression > _5618) { return mosek::fusion::p_Expr::mulElm(_5617,_5618); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _5617,monty::rc_ptr< ::mosek::fusion::Expression > _5618){
  return ::mosek::fusion::p_Expr::mulElm_(_5617,_5618);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5619,    monty::rc_ptr< ::mosek::fusion::Expression > _5620) { return mosek::fusion::p_Expr::mulElm(_5619,_5620); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5619,monty::rc_ptr< ::mosek::fusion::Expression > _5620){
  return ::mosek::fusion::p_Expr::mulElm_(_5619,_5620);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _5621,    monty::rc_ptr< ::mosek::fusion::Expression > _5622) { return mosek::fusion::p_Expr::mulElm(_5621,_5622); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _5621,monty::rc_ptr< ::mosek::fusion::Expression > _5622){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5621),_5622);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _5623,    monty::rc_ptr< ::mosek::fusion::Expression > _5624) { return mosek::fusion::p_Expr::mulElm(_5623,_5624); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _5623,monty::rc_ptr< ::mosek::fusion::Expression > _5624){
  _checked_ptr_1<double> _ptr__5623(_5623 ? _5623->raw() : nullptr, _5623 ? _5623->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5623,_5624);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5625,    monty::rc_ptr< ::mosek::fusion::Matrix > _5626) { return mosek::fusion::p_Expr::mulElm(_5625,_5626); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5625,monty::rc_ptr< ::mosek::fusion::Matrix > _5626){
  return ::mosek::fusion::p_Expr::mulElm_(_5626,_5625);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5627,    std::shared_ptr< monty::ndarray< double,2 > > _5628) { return mosek::fusion::p_Expr::mulElm(_5627,_5628); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5627,std::shared_ptr< monty::ndarray< double,2 > > _5628){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5628),_5627);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5629,    std::shared_ptr< monty::ndarray< double,1 > > _5630) { return mosek::fusion::p_Expr::mulElm(_5629,_5630); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5629,std::shared_ptr< monty::ndarray< double,1 > > _5630){
  _checked_ptr_1<double> _ptr__5630(_5630 ? _5630->raw() : nullptr, _5630 ? _5630->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5630,_5629);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5631,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5632) { return mosek::fusion::p_Expr::mulElm(_5631,_5632); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5631,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5632){
  return ::mosek::fusion::p_Expr::mulElm_(_5632,_5631);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5633,    monty::rc_ptr< ::mosek::fusion::Expression > _5634) { return mosek::fusion::p_Expr::sub(_5633,_5634); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5633,monty::rc_ptr< ::mosek::fusion::Expression > _5634){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5633),1.0,_5634,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5635,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5636) { return mosek::fusion::p_Expr::sub(_5635,_5636); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5635,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5636){
  return ::mosek::fusion::p_Expr::add_(_5635,1.0,::mosek::fusion::p_Expr::constTerm(_5636),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5637,    monty::rc_ptr< ::mosek::fusion::Expression > _5638) { return mosek::fusion::p_Expr::sub(_5637,_5638); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _5637,monty::rc_ptr< ::mosek::fusion::Expression > _5638){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5637),1.0,_5638,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5639,    monty::rc_ptr< ::mosek::fusion::Matrix > _5640) { return mosek::fusion::p_Expr::sub(_5639,_5640); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5639,monty::rc_ptr< ::mosek::fusion::Matrix > _5640){
  return ::mosek::fusion::p_Expr::add_(_5639,1.0,::mosek::fusion::p_Expr::constTerm(_5640),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _5641,    monty::rc_ptr< ::mosek::fusion::Expression > _5642) { return mosek::fusion::p_Expr::sub(_5641,_5642); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _5641,monty::rc_ptr< ::mosek::fusion::Expression > _5642){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5642->getShape(),_5641),1.0,_5642,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5643,    double _5644) { return mosek::fusion::p_Expr::sub(_5643,_5644); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5643,double _5644){
  return ::mosek::fusion::p_Expr::add_(_5643,1.0,::mosek::fusion::p_Expr::constTerm(_5643->getShape(),_5644),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _5645,    monty::rc_ptr< ::mosek::fusion::Expression > _5646) { return mosek::fusion::p_Expr::sub(_5645,_5646); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _5645,monty::rc_ptr< ::mosek::fusion::Expression > _5646){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5645),1.0,_5646,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _5647,    monty::rc_ptr< ::mosek::fusion::Expression > _5648) { return mosek::fusion::p_Expr::sub(_5647,_5648); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _5647,monty::rc_ptr< ::mosek::fusion::Expression > _5648){
  _checked_ptr_1<double> _ptr__5647(_5647 ? _5647->raw() : nullptr, _5647 ? _5647->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5647),1.0,_5648,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5649,    std::shared_ptr< monty::ndarray< double,2 > > _5650) { return mosek::fusion::p_Expr::sub(_5649,_5650); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5649,std::shared_ptr< monty::ndarray< double,2 > > _5650){
  return ::mosek::fusion::p_Expr::add_(_5649,1.0,::mosek::fusion::p_Expr::constTerm(_5650),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5651,    std::shared_ptr< monty::ndarray< double,1 > > _5652) { return mosek::fusion::p_Expr::sub(_5651,_5652); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5651,std::shared_ptr< monty::ndarray< double,1 > > _5652){
  _checked_ptr_1<double> _ptr__5652(_5652 ? _5652->raw() : nullptr, _5652 ? _5652->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5651,1.0,::mosek::fusion::p_Expr::constTerm(_5652),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5653,    monty::rc_ptr< ::mosek::fusion::Expression > _5654) { return mosek::fusion::p_Expr::sub(_5653,_5654); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5653,monty::rc_ptr< ::mosek::fusion::Expression > _5654){
  return ::mosek::fusion::p_Expr::add_(_5653,1.0,_5654,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5655,    monty::rc_ptr< ::mosek::fusion::Expression > _5656) { return mosek::fusion::p_Expr::add(_5655,_5656); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5655,monty::rc_ptr< ::mosek::fusion::Expression > _5656){
  return ::mosek::fusion::p_Expr::add_(_5656,1.0,::mosek::fusion::p_Expr::constTerm(_5655),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5657,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5658) { return mosek::fusion::p_Expr::add(_5657,_5658); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5657,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5658){
  return ::mosek::fusion::p_Expr::add_(_5657,1.0,::mosek::fusion::p_Expr::constTerm(_5658),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5659,    monty::rc_ptr< ::mosek::fusion::Expression > _5660) { return mosek::fusion::p_Expr::add(_5659,_5660); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _5659,monty::rc_ptr< ::mosek::fusion::Expression > _5660){
  return ::mosek::fusion::p_Expr::add_(_5660,1.0,::mosek::fusion::p_Expr::constTerm(_5659),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5661,    monty::rc_ptr< ::mosek::fusion::Matrix > _5662) { return mosek::fusion::p_Expr::add(_5661,_5662); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5661,monty::rc_ptr< ::mosek::fusion::Matrix > _5662){
  return ::mosek::fusion::p_Expr::add_(_5661,1.0,::mosek::fusion::p_Expr::constTerm(_5662),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _5663,    monty::rc_ptr< ::mosek::fusion::Expression > _5664) { return mosek::fusion::p_Expr::add(_5663,_5664); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _5663,monty::rc_ptr< ::mosek::fusion::Expression > _5664){
  return ::mosek::fusion::p_Expr::add_(_5664,1.0,::mosek::fusion::p_Expr::constTerm(_5664->getShape(),_5663),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5665,    double _5666) { return mosek::fusion::p_Expr::add(_5665,_5666); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5665,double _5666){
  return ::mosek::fusion::p_Expr::add_(_5665,1.0,::mosek::fusion::p_Expr::constTerm(_5665->getShape(),_5666),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _5667,    monty::rc_ptr< ::mosek::fusion::Expression > _5668) { return mosek::fusion::p_Expr::add(_5667,_5668); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _5667,monty::rc_ptr< ::mosek::fusion::Expression > _5668){
  return ::mosek::fusion::p_Expr::add_(_5668,1.0,::mosek::fusion::p_Expr::constTerm(_5667),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _5669,    monty::rc_ptr< ::mosek::fusion::Expression > _5670) { return mosek::fusion::p_Expr::add(_5669,_5670); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _5669,monty::rc_ptr< ::mosek::fusion::Expression > _5670){
  _checked_ptr_1<double> _ptr__5669(_5669 ? _5669->raw() : nullptr, _5669 ? _5669->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5670,1.0,::mosek::fusion::p_Expr::constTerm(_5669),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5671,    std::shared_ptr< monty::ndarray< double,2 > > _5672) { return mosek::fusion::p_Expr::add(_5671,_5672); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5671,std::shared_ptr< monty::ndarray< double,2 > > _5672){
  return ::mosek::fusion::p_Expr::add_(_5671,1.0,::mosek::fusion::p_Expr::constTerm(_5672),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5673,    std::shared_ptr< monty::ndarray< double,1 > > _5674) { return mosek::fusion::p_Expr::add(_5673,_5674); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5673,std::shared_ptr< monty::ndarray< double,1 > > _5674){
  _checked_ptr_1<double> _ptr__5674(_5674 ? _5674->raw() : nullptr, _5674 ? _5674->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5673,1.0,::mosek::fusion::p_Expr::constTerm(_5674),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5675,    monty::rc_ptr< ::mosek::fusion::Expression > _5676) { return mosek::fusion::p_Expr::add(_5675,_5676); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5675,monty::rc_ptr< ::mosek::fusion::Expression > _5676){
  return ::mosek::fusion::p_Expr::add_(_5675,1.0,_5676,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5677,monty::rc_ptr< ::mosek::fusion::WorkStack > _5678,monty::rc_ptr< ::mosek::fusion::WorkStack > _5679) { mosek::fusion::p_Expr::_get_impl(this)->eval(_5677,_5678,_5679); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5677,monty::rc_ptr< ::mosek::fusion::WorkStack > _5678,monty::rc_ptr< ::mosek::fusion::WorkStack > _5679){
  std::vector<int> _9549;
  for (int _5680 = (int)0, _9550 = (int)((ptrb)->size(0)); _5680 < _9550 ; ++_5680)
  {
    _9549.push_back((int)((*ptrb)(_5680)));
  }
  auto _9551 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9549.size()),_9549.begin(),_9549.end()));
  ::mosek::fusion::p_BaseExpression::storeexpr(_5677,shape,_9551,inst,subj,cof_v,bfix);
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _5681,std::shared_ptr< monty::ndarray< long long,1 > > _5682,std::shared_ptr< monty::ndarray< double,1 > > _5683,std::shared_ptr< monty::ndarray< double,1 > > _5684,std::shared_ptr< monty::ndarray< int,1 > > _5685,std::shared_ptr< monty::ndarray< long long,1 > > _5686){
  _checked_ptr_1<long long> _ptr__5681(_5681 ? _5681->raw() : nullptr, _5681 ? _5681->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5682(_5682 ? _5682->raw() : nullptr, _5682 ? _5682->size(0) : 0);
  _checked_ptr_1<double> _ptr__5683(_5683 ? _5683->raw() : nullptr, _5683 ? _5683->size(0) : 0);
  _checked_ptr_1<double> _ptr__5684(_5684 ? _5684->raw() : nullptr, _5684 ? _5684->size(0) : 0);
  _checked_ptr_1<int> _ptr__5685(_5685 ? _5685->raw() : nullptr, _5685 ? _5685->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5686(_5686 ? _5686->raw() : nullptr, _5686 ? _5686->size(0) : 0);
  if ((NULL == _5685.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _5687 = ((int)((_5681)->size(0)) - (int)1);
  long long _5688 = _ptr__5681[((int)((_5681)->size(0)) - (int)1)];
  int _5689 = (int)((_5685)->size(0));
  long long _5690 = (long long)1;
  int _9552 = (int)0;
  int _9553 = _5689;
  for (int _5691 = _9552; _5691 < _9553; ++_5691)
  {
    {
      _5690 *= _ptr__5685[_5691];
    }
  }
  if (((int)((_5681)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_5688 != (int)((_5682)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_5688 != (int)((_5683)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _5684.get()) || (_5687 != (int)((_5684)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _5686.get()) && ((int)((_5686)->size(0)) < _5690)))
  {
    {
      if (((int)((_5686)->size(0)) != ((int)((_5681)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_5686)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5686[(int)0] < (int)0) || (_ptr__5686[(int)0] >= _5690)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _5692 = true;
          long long _5693 = _5690;
          int _9554 = (int)1;
          int _9555 = (int)((_5686)->size(0));
          for (int _5694 = _9554; _5694 < _9555; ++_5694)
          {
            {
              _5692 = (_5692 && ((_ptr__5686[_5694] >= (int)0) && ((_ptr__5686[_5694] < _5693) && (_ptr__5686[_5694] > _ptr__5686[(_5694 - (int)1)]))));
            }
          }
          if ((!_5692))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_5690 != ((long long)((_5681)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _5695 = false;
  bool _5696 = false;
  if ((_ptr__5681[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _5697 = true;
  int _9556 = (int)0;
  int _9557 = _5687;
  for (int _5698 = _9556; _5698 < _9557; ++_5698)
  {
    {
      _5697 = (_5697 && (_ptr__5681[_5698] <= _ptr__5681[safe_add( _5698,(int)1 )]));
    }
  }
  if ((!_5697))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5699){
  monty::rc_ptr< ::mosek::fusion::Model > _9558;
  bool _9559 = ((NULL == _5699.get()) || ((int)((_5699)->size(0)) == (int)0));
  if (_9559)
  {
    _9558 = nullptr;
  }
  else
  {
    _9558 = ((*_5699)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _9558;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _5700) { return __mosek_2fusion_2Expression__pick(_5700); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _5701) { return __mosek_2fusion_2Expression__pick(_5701); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _5702) { return __mosek_2fusion_2Expression__index(_5702); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _5703) { return __mosek_2fusion_2Expression__index(_5703); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _5704,std::shared_ptr< monty::ndarray< int,1 > > _5705) { return __mosek_2fusion_2Expression__slice(_5704,_5705); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _5706,int _5707) { return __mosek_2fusion_2Expression__slice(_5706,_5707); }
monty::rc_ptr< mosek::fusion::FlatExpr > mosek::fusion::Expression::eval() { return __mosek_2fusion_2Expression__eval(); }
mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_inst() { return _impl->inst; }
void mosek::fusion::FlatExpr::set_inst(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->inst = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::FlatExpr::get_shape() { return _impl->shape; }
void mosek::fusion::FlatExpr::set_shape(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->shape = _val; }
long long mosek::fusion::FlatExpr::get_nnz() { return _impl->nnz; }
void mosek::fusion::FlatExpr::set_nnz(long long _val) { _impl->nnz = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_cof() { return _impl->cof; }
void mosek::fusion::FlatExpr::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_subj() { return _impl->subj; }
void mosek::fusion::FlatExpr::set_subj(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::FlatExpr::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_bfix() { return _impl->bfix; }
void mosek::fusion::FlatExpr::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5712){ return new mosek::fusion::FlatExpr(_5712); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5712) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5712); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5712){monty::rc_reserve __reserve_this(_pubthis);   {
    bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5712)->bfix);
    ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5712)->ptrb);
    subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5712)->subj);
    cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5712)->cof);
    nnz = mosek::fusion::p_FlatExpr::_get_impl(_5712)->nnz;
    shape = mosek::fusion::p_FlatExpr::_get_impl(_5712)->shape;
    inst = mosek::fusion::p_FlatExpr::_get_impl(_5712)->inst;
  }
}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5713,    std::shared_ptr< monty::ndarray< long long,1 > > _5714,    std::shared_ptr< monty::ndarray< long long,1 > > _5715,    std::shared_ptr< monty::ndarray< double,1 > > _5716,    std::shared_ptr< monty::ndarray< int,1 > > _5717,    std::shared_ptr< monty::ndarray< long long,1 > > _5718){ return new mosek::fusion::FlatExpr(_5713,_5714,_5715,_5716,_5717,_5718); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5713,    std::shared_ptr< monty::ndarray< long long,1 > > _5714,    std::shared_ptr< monty::ndarray< long long,1 > > _5715,    std::shared_ptr< monty::ndarray< double,1 > > _5716,    std::shared_ptr< monty::ndarray< int,1 > > _5717,    std::shared_ptr< monty::ndarray< long long,1 > > _5718) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5713,_5714,_5715,_5716,_5717,_5718); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5713,    std::shared_ptr< monty::ndarray< long long,1 > > _5714,    std::shared_ptr< monty::ndarray< long long,1 > > _5715,    std::shared_ptr< monty::ndarray< double,1 > > _5716,    std::shared_ptr< monty::ndarray< int,1 > > _5717,    std::shared_ptr< monty::ndarray< long long,1 > > _5718){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5713(_5713 ? _5713->raw() : nullptr, _5713 ? _5713->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5714(_5714 ? _5714->raw() : nullptr, _5714 ? _5714->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5715(_5715 ? _5715->raw() : nullptr, _5715 ? _5715->size(0) : 0);
    _checked_ptr_1<double> _ptr__5716(_5716 ? _5716->raw() : nullptr, _5716 ? _5716->size(0) : 0);
    _checked_ptr_1<int> _ptr__5717(_5717 ? _5717->raw() : nullptr, _5717 ? _5717->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5718(_5718 ? _5718->raw() : nullptr, _5718 ? _5718->size(0) : 0);
    if (((NULL != _5713.get()) && ((int)((_5713)->size(0)) != ((int)((_5714)->size(0)) - (int)1))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));
      }
    }
    {}
    if (((NULL == _5716.get()) || ((NULL == _5715.get()) || ((int)((_5715)->size(0)) != (int)((_5716)->size(0))))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));
      }
    }
    {}
    if ((NULL != _5717.get()))
    {
      {
        if ((NULL != _5718.get()))
        {
          {
            if (((int)((_5718)->size(0)) != ((int)((_5714)->size(0)) - (int)1)))
            {
              {
                throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));
              }
            }
            {}
          }
        }
        else if((::mosek::fusion::p_Set::size(_5717) != ((long long)((_5714)->size(0)) - (int)1)))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));
          }
        }
        {}
      }
    }
    {}
    bfix = _5713;
    ptrb = _5714;
    subj = _5715;
    cof = _5716;
    nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)));
    shape = _5717;
    inst = _5718;
  }
}std::string mosek::fusion::FlatExpr :: toString() { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5719 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5719->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("FlatExpr:"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| ptrb["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((ptrb)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(ptrb)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| subj["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((subj)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(subj)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| cof ["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((cof)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(cof)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| bfix["));
  if ((NULL != bfix.get()))
  {
    {
      _5719->__mosek_2fusion_2Utils_2StringBuffer__a((int)((bfix)->size(0)));
    }
  }
  {}
  _5719->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(bfix)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| inst["));
  if ((NULL != inst.get()))
  {
    {
      _5719->__mosek_2fusion_2Utils_2StringBuffer__a((int)((inst)->size(0)));
    }
  }
  {}
  _5719->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(inst)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"));
  return _5719->toString();
}
int mosek::fusion::FlatExpr :: size() { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size(){
  return ((int)((ptrb)->size(0)) - (int)1);
}
void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _5720,    int _5721,    std::shared_ptr< monty::ndarray< int,1 > > _5722,    std::shared_ptr< monty::ndarray< int,1 > > _5723,    std::shared_ptr< monty::ndarray< double,1 > > _5724,    std::shared_ptr< monty::ndarray< int,1 > > _5725,    std::shared_ptr< monty::ndarray< int,1 > > _5726,    std::shared_ptr< monty::ndarray< double,1 > > _5727,    double _5728){ return new mosek::fusion::SymmetricMatrix(_5720,_5721,_5722,_5723,_5724,_5725,_5726,_5727,_5728); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _5720,    int _5721,    std::shared_ptr< monty::ndarray< int,1 > > _5722,    std::shared_ptr< monty::ndarray< int,1 > > _5723,    std::shared_ptr< monty::ndarray< double,1 > > _5724,    std::shared_ptr< monty::ndarray< int,1 > > _5725,    std::shared_ptr< monty::ndarray< int,1 > > _5726,    std::shared_ptr< monty::ndarray< double,1 > > _5727,    double _5728) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_5720,_5721,_5722,_5723,_5724,_5725,_5726,_5727,_5728); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _5720,    int _5721,    std::shared_ptr< monty::ndarray< int,1 > > _5722,    std::shared_ptr< monty::ndarray< int,1 > > _5723,    std::shared_ptr< monty::ndarray< double,1 > > _5724,    std::shared_ptr< monty::ndarray< int,1 > > _5725,    std::shared_ptr< monty::ndarray< int,1 > > _5726,    std::shared_ptr< monty::ndarray< double,1 > > _5727,    double _5728){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5722(_5722 ? _5722->raw() : nullptr, _5722 ? _5722->size(0) : 0);
    _checked_ptr_1<int> _ptr__5723(_5723 ? _5723->raw() : nullptr, _5723 ? _5723->size(0) : 0);
    _checked_ptr_1<double> _ptr__5724(_5724 ? _5724->raw() : nullptr, _5724 ? _5724->size(0) : 0);
    _checked_ptr_1<int> _ptr__5725(_5725 ? _5725->raw() : nullptr, _5725 ? _5725->size(0) : 0);
    _checked_ptr_1<int> _ptr__5726(_5726 ? _5726->raw() : nullptr, _5726 ? _5726->size(0) : 0);
    _checked_ptr_1<double> _ptr__5727(_5727 ? _5727->raw() : nullptr, _5727 ? _5727->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _5720;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _5721;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _5722;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _5723;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _5724;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _5725;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _5726;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _5727;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _5728;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _5729,    std::shared_ptr< monty::ndarray< int,1 > > _5730,    std::shared_ptr< monty::ndarray< double,1 > > _5731) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5729,_5730,_5731); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _5729,std::shared_ptr< monty::ndarray< int,1 > > _5730,std::shared_ptr< monty::ndarray< double,1 > > _5731){
  _checked_ptr_1<int> _ptr__5730(_5730 ? _5730->raw() : nullptr, _5730 ? _5730->size(0) : 0);
  _checked_ptr_1<double> _ptr__5731(_5731 ? _5731->raw() : nullptr, _5731 ? _5731->size(0) : 0);
  if (((int)((_5730)->size(0)) != (int)((_5731)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _9560 = (int)0;
  int _9561 = (int)((_5730)->size(0));
  for (int _5732 = _9560; _5732 < _9561; ++_5732)
  {
    {
      if (((_ptr__5730[_5732] < (int)0) || (_ptr__5730[_5732] >= _5729)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _9562;
  for (int _5734 = (int)0, _9563 = (int)((_5730)->size(0)); _5734 < _9563 ; ++_5734)
  {
    _9562.push_back(_ptr__5730[_5734]);
  }
  auto _9564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9562.size()),_9562.begin(),_9562.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5733 = _9564;
  _checked_ptr_1<int> _ptr__5733(_5733 ? _5733->raw() : nullptr,_5733 ? _5733->size(0) : 0);
  std::vector<int> _9565;
  for (int _5736 = (int)0, _9566 = (int)((_5730)->size(0)); _5736 < _9566 ; ++_5736)
  {
    _9565.push_back((int)1);
  }
  auto _9567 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9565.size()),_9565.begin(),_9565.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5735 = _9567;
  _checked_ptr_1<int> _ptr__5735(_5735 ? _5735->raw() : nullptr,_5735 ? _5735->size(0) : 0);
  std::vector<double> _9568;
  for (int _5738 = (int)0, _9569 = (int)((_5731)->size(0)); _5738 < _9569 ; ++_5738)
  {
    _9568.push_back(_ptr__5731[_5738]);
  }
  auto _9570 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9568.size()),_9568.begin(),_9568.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5737 = _9570;
  _checked_ptr_1<double> _ptr__5737(_5737 ? _5737->raw() : nullptr,_5737 ? _5737->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5729,(int)1,_5733,_5735,_5737,_5733,_5735,_5737,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _5739) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5739); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _5739){
  _checked_ptr_1<double> _ptr__5739(_5739 ? _5739->raw() : nullptr, _5739 ? _5739->size(0) : 0);
  int _5740 = (int)((_5739)->size(0));
  std::vector<int> _9571;
  for (int _5742 = (int)0, _9572 = _5740; _5742 < _9572 ; ++_5742)
  {
    _9571.push_back(_5742);
  }
  auto _9573 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9571.size()),_9571.begin(),_9571.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5741 = _9573;
  _checked_ptr_1<int> _ptr__5741(_5741 ? _5741->raw() : nullptr,_5741 ? _5741->size(0) : 0);
  std::vector<int> _9574;
  for (int _5744 = (int)0, _9575 = _5740; _5744 < _9575 ; ++_5744)
  {
    _9574.push_back((int)1);
  }
  auto _9576 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9574.size()),_9574.begin(),_9574.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5743 = _9576;
  _checked_ptr_1<int> _ptr__5743(_5743 ? _5743->raw() : nullptr,_5743 ? _5743->size(0) : 0);
  std::vector<double> _9577;
  for (int _5746 = (int)0, _9578 = _5740; _5746 < _9578 ; ++_5746)
  {
    _9577.push_back(_ptr__5739[_5746]);
  }
  auto _9579 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9577.size()),_9577.begin(),_9577.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5745 = _9579;
  _checked_ptr_1<double> _ptr__5745(_5745 ? _5745->raw() : nullptr,_5745 ? _5745->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5740,(int)1,_5741,_5743,_5745,_5741,_5743,_5745,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5747) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_5747); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _5747){
  _checked_ptr_1<double> _ptr__5747(_5747 ? _5747->raw() : nullptr, _5747 ? _5747->size(0) : 0);
  int _5748 = (int)((_5747)->size(0));
  std::vector<int> _9580;
  for (int _5750 = (int)0, _9581 = _5748; _5750 < _9581 ; ++_5750)
  {
    _9580.push_back(_5750);
  }
  auto _9582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9580.size()),_9580.begin(),_9580.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5749 = _9582;
  _checked_ptr_1<int> _ptr__5749(_5749 ? _5749->raw() : nullptr,_5749 ? _5749->size(0) : 0);
  std::vector<int> _9583;
  for (int _5751 = (int)0, _9584 = _5748; _5751 < _9584 ; ++_5751)
  {
    _9583.push_back((_5748 - _5751));
  }
  auto _9585 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9583.size()),_9583.begin(),_9583.end()));
  std::vector<double> _9586;
  for (int _5752 = (int)0, _9587 = _5748; _5752 < _9587 ; ++_5752)
  {
    _9586.push_back(_ptr__5747[_5752]);
  }
  auto _9588 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9586.size()),_9586.begin(),_9586.end()));
  std::vector<double> _9589;
  for (int _5753 = (int)0, _9590 = _5748; _5753 < _9590 ; ++_5753)
  {
    _9589.push_back(1.0);
  }
  auto _9591 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9589.size()),_9589.begin(),_9589.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5748,_5748,_5749,_9585,_9588,_5749,_5749,_9591,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5754) { return mosek::fusion::p_SymmetricMatrix::diag(_5754); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5754){
  _checked_ptr_1<double> _ptr__5754(_5754 ? _5754->raw() : nullptr, _5754 ? _5754->size(0) : 0);
  int _5755 = (int)((_5754)->size(0));
  std::vector<int> _9592;
  for (int _5757 = (int)0, _9593 = _5755; _5757 < _9593 ; ++_5757)
  {
    _9592.push_back(_5757);
  }
  auto _9594 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9592.size()),_9592.begin(),_9592.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5756 = _9594;
  _checked_ptr_1<int> _ptr__5756(_5756 ? _5756->raw() : nullptr,_5756 ? _5756->size(0) : 0);
  std::vector<double> _9595;
  for (int _5758 = (int)0, _9596 = _5755; _5758 < _9596 ; ++_5758)
  {
    _9595.push_back(_ptr__5754[_5758]);
  }
  auto _9597 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9595.size()),_9595.begin(),_9595.end()));
  std::vector<double> _9598;
  for (int _5759 = (int)0, _9599 = _5755; _5759 < _9599 ; ++_5759)
  {
    _9598.push_back(1.0);
  }
  auto _9600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9598.size()),_9598.begin(),_9598.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5755,_5755,_5756,_5756,_9597,_5756,_5756,_9600,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5760) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_5760); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5760) { return __mosek_2fusion_2SymmetricMatrix__add(_5760); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5760){
  int _5761 = _pubthis->getdim();
  if ((_5760->getdim() != _5761))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _5762 = (int)((usubi)->size(0));
  int _5763 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->usubi)->size(0));
  int _5764 = safe_add( _5762,_5763 );
  int _5765 = (int)((vsubi)->size(0));
  int _5766 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->vsubi)->size(0));
  int _5767 = safe_add( _5765,_5766 );
  std::shared_ptr< monty::ndarray< double,1 > > _5768 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5767)));
  _checked_ptr_1<double> _ptr__5768(_5768 ? _5768->raw() : nullptr,_5768 ? _5768->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5769 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5767)));
  _checked_ptr_1<int> _ptr__5769(_5769 ? _5769->raw() : nullptr,_5769 ? _5769->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5770 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5767)));
  _checked_ptr_1<int> _ptr__5770(_5770 ? _5770->raw() : nullptr,_5770 ? _5770->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5771 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5764)));
  _checked_ptr_1<double> _ptr__5771(_5771 ? _5771->raw() : nullptr,_5771 ? _5771->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5772 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5764)));
  _checked_ptr_1<int> _ptr__5772(_5772 ? _5772->raw() : nullptr,_5772 ? _5772->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5773 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5764)));
  _checked_ptr_1<int> _ptr__5773(_5773 ? _5773->raw() : nullptr,_5773 ? _5773->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5773,(int)0,_5762);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->usubi,(int)0,_5773,_5762,_5763);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_5772,(int)0,_5762);
  int _9601 = (int)0;
  int _9602 = _5763;
  for (int _5774 = _9601; _5774 < _9602; ++_5774)
  {
    {
      _ptr__5772[safe_add( _5774,_5762 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->usubj)(_5774)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_5771,(int)0,_5762);
    }
  }
  else
  {
    {
      int _9603 = (int)0;
      int _9604 = _5762;
      for (int _5775 = _9603; _5775 < _9604; ++_5775)
      {
        {
          _ptr__5771[_5775] = (scale * ((*uval)(_5775)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->uval,(int)0,_5771,_5762,_5763);
    }
  }
  else
  {
    {
      int _9605 = (int)0;
      int _9606 = _5763;
      for (int _5776 = _9605; _5776 < _9606; ++_5776)
      {
        {
          _ptr__5771[safe_add( _5776,_5762 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->uval)(_5776)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5773,(int)0,_5762);
  int _9607 = (int)0;
  int _9608 = _5766;
  for (int _5777 = _9607; _5777 < _9608; ++_5777)
  {
    {
      _ptr__5770[safe_add( _5777,_5765 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->vsubi)(_5777)),mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_5769,(int)0,_5765);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->vsubj,_5765,_5769,_5765,_5766);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_5768,(int)0,_5765);
    }
  }
  else
  {
    {
      int _9609 = (int)0;
      int _9610 = _5765;
      for (int _5778 = _9609; _5778 < _9610; ++_5778)
      {
        {
          _ptr__5768[_5778] = (scale * ((*vval)(_5778)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->vval,(int)0,_5768,_5765,_5766);
    }
  }
  else
  {
    {
      int _9611 = (int)0;
      int _9612 = _5766;
      for (int _5779 = _9611; _5779 < _9612; ++_5779)
      {
        {
          _ptr__5768[safe_add( _5779,_5765 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->vval)(_5779)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_5760)->d1 ),_5773,_5772,_5771,_5770,_5769,_5768,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5780) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_5780); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5780) { return __mosek_2fusion_2SymmetricMatrix__sub(_5780); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5780){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_5780->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _5781) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_5781); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _5781) { return __mosek_2fusion_2SymmetricMatrix__mul(_5781); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _5781){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _5781));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5782,    std::shared_ptr< monty::ndarray< int,2 > > _5783,    std::shared_ptr< monty::ndarray< double,1 > > _5784){ return new mosek::fusion::NDSparseArray(_5782,_5783,_5784); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5782,    std::shared_ptr< monty::ndarray< int,2 > > _5783,    std::shared_ptr< monty::ndarray< double,1 > > _5784) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5782,_5783,_5784); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5782,    std::shared_ptr< monty::ndarray< int,2 > > _5783,    std::shared_ptr< monty::ndarray< double,1 > > _5784){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5782(_5782 ? _5782->raw() : nullptr, _5782 ? _5782->size(0) : 0);
    _checked_ptr_1<double> _ptr__5784(_5784 ? _5784->raw() : nullptr, _5784 ? _5784->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5785 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5783)->size(0)))));
    _checked_ptr_1<long long> _ptr__5785(_5785 ? _5785->raw() : nullptr,_5785 ? _5785->size(0) : 0);
    size = (long long)1;
    int _9613 = (int)0;
    int _9614 = (int)((_5782)->size(0));
    for (int _5786 = _9613; _5786 < _9614; ++_5786)
    {
      {
        size = safe_mul( size,_ptr__5782[_5786] );
      }
    }
    int _5787 = (int)((_5782)->size(0));
    if (((int)((_5783)->size(0)) != (int)((_5784)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_5783)->size(1)) != _5787))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _5788 = false;
    int _9615 = (int)0;
    int _9616 = (int)((_5783)->size(0));
    for (int _5789 = _9615; _5789 < _9616; ++_5789)
    {
      {
        int _9617 = (int)0;
        int _9618 = (int)((_5783)->size(1));
        for (int _5790 = _9617; _5790 < _9618; ++_5790)
        {
          {
            if (((((*_5783)(_5789,_5790)) < (int)0) || (((*_5783)(_5789,_5790)) >= _ptr__5782[_5790])))
            {
              {
                _5788 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_5788)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _9619 = (int)0;
    int _9620 = (int)((_5783)->size(0));
    for (int _5791 = _9619; _5791 < _9620; ++_5791)
    {
      {
        long long _5792 = (long long)0;
        int _9621 = (int)0;
        int _9622 = (int)((_5783)->size(1));
        for (int _5793 = _9621; _5793 < _9622; ++_5793)
        {
          {
            _5792 = safe_add( safe_mul( _5792,_ptr__5782[_5793] ),((*_5783)(_5791,_5793)) );
          }
        }
        _ptr__5785[_5791] = _5792;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5782);
    bool _5794 = true;
    int _9623 = (int)1;
    int _9624 = (int)((_5785)->size(0));
    for (int _5795 = _9623; _5795 < _9624; ++_5795)
    {
      {
        _5794 = (_5794 && (_ptr__5785[_5795] >= _ptr__5785[(_5795 - (int)1)]));
      }
    }
    if (_5794)
    {
      {
        int _5796 = (int)1;
        int _9625 = (int)1;
        int _9626 = (int)((_5785)->size(0));
        for (int _5797 = _9625; _5797 < _9626; ++_5797)
        {
          {
            if ((_ptr__5785[(_5797 - (int)1)] < _ptr__5785[_5797]))
            {
              {
                ++ _5796;
              }
            }
            {}
          }
        }
        if ((_5796 == (int)((_5785)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5785);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5784);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5796)));
            ((*inst)((int)0)) = _ptr__5785[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5796)));
            ((*cof)((int)0)) = _ptr__5784[(int)0];
            int _5798 = (int)0;
            int _9627 = (int)1;
            int _9628 = (int)((_5785)->size(0));
            for (int _5799 = _9627; _5799 < _9628; ++_5799)
            {
              {
                if ((_ptr__5785[_5799] > _ptr__5785[(_5799 - (int)1)]))
                {
                  {
                    ++ _5798;
                    ((*inst)(_5798)) = _ptr__5785[_5799];
                    ((*cof)(_5798)) = _ptr__5784[_5799];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5798)) = (((*cof)(_5798)) + _ptr__5784[_5799]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5800 = ::mosek::fusion::Utils::Tools::range((long long)((_5785)->size(0)));
        _checked_ptr_1<long long> _ptr__5800(_5800 ? _5800->raw() : nullptr,_5800 ? _5800->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5800,_5785,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5785)->size(0)));
        int _5801 = (int)1;
        int _9629 = (int)1;
        int _9630 = (int)((_5785)->size(0));
        for (int _5802 = _9629; _5802 < _9630; ++_5802)
        {
          {
            if ((_ptr__5785[_ptr__5800[(_5802 - (int)1)]] < _ptr__5785[_ptr__5800[_5802]]))
            {
              {
                ++ _5801;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5801)));
        ((*inst)((int)0)) = _ptr__5785[_ptr__5800[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5801)));
        ((*cof)((int)0)) = _ptr__5784[_ptr__5800[(int)0]];
        int _5803 = (int)0;
        int _9631 = (int)1;
        int _9632 = (int)((_5785)->size(0));
        for (int _5804 = _9631; _5804 < _9632; ++_5804)
        {
          {
            if ((_ptr__5785[_ptr__5800[_5804]] > _ptr__5785[_ptr__5800[(_5804 - (int)1)]]))
            {
              {
                ++ _5803;
                ((*inst)(_5803)) = _ptr__5785[_ptr__5800[_5804]];
                ((*cof)(_5803)) = _ptr__5784[_ptr__5800[_5804]];
              }
            }
            else
            {
              {
                ((*cof)(_5803)) = (((*cof)(_5803)) + _ptr__5784[_ptr__5800[_5804]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5805,    std::shared_ptr< monty::ndarray< long long,1 > > _5806,    std::shared_ptr< monty::ndarray< double,1 > > _5807){ return new mosek::fusion::NDSparseArray(_5805,_5806,_5807); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5805,    std::shared_ptr< monty::ndarray< long long,1 > > _5806,    std::shared_ptr< monty::ndarray< double,1 > > _5807) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5805,_5806,_5807); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5805,    std::shared_ptr< monty::ndarray< long long,1 > > _5806,    std::shared_ptr< monty::ndarray< double,1 > > _5807){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5805(_5805 ? _5805->raw() : nullptr, _5805 ? _5805->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5806(_5806 ? _5806->raw() : nullptr, _5806 ? _5806->size(0) : 0);
    _checked_ptr_1<double> _ptr__5807(_5807 ? _5807->raw() : nullptr, _5807 ? _5807->size(0) : 0);
    size = (long long)1;
    int _9633 = (int)0;
    int _9634 = (int)((_5805)->size(0));
    for (int _5808 = _9633; _5808 < _9634; ++_5808)
    {
      {
        size = safe_mul( size,_ptr__5805[_5808] );
      }
    }
    if (((int)((_5806)->size(0)) != (int)((_5807)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _5809 = false;
      int _9635 = (int)0;
      int _9636 = (int)((_5806)->size(0));
      for (int _5810 = _9635; _5810 < _9636; ++_5810)
      {
        {
          _5809 = (_5809 || ((_ptr__5806[_5810] < (int)0) || (_ptr__5806[_5810] >= size)));
        }
      }
      if (_5809)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5805);
    bool _5811 = true;
    int _9637 = (int)1;
    int _9638 = (int)((_5806)->size(0));
    for (int _5812 = _9637; _5812 < _9638; ++_5812)
    {
      {
        _5811 = (_5811 && (_ptr__5806[_5812] >= _ptr__5806[(_5812 - (int)1)]));
      }
    }
    if (_5811)
    {
      {
        int _5813 = (int)1;
        int _9639 = (int)1;
        int _9640 = (int)((_5806)->size(0));
        for (int _5814 = _9639; _5814 < _9640; ++_5814)
        {
          {
            if ((_ptr__5806[(_5814 - (int)1)] < _ptr__5806[_5814]))
            {
              {
                ++ _5813;
              }
            }
            {}
          }
        }
        if ((_5813 == (int)((_5806)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5806);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5807);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5813)));
            ((*inst)((int)0)) = _ptr__5806[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5813)));
            ((*cof)((int)0)) = _ptr__5807[(int)0];
            int _5815 = (int)0;
            int _9641 = (int)1;
            int _9642 = (int)((_5806)->size(0));
            for (int _5816 = _9641; _5816 < _9642; ++_5816)
            {
              {
                if ((_ptr__5806[_5816] > _ptr__5806[(_5816 - (int)1)]))
                {
                  {
                    ++ _5815;
                    ((*inst)(_5815)) = _ptr__5806[_5816];
                    ((*cof)(_5815)) = _ptr__5807[_5816];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5815)) = (((*cof)(_5815)) + _ptr__5807[_5816]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5817 = ::mosek::fusion::Utils::Tools::range((long long)((_5806)->size(0)));
        _checked_ptr_1<long long> _ptr__5817(_5817 ? _5817->raw() : nullptr,_5817 ? _5817->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5817,_5806,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5806)->size(0)));
        int _5818 = (int)1;
        int _9643 = (int)1;
        int _9644 = (int)((_5806)->size(0));
        for (int _5819 = _9643; _5819 < _9644; ++_5819)
        {
          {
            if ((_ptr__5806[_ptr__5817[(_5819 - (int)1)]] < _ptr__5806[_ptr__5817[_5819]]))
            {
              {
                ++ _5818;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5818)));
        ((*inst)((int)0)) = _ptr__5806[_ptr__5817[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5818)));
        ((*cof)((int)0)) = _ptr__5807[_ptr__5817[(int)0]];
        int _5820 = (int)0;
        int _9645 = (int)1;
        int _9646 = (int)((_5806)->size(0));
        for (int _5821 = _9645; _5821 < _9646; ++_5821)
        {
          {
            if ((_ptr__5806[_ptr__5817[_5821]] > ((*inst)(_ptr__5817[(_5821 - (int)1)]))))
            {
              {
                ++ _5820;
                ((*inst)(_5820)) = _ptr__5806[_ptr__5817[_5821]];
                ((*cof)(_5820)) = _ptr__5807[_ptr__5817[_5821]];
              }
            }
            else
            {
              {
                ((*cof)(_5820)) = (((*cof)(_5820)) + _ptr__5807[_ptr__5817[_5821]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5822){ return new mosek::fusion::NDSparseArray(_5822); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5822) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5822); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5822){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _5823 = _5822->numNonzeros();
    int _5824 = _5822->numColumns();
    int _5825 = _5822->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _5826 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5823)));
    _checked_ptr_1<double> _ptr__5826(_5826 ? _5826->raw() : nullptr,_5826 ? _5826->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5827 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5823)));
    _checked_ptr_1<int> _ptr__5827(_5827 ? _5827->raw() : nullptr,_5827 ? _5827->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5828 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5823)));
    _checked_ptr_1<int> _ptr__5828(_5828 ? _5828->raw() : nullptr,_5828 ? _5828->size(0) : 0);
    _5822->getDataAsTriplets(_5828,_5827,_5826);
    size = safe_mul( (long long)_5822->numRows(),(long long)_5822->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5825),(int)(_5824)});
    std::vector<long long> _9647;
    for (long long _5829 = (long long)0, _9648 = _5823; _5829 < _9648 ; ++_5829)
    {
      _9647.push_back(safe_add( safe_mul( (long long)_ptr__5828[_5829],_5824 ),(long long)_ptr__5827[_5829] ));
    }
    auto _9649 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9647.size()),_9647.begin(),_9647.end()));
    inst = _9649;
    cof = _5826;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5830) { return mosek::fusion::p_NDSparseArray::make(_5830); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _5830){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5830);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5831,    std::shared_ptr< monty::ndarray< long long,1 > > _5832,    std::shared_ptr< monty::ndarray< double,1 > > _5833) { return mosek::fusion::p_NDSparseArray::make(_5831,_5832,_5833); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5831,std::shared_ptr< monty::ndarray< long long,1 > > _5832,std::shared_ptr< monty::ndarray< double,1 > > _5833){
  _checked_ptr_1<int> _ptr__5831(_5831 ? _5831->raw() : nullptr, _5831 ? _5831->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5832(_5832 ? _5832->raw() : nullptr, _5832 ? _5832->size(0) : 0);
  _checked_ptr_1<double> _ptr__5833(_5833 ? _5833->raw() : nullptr, _5833 ? _5833->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5831,_5832,_5833);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5834,    std::shared_ptr< monty::ndarray< int,2 > > _5835,    std::shared_ptr< monty::ndarray< double,1 > > _5836) { return mosek::fusion::p_NDSparseArray::make(_5834,_5835,_5836); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5834,std::shared_ptr< monty::ndarray< int,2 > > _5835,std::shared_ptr< monty::ndarray< double,1 > > _5836){
  _checked_ptr_1<int> _ptr__5834(_5834 ? _5834->raw() : nullptr, _5834 ? _5834->size(0) : 0);
  _checked_ptr_1<double> _ptr__5836(_5836 ? _5836->raw() : nullptr, _5836 ? _5836->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5834,_5835,_5836);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5837,    int _5838,    std::shared_ptr< monty::ndarray< double,1 > > _5839){ return new mosek::fusion::DenseMatrix(_5837,_5838,_5839); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5837,    int _5838,    std::shared_ptr< monty::ndarray< double,1 > > _5839) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5837,_5838,_5839); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5837,    int _5838,    std::shared_ptr< monty::ndarray< double,1 > > _5839){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5839(_5839 ? _5839->raw() : nullptr, _5839 ? _5839->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5837,_5838);
    nnz = (long long)safe_mul( _5837,_5838 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _5837,_5838 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_5839,(int)0,data,(int)0,safe_mul( _5837,_5838 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5840){ return new mosek::fusion::DenseMatrix(_5840); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5840) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5840); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5840){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_5840)->dimi,mosek::fusion::p_Matrix::_get_impl(_5840)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _9650 = _5840;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9650.get()))
    {
      ::mosek::fusion::DenseMatrix::t _5841 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9650.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_5841)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9650.get()))
    {
      ::mosek::fusion::SparseMatrix::t _5842 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9650.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_5842)->dimi,mosek::fusion::p_Matrix::_get_impl(_5842)->dimj ));
        long long _9651 = (long long)0;
        long long _9652 = mosek::fusion::p_SparseMatrix::_get_impl(_5842)->nnz;
        for (long long _5844 = _9651; _5844 < _9652; ++_5844)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5842)->subi)(_5844)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_5842)->subj)(_5844)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5842)->val)(_5844));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _5843 = _9650;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5845){ return new mosek::fusion::DenseMatrix(_5845); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5845) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5845); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _5845){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_5845)->size(0)),(int)((_5845)->size(1)));
    std::vector<double> _9653;
    for (int _5846 = (int)0, _9654 = dimi; _5846 < _9654 ; ++_5846)
    {
      for (int _5847 = (int)0, _9655 = dimj; _5847 < _9655 ; ++_5847)
      {
        _9653.push_back(((*_5845)(_5846,_5847)));
      }
    }
    auto _9656 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9653.size()),_9653.begin(),_9653.end()));
    data = _9656;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5848,    int _5849,    double _5850){ return new mosek::fusion::DenseMatrix(_5848,_5849,_5850); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5848,    int _5849,    double _5850) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5848,_5849,_5850); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5848,    int _5849,    double _5850){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_5848,_5849);
    std::vector<double> _9657;
    for (int _5851 = (int)0, _9658 = _5848; _5851 < _9658 ; ++_5851)
    {
      for (int _5852 = (int)0, _9659 = _5849; _5852 < _9659 ; ++_5852)
      {
        _9657.push_back(_5850);
      }
    }
    auto _9660 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9657.size()),_9657.begin(),_9657.end()));
    data = _9660;
    nnz = (long long)safe_mul( _5848,_5849 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5853 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _5853->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _5853->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _5854 = (int)0;
  {
    int _5855 = (int)0;
    for(;(_5855 < dimi);++ _5855)
    {
      {
        if ((_5855 > (int)0))
        {
          {
            _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _5853->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5854)));
        ++ _5854;
        {
          int _5856 = (int)1;
          for(;(_5856 < dimj);++ _5856)
          {
            {
              _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _5853->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5854)));
              ++ _5854;
            }
          }
        }
        _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _5853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _5853->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _5857 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5857(_5857 ? _5857->raw() : nullptr,_5857 ? _5857->size(0) : 0);
  int _5858 = (int)0;
  int _5859 = dimi;
  int _9661 = (int)0;
  int _9662 = dimi;
  for (int _5860 = _9661; _5860 < _9662; ++_5860)
  {
    {
      int _5861 = _5860;
      int _9663 = (int)0;
      int _9664 = dimj;
      for (int _5862 = _9663; _5862 < _9664; ++_5862)
      {
        {
          _ptr__5857[_5861] = ((*data)(_5858));
          _5861 = safe_add( _5861,_5859 );
          ++ _5858;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_5857)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5863,std::shared_ptr< monty::ndarray< int,1 > > _5864,std::shared_ptr< monty::ndarray< double,1 > > _5865) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_5863,_5864,_5865); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5863,std::shared_ptr< monty::ndarray< int,1 > > _5864,std::shared_ptr< monty::ndarray< double,1 > > _5865){
  _checked_ptr_1<int> _ptr__5863(_5863 ? _5863->raw() : nullptr, _5863 ? _5863->size(0) : 0);
  _checked_ptr_1<int> _ptr__5864(_5864 ? _5864->raw() : nullptr, _5864 ? _5864->size(0) : 0);
  _checked_ptr_1<double> _ptr__5865(_5865 ? _5865->raw() : nullptr, _5865 ? _5865->size(0) : 0);
  if ((((int)((_5863)->size(0)) < nnz) || (((int)((_5864)->size(0)) < nnz) || ((int)((_5865)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_5865,(int)0,(int)((data)->size(0)));
  int _5866 = (int)0;
  int _9665 = (int)0;
  int _9666 = dimi;
  for (int _5867 = _9665; _5867 < _9666; ++_5867)
  {
    {
      int _9667 = (int)0;
      int _9668 = dimj;
      for (int _5868 = _9667; _5868 < _9668; ++_5868)
      {
        {
          _ptr__5863[_5866] = _5867;
          _ptr__5864[_5866] = _5868;
          ++ _5866;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _5869,int _5870) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_5869,_5870); }double mosek::fusion::p_DenseMatrix::get(int _5869,int _5870){
  return ((*data)(safe_add( safe_mul( _5869,dimj ),_5870 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5871,    int _5872,    std::shared_ptr< monty::ndarray< int,1 > > _5873,    std::shared_ptr< monty::ndarray< int,1 > > _5874,    std::shared_ptr< monty::ndarray< double,1 > > _5875,    long long _5876){ return new mosek::fusion::SparseMatrix(_5871,_5872,_5873,_5874,_5875,_5876); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5871,    int _5872,    std::shared_ptr< monty::ndarray< int,1 > > _5873,    std::shared_ptr< monty::ndarray< int,1 > > _5874,    std::shared_ptr< monty::ndarray< double,1 > > _5875,    long long _5876) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5871,_5872,_5873,_5874,_5875,_5876); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5871,    int _5872,    std::shared_ptr< monty::ndarray< int,1 > > _5873,    std::shared_ptr< monty::ndarray< int,1 > > _5874,    std::shared_ptr< monty::ndarray< double,1 > > _5875,    long long _5876){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5873(_5873 ? _5873->raw() : nullptr, _5873 ? _5873->size(0) : 0);
    _checked_ptr_1<int> _ptr__5874(_5874 ? _5874->raw() : nullptr, _5874 ? _5874->size(0) : 0);
    _checked_ptr_1<double> _ptr__5875(_5875 ? _5875->raw() : nullptr, _5875 ? _5875->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5871,_5872);
    if ((_5876 > (int)0))
    {
      {
        if ((((int)((_5873)->size(0)) < _5876) || (((int)((_5874)->size(0)) < _5876) || ((int)((_5875)->size(0)) < _5876))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _5877 = false;
        long long _9669 = (long long)0;
        long long _9670 = _5876;
        for (long long _5878 = _9669; _5878 < _9670; ++_5878)
        {
          {
            if (((_ptr__5873[_5878] < (int)0) || ((_ptr__5873[_5878] >= dimi) || ((_ptr__5874[_5878] < (int)0) || (_ptr__5874[_5878] >= dimj)))))
            {
              {
                _5877 = true;
              }
            }
            {}
          }
        }
        if (_5877)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5879 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5880 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _5881 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_5873,_5874,_5875,_5879,_5880,_5881,_5876,dimi,dimj);
        subi = ((*_5879)((int)0));
        subj = ((*_5880)((int)0));
        val = ((*_5881)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5882,    int _5883,    std::shared_ptr< monty::ndarray< int,1 > > _5884,    std::shared_ptr< monty::ndarray< int,1 > > _5885,    std::shared_ptr< monty::ndarray< double,1 > > _5886){ return new mosek::fusion::SparseMatrix(_5882,_5883,_5884,_5885,_5886); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5882,    int _5883,    std::shared_ptr< monty::ndarray< int,1 > > _5884,    std::shared_ptr< monty::ndarray< int,1 > > _5885,    std::shared_ptr< monty::ndarray< double,1 > > _5886) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5882,_5883,_5884,_5885,_5886); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5882,    int _5883,    std::shared_ptr< monty::ndarray< int,1 > > _5884,    std::shared_ptr< monty::ndarray< int,1 > > _5885,    std::shared_ptr< monty::ndarray< double,1 > > _5886){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5884(_5884 ? _5884->raw() : nullptr, _5884 ? _5884->size(0) : 0);
    _checked_ptr_1<int> _ptr__5885(_5885 ? _5885->raw() : nullptr, _5885 ? _5885->size(0) : 0);
    _checked_ptr_1<double> _ptr__5886(_5886 ? _5886->raw() : nullptr, _5886 ? _5886->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5882,_5883);
    int _5887 = (int)0;
    int _9671 = (int)0;
    int _9672 = (int)((_5886)->size(0));
    for (int _5888 = _9671; _5888 < _9672; ++_5888)
    {
      {
        if (((_ptr__5886[_5888] > (int)0) || (_ptr__5886[_5888] < (int)0)))
        {
          {
            ++ _5887;
          }
        }
        {}
      }
    }
    if (((_5887 > (int)0) && (_5887 < (int)((_5884)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5887)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5887)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5887)));
        nnz = _5887;
        int _5889 = (int)0;
        int _9673 = (int)0;
        int _9674 = (int)((_5886)->size(0));
        for (int _5890 = _9673; _5890 < _9674; ++_5890)
        {
          {
            if (((_ptr__5886[_5890] < (int)0) || (_ptr__5886[_5890] > (int)0)))
            {
              {
                ((*val)(_5889)) = _ptr__5886[_5890];
                ((*subj)(_5889)) = _ptr__5885[_5890];
                ((*subi)(_5889)) = _ptr__5884[_5890];
                ++ _5889;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _5884;
        subj = _5885;
        val = _5886;
        if ((NULL == _5884.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _5891 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5891(_5891 ? _5891->raw() : nullptr,_5891 ? _5891->size(0) : 0);
  long long _5892 = (long long)0;
  int _9675 = (int)0;
  int _9676 = dimi;
  for (int _5893 = _9675; _5893 < _9676; ++_5893)
  {
    {
      _ptr__5891[_5893] = _5892;
      {
        for(;((_5892 < nnz) && (((*subi)(_5892)) == _5893));++ _5892)
        {
          {
          }
        }
      }
    }
  }
  _ptr__5891[dimi] = _5892;
  return _5891;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5894 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5894->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _5894->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _9677 = (int)1;
      int _9678 = (int)((subi)->size(0));
      for (int _5895 = _9677; _5895 < _9678; ++_5895)
      {
        {
          _5894->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_5895)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_5895)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_5895)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _5894->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _5894->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _5896 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5896(_5896 ? _5896->raw() : nullptr,_5896 ? _5896->size(0) : 0);
  int _9679 = (int)0;
  int _9680 = (int)((subi)->size(0));
  for (int _5897 = _9679; _5897 < _9680; ++_5897)
  {
    {
      _ptr__5896[safe_add( safe_mul( ((*subi)(_5897)),dimj ),((*subj)(_5897)) )] = ((*val)(_5897));
    }
  }
  return _5896;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5898,std::shared_ptr< monty::ndarray< int,1 > > _5899,std::shared_ptr< monty::ndarray< double,1 > > _5900) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_5898,_5899,_5900); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5898,std::shared_ptr< monty::ndarray< int,1 > > _5899,std::shared_ptr< monty::ndarray< double,1 > > _5900){
  _checked_ptr_1<int> _ptr__5898(_5898 ? _5898->raw() : nullptr, _5898 ? _5898->size(0) : 0);
  _checked_ptr_1<int> _ptr__5899(_5899 ? _5899->raw() : nullptr, _5899 ? _5899->size(0) : 0);
  _checked_ptr_1<double> _ptr__5900(_5900 ? _5900->raw() : nullptr, _5900 ? _5900->size(0) : 0);
  if ((((long long)((_5898)->size(0)) < nnz) || (((long long)((_5899)->size(0)) < nnz) || ((long long)((_5900)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_5898,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_5899,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_5900,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _5901,int _5902) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_5901,_5902); }double mosek::fusion::p_SparseMatrix::get(int _5901,int _5902){
  if (((_5901 < (int)0) || ((_5901 >= dimi) || ((_5902 < (int)0) || (_5902 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _5903 = (int)((subi)->size(0));
  int _5904 = (int)0;
  while ( ((_5903 - _5904) > (int)1) )
  {
    {
      int _5905 = (safe_add( _5904,_5903 ) / (int)2);
      if (((((*subi)(_5905)) < _5901) || ((((*subi)(_5905)) == _5901) && (((*subj)(_5905)) < _5902))))
      {
        {
          _5904 = _5905;
        }
      }
      else if(((((*subi)(_5905)) > _5901) || ((((*subi)(_5905)) == _5901) && (((*subj)(_5905)) > _5902))))
      {
        {
          _5903 = _5905;
        }
      }
      else
      {
        {
          return ((*val)(_5905));
        }
      }
    }
  }
  if (((((*subi)(_5904)) == _5901) && (((*subj)(_5904)) == _5902)))
  {
    {
      return ((*val)(_5904));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _5906,    int _5907){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_5906 < (int)0) || (_5907 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _5906;
    dimj = _5907;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _5908 = dimi;
  dimi = dimj;
  dimj = _5908;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5909,    monty::rc_ptr< ::mosek::fusion::Matrix > _5910) { return mosek::fusion::p_Matrix::diag(_5909,_5910); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5909,monty::rc_ptr< ::mosek::fusion::Matrix > _5910){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _9681;
  for (int _5911 = (int)0, _9682 = _5909; _5911 < _9682 ; ++_5911)
  {
    _9681.push_back(_5910);
  }
  auto _9683 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9681.size()),_9681.begin(),_9681.end()));
  return ::mosek::fusion::p_Matrix::diag(_9683);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5912) { return mosek::fusion::p_Matrix::diag(_5912); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5912){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5913 = _5912;
  long long _5914 = (long long)0;
  int _5915 = (int)0;
  int _5916 = (int)0;
  int _9684 = (int)0;
  int _9685 = (int)((_5912)->size(0));
  for (int _5917 = _9684; _5917 < _9685; ++_5917)
  {
    {
      _5916 = safe_add( _5916,mosek::fusion::p_Matrix::_get_impl(((*_5912)(_5917)))->dimi );
      _5915 = safe_add( _5915,mosek::fusion::p_Matrix::_get_impl(((*_5912)(_5917)))->dimj );
      _5914 = safe_add( _5914,((*_5912)(_5917))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5918 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5914)));
  _checked_ptr_1<int> _ptr__5918(_5918 ? _5918->raw() : nullptr,_5918 ? _5918->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5914)));
  _checked_ptr_1<int> _ptr__5919(_5919 ? _5919->raw() : nullptr,_5919 ? _5919->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5920 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5914)));
  _checked_ptr_1<double> _ptr__5920(_5920 ? _5920->raw() : nullptr,_5920 ? _5920->size(0) : 0);
  {
    int _5921 = (int)0;
    int _5922 = (int)0;
    long long _5923 = (long long)0;
    int _9686 = (int)0;
    int _9687 = (int)((_5912)->size(0));
    for (int _5924 = _9686; _5924 < _9687; ++_5924)
    {
      {
        long long _5925 = ((*_5912)(_5924))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _5926 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5925)));
        _checked_ptr_1<double> _ptr__5926(_5926 ? _5926->raw() : nullptr,_5926 ? _5926->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5927 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5925)));
        _checked_ptr_1<int> _ptr__5927(_5927 ? _5927->raw() : nullptr,_5927 ? _5927->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5928 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5925)));
        _checked_ptr_1<int> _ptr__5928(_5928 ? _5928->raw() : nullptr,_5928 ? _5928->size(0) : 0);
        ((*_5912)(_5924))->getDataAsTriplets(_5928,_5927,_5926);
        ::mosek::fusion::Utils::Tools::arraycopy(_5926,(long long)0,_5920,_5923,_5925);
        long long _9688 = (long long)0;
        long long _9689 = _5925;
        for (long long _5929 = _9688; _5929 < _9689; ++_5929)
        {
          {
            _ptr__5918[safe_add( _5923,_5929 )] = safe_add( _ptr__5928[_5929],_5922 );
            _ptr__5919[safe_add( _5923,_5929 )] = safe_add( _ptr__5928[_5929],_5921 );
          }
        }
        _5923 = safe_add( _5923,_5925 );
        _5922 = safe_add( _5922,mosek::fusion::p_Matrix::_get_impl(((*_5912)(_5924)))->dimi );
        _5921 = safe_add( _5921,mosek::fusion::p_Matrix::_get_impl(((*_5912)(_5924)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5916,_5915,_5918,_5919,_5920)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5930,    double _5931,    int _5932) { return mosek::fusion::p_Matrix::antidiag(_5930,_5931,_5932); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5930,double _5931,int _5932){
  if (((_5932 < _5930) && (_5932 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5931,(_5930 - _5932)),_5932);
    }
  }
  else if(((_5932 > (-_5930)) && (_5932 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5931,safe_add( _5930,_5932 )),_5932);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5933,    double _5934) { return mosek::fusion::p_Matrix::antidiag(_5933,_5934); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5933,double _5934){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5934,_5933),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5935,    double _5936,    int _5937) { return mosek::fusion::p_Matrix::diag(_5935,_5936,_5937); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5935,double _5936,int _5937){
  if (((_5937 < _5935) && (_5937 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5936,(_5935 - _5937)),_5937);
    }
  }
  else if(((_5937 > (-_5935)) && (_5937 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5936,safe_add( _5935,_5937 )),_5937);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5938,    double _5939) { return mosek::fusion::p_Matrix::diag(_5938,_5939); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5938,double _5939){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5939,_5938),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5940,    int _5941) { return mosek::fusion::p_Matrix::antidiag(_5940,_5941); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5940,int _5941){
  _checked_ptr_1<double> _ptr__5940(_5940 ? _5940->raw() : nullptr, _5940 ? _5940->size(0) : 0);
  int _9690;
  bool _9691 = (_5941 > (int)0);
  if (_9691)
  {
    _9690 = _5941;
  }
  else
  {
    _9690 = (-_5941);
  }
  int _5942 = _9690;
  int _5943 = safe_add( (int)((_5940)->size(0)),_5942 );
  int _5944 = (int)((_5940)->size(0));
  if ((_5941 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5945 = ::mosek::fusion::Utils::Tools::range(_5941,safe_add( _5944,_5941 ));
      _checked_ptr_1<int> _ptr__5945(_5945 ? _5945->raw() : nullptr,_5945 ? _5945->size(0) : 0);
      std::vector<int> _9692;
      for (int _5947 = (int)1, _9693 = safe_add( _5944,(int)1 ); _5947 < _9693 ; ++_5947)
      {
        _9692.push_back((safe_add( _5944,_5941 ) - _5947));
      }
      auto _9694 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9692.size()),_9692.begin(),_9692.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5946 = _9694;
      _checked_ptr_1<int> _ptr__5946(_5946 ? _5946->raw() : nullptr,_5946 ? _5946->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5943,_5943,_5945,_5946,_5940)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5948 = ::mosek::fusion::Utils::Tools::range((int)0,_5944);
      _checked_ptr_1<int> _ptr__5948(_5948 ? _5948->raw() : nullptr,_5948 ? _5948->size(0) : 0);
      std::vector<int> _9695;
      for (int _5950 = (int)1, _9696 = safe_add( _5944,(int)1 ); _5950 < _9696 ; ++_5950)
      {
        _9695.push_back((_5944 - _5950));
      }
      auto _9697 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9695.size()),_9695.begin(),_9695.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5949 = _9697;
      _checked_ptr_1<int> _ptr__5949(_5949 ? _5949->raw() : nullptr,_5949 ? _5949->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5943,_5943,_5948,_5949,_5940)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5951) { return mosek::fusion::p_Matrix::antidiag(_5951); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5951){
  _checked_ptr_1<double> _ptr__5951(_5951 ? _5951->raw() : nullptr, _5951 ? _5951->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_5951,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5952,    int _5953) { return mosek::fusion::p_Matrix::diag(_5952,_5953); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5952,int _5953){
  _checked_ptr_1<double> _ptr__5952(_5952 ? _5952->raw() : nullptr, _5952 ? _5952->size(0) : 0);
  int _9698;
  bool _9699 = (_5953 > (int)0);
  if (_9699)
  {
    _9698 = _5953;
  }
  else
  {
    _9698 = (-_5953);
  }
  int _5954 = _9698;
  int _5955 = safe_add( (int)((_5952)->size(0)),_5954 );
  int _5956 = (int)((_5952)->size(0));
  if ((_5953 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5957 = ::mosek::fusion::Utils::Tools::range((int)0,_5956);
      _checked_ptr_1<int> _ptr__5957(_5957 ? _5957->raw() : nullptr,_5957 ? _5957->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5958 = ::mosek::fusion::Utils::Tools::range(_5954,safe_add( _5956,_5954 ));
      _checked_ptr_1<int> _ptr__5958(_5958 ? _5958->raw() : nullptr,_5958 ? _5958->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5955,_5955,_5957,_5958,_5952)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5959 = ::mosek::fusion::Utils::Tools::range(_5954,safe_add( _5956,_5954 ));
      _checked_ptr_1<int> _ptr__5959(_5959 ? _5959->raw() : nullptr,_5959 ? _5959->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5960 = ::mosek::fusion::Utils::Tools::range((int)0,_5956);
      _checked_ptr_1<int> _ptr__5960(_5960 ? _5960->raw() : nullptr,_5960 ? _5960->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5955,_5955,_5959,_5960,_5952)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5961) { return mosek::fusion::p_Matrix::diag(_5961); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5961){
  _checked_ptr_1<double> _ptr__5961(_5961 ? _5961->raw() : nullptr, _5961 ? _5961->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_5961,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _5962,    int _5963) { return mosek::fusion::p_Matrix::ones(_5962,_5963); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _5962,int _5963){
  return ::mosek::fusion::p_Matrix::dense(_5962,_5963,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _5964) { return mosek::fusion::p_Matrix::eye(_5964); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _5964){
  std::vector<double> _9700;
  for (int _5965 = (int)0, _9701 = _5964; _5965 < _9701 ; ++_5965)
  {
    _9700.push_back(1.0);
  }
  auto _9702 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9700.size()),_9700.begin(),_9700.end()));
  return ::mosek::fusion::p_Matrix::diag(_9702);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5966) { return mosek::fusion::p_Matrix::dense(_5966); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _5966){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5966)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5967,    int _5968,    double _5969) { return mosek::fusion::p_Matrix::dense(_5967,_5968,_5969); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5967,int _5968,double _5969){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5967,_5968,_5969)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5970,    int _5971,    std::shared_ptr< monty::ndarray< double,1 > > _5972) { return mosek::fusion::p_Matrix::dense(_5970,_5971,_5972); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5970,int _5971,std::shared_ptr< monty::ndarray< double,1 > > _5972){
  _checked_ptr_1<double> _ptr__5972(_5972 ? _5972->raw() : nullptr, _5972 ? _5972->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5970,_5971,_5972)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _5973) { return mosek::fusion::p_Matrix::dense(_5973); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _5973){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5973)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5974) { return mosek::fusion::p_Matrix::sparse(_5974); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _5974){
  std::shared_ptr< monty::ndarray< int,1 > > _5975 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5974->numNonzeros())));
  _checked_ptr_1<int> _ptr__5975(_5975 ? _5975->raw() : nullptr,_5975 ? _5975->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5976 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5974->numNonzeros())));
  _checked_ptr_1<int> _ptr__5976(_5976 ? _5976->raw() : nullptr,_5976 ? _5976->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5977 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5974->numNonzeros())));
  _checked_ptr_1<double> _ptr__5977(_5977 ? _5977->raw() : nullptr,_5977 ? _5977->size(0) : 0);
  _5974->getDataAsTriplets(_5975,_5976,_5977);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5974->numRows(),_5974->numColumns(),_5975,_5976,_5977)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5978) { return mosek::fusion::p_Matrix::sparse(_5978); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5978){
  int _5979 = (int)((_5978)->size(0));
  int _5980 = (int)((((*_5978)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5981 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5979)));
  _checked_ptr_1<int> _ptr__5981(_5981 ? _5981->raw() : nullptr,_5981 ? _5981->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5982 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5980)));
  _checked_ptr_1<int> _ptr__5982(_5982 ? _5982->raw() : nullptr,_5982 ? _5982->size(0) : 0);
  long long _5983 = (long long)0;
  int _5984 = (int)0;
  {
    int _5985 = (int)0;
    for(;(_5985 < _5979);++ _5985)
    {
      {
        {
          int _5986 = (int)0;
          for(;(_5986 < _5980);++ _5986)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _5987 = ((*((*_5978)(_5985)))(_5986));
              if ((NULL != _5987.get()))
              {
                {
                  if ((_ptr__5982[_5986] == (int)0))
                  {
                    {
                      _ptr__5982[_5986] = mosek::fusion::p_Matrix::_get_impl(_5987)->dimj;
                    }
                  }
                  else if((_ptr__5982[_5986] != mosek::fusion::p_Matrix::_get_impl(_5987)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__5981[_5985] == (int)0))
                  {
                    {
                      _ptr__5981[_5985] = mosek::fusion::p_Matrix::_get_impl(_5987)->dimi;
                    }
                  }
                  else if((_ptr__5981[_5985] != mosek::fusion::p_Matrix::_get_impl(_5987)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _5983 = safe_add( _5983,_5987->numNonzeros() );
                }
              }
              {}
              ++ _5984;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5988 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5983)));
  _checked_ptr_1<double> _ptr__5988(_5988 ? _5988->raw() : nullptr,_5988 ? _5988->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5983)));
  _checked_ptr_1<int> _ptr__5989(_5989 ? _5989->raw() : nullptr,_5989 ? _5989->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5990 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5983)));
  _checked_ptr_1<int> _ptr__5990(_5990 ? _5990->raw() : nullptr,_5990 ? _5990->size(0) : 0);
  int _5991 = (int)0;
  int _5992 = (int)0;
  {
    int _5993 = (int)0;
    for(;(_5993 < _5979);++ _5993)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _5994 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5980)));
        _checked_ptr_1<int> _ptr__5994(_5994 ? _5994->raw() : nullptr,_5994 ? _5994->size(0) : 0);
        {
          int _5995 = (int)0;
          for(;(_5995 < _ptr__5981[_5993]);++ _5995)
          {
            {
              int _5996 = (int)0;
              {
                int _5997 = (int)0;
                for(;(_5997 < _5980);++ _5997)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _5998 = ((*((*_5978)(_5993)))(_5997));
                    if ((NULL != _5998.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _9703 = _5998;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9703.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _5999 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9703.get()));
                          {
                            int _6002 = _ptr__5994[_5997];
                            {
                              int _6003 = (int)0;
                              for(;(_6003 < mosek::fusion::p_Matrix::_get_impl(_5999)->dimj);++ _6003)
                              {
                                {
                                  _ptr__5988[_5991] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_5999)->data)(_6002));
                                  _ptr__5989[_5991] = safe_add( _5992,_5995 );
                                  _ptr__5990[_5991] = safe_add( _5996,_6003 );
                                  ++ _6002;
                                  ++ _5991;
                                }
                              }
                            }
                            _ptr__5994[_5997] = _6002;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9703.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _6000 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9703.get()));
                          {
                            int _6004;
                            {
                              _6004 = _ptr__5994[_5997];
                              for(;((_6004 < mosek::fusion::p_SparseMatrix::_get_impl(_6000)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_6000)->subi)(_6004)) == _5995));++ _6004)
                              {
                                {
                                  _ptr__5988[_5991] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6000)->val)(_6004));
                                  _ptr__5990[_5991] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_6000)->subj)(_6004)),_5996 );
                                  _ptr__5989[_5991] = safe_add( _5992,_5995 );
                                  ++ _5991;
                                }
                              }
                            }
                            _ptr__5994[_5997] = _6004;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _6001 = _9703;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _5996 = safe_add( _5996,_ptr__5982[_5997] );
                  }
                }
              }
            }
          }
        }
        _5992 = safe_add( _5992,_ptr__5981[_5993] );
      }
    }
  }
  int _6005 = (int)0;
  int _6006 = (int)0;
  {
    int _6007 = (int)0;
    for(;(_6007 < _5979);++ _6007)
    {
      {
        _6005 = safe_add( _6005,_ptr__5981[_6007] );
      }
    }
  }
  {
    int _6008 = (int)0;
    for(;(_6008 < _5980);++ _6008)
    {
      {
        _6006 = safe_add( _6006,_ptr__5982[_6008] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6005,_6006,_5989,_5990,_5988)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _6009) { return mosek::fusion::p_Matrix::sparse(_6009); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _6009){
  int _6010 = (int)((_6009)->size(0));
  int _6011 = (int)((_6009)->size(1));
  long long _6012 = (long long)safe_mul( _6010,_6011 );
  int _6013 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _6014 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6012)));
  _checked_ptr_1<int> _ptr__6014(_6014 ? _6014->raw() : nullptr,_6014 ? _6014->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6015 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6012)));
  _checked_ptr_1<int> _ptr__6015(_6015 ? _6015->raw() : nullptr,_6015 ? _6015->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6016 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6012)));
  _checked_ptr_1<double> _ptr__6016(_6016 ? _6016->raw() : nullptr,_6016 ? _6016->size(0) : 0);
  {
    int _6017 = (int)0;
    for(;(_6017 < _6010);++ _6017)
    {
      {
        {
          int _6018 = (int)0;
          for(;(_6018 < _6011);++ _6018)
          {
            {
              _ptr__6014[_6013] = _6017;
              _ptr__6015[_6013] = _6018;
              _ptr__6016[_6013] = ((*_6009)(_6017,_6018));
              ++ _6013;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6010,_6011,_6014,_6015,_6016)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6019,    int _6020) { return mosek::fusion::p_Matrix::sparse(_6019,_6020); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _6019,int _6020){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6019,_6020,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6021,    int _6022,    std::shared_ptr< monty::ndarray< int,1 > > _6023,    std::shared_ptr< monty::ndarray< int,1 > > _6024,    double _6025) { return mosek::fusion::p_Matrix::sparse(_6021,_6022,_6023,_6024,_6025); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _6021,int _6022,std::shared_ptr< monty::ndarray< int,1 > > _6023,std::shared_ptr< monty::ndarray< int,1 > > _6024,double _6025){
  _checked_ptr_1<int> _ptr__6023(_6023 ? _6023->raw() : nullptr, _6023 ? _6023->size(0) : 0);
  _checked_ptr_1<int> _ptr__6024(_6024 ? _6024->raw() : nullptr, _6024 ? _6024->size(0) : 0);
  int _6026 = (int)0;
  if ((NULL != _6023.get()))
  {
    {
      _6026 = (int)((_6023)->size(0));
    }
  }
  else if((NULL != _6024.get()))
  {
    {
      _6026 = (int)((_6024)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_6021,_6022,_6023,_6024,::mosek::fusion::Utils::Tools::makevector(_6025,_6026));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6027,    std::shared_ptr< monty::ndarray< int,1 > > _6028,    double _6029) { return mosek::fusion::p_Matrix::sparse(_6027,_6028,_6029); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _6027,std::shared_ptr< monty::ndarray< int,1 > > _6028,double _6029){
  _checked_ptr_1<int> _ptr__6027(_6027 ? _6027->raw() : nullptr, _6027 ? _6027->size(0) : 0);
  _checked_ptr_1<int> _ptr__6028(_6028 ? _6028->raw() : nullptr, _6028 ? _6028->size(0) : 0);
  int _6030 = (int)0;
  int _6031 = (int)0;
  int _6032 = (int)((_6027)->size(0));
  if ((_6032 > (int)((_6028)->size(0))))
  {
    {
      _6032 = (int)((_6028)->size(0));
    }
  }
  {}
  int _9704 = (int)0;
  int _9705 = _6032;
  for (int _6033 = _9704; _6033 < _9705; ++_6033)
  {
    {
      if ((_6031 < _ptr__6027[_6033]))
      {
        {
          _6031 = _ptr__6027[_6033];
        }
      }
      {}
      if ((_6030 < _ptr__6028[_6033]))
      {
        {
          _6030 = _ptr__6028[_6033];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _6031,(int)1 ),safe_add( _6030,(int)1 ),_6027,_6028,_6029);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6034,    std::shared_ptr< monty::ndarray< int,1 > > _6035,    std::shared_ptr< monty::ndarray< double,1 > > _6036) { return mosek::fusion::p_Matrix::sparse(_6034,_6035,_6036); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _6034,std::shared_ptr< monty::ndarray< int,1 > > _6035,std::shared_ptr< monty::ndarray< double,1 > > _6036){
  _checked_ptr_1<int> _ptr__6034(_6034 ? _6034->raw() : nullptr, _6034 ? _6034->size(0) : 0);
  _checked_ptr_1<int> _ptr__6035(_6035 ? _6035->raw() : nullptr, _6035 ? _6035->size(0) : 0);
  _checked_ptr_1<double> _ptr__6036(_6036 ? _6036->raw() : nullptr, _6036 ? _6036->size(0) : 0);
  int _6037 = (int)0;
  int _6038 = (int)0;
  int _6039 = (int)((_6034)->size(0));
  if ((_6039 > (int)((_6035)->size(0))))
  {
    {
      _6039 = (int)((_6035)->size(0));
    }
  }
  {}
  if ((_6039 > (int)((_6036)->size(0))))
  {
    {
      _6039 = (int)((_6036)->size(0));
    }
  }
  {}
  int _9706 = (int)0;
  int _9707 = _6039;
  for (int _6040 = _9706; _6040 < _9707; ++_6040)
  {
    {
      if ((_6038 < _ptr__6034[_6040]))
      {
        {
          _6038 = _ptr__6034[_6040];
        }
      }
      {}
      if ((_6037 < _ptr__6035[_6040]))
      {
        {
          _6037 = _ptr__6035[_6040];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _6038,(int)1 ),safe_add( _6037,(int)1 ),_6034,_6035,_6036);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6041,    int _6042,    std::shared_ptr< monty::ndarray< int,1 > > _6043,    std::shared_ptr< monty::ndarray< int,1 > > _6044,    std::shared_ptr< monty::ndarray< double,1 > > _6045) { return mosek::fusion::p_Matrix::sparse(_6041,_6042,_6043,_6044,_6045); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _6041,int _6042,std::shared_ptr< monty::ndarray< int,1 > > _6043,std::shared_ptr< monty::ndarray< int,1 > > _6044,std::shared_ptr< monty::ndarray< double,1 > > _6045){
  _checked_ptr_1<int> _ptr__6043(_6043 ? _6043->raw() : nullptr, _6043 ? _6043->size(0) : 0);
  _checked_ptr_1<int> _ptr__6044(_6044 ? _6044->raw() : nullptr, _6044 ? _6044->size(0) : 0);
  _checked_ptr_1<double> _ptr__6045(_6045 ? _6045->raw() : nullptr, _6045 ? _6045->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9708;
  bool _9709 = (NULL != _6045.get());
  if (_9709)
  {
    _9708 = _6045;
  }
  else
  {
    _9708 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _6046 = _9708;
  _checked_ptr_1<double> _ptr__6046(_6046 ? _6046->raw() : nullptr,_6046 ? _6046->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9710;
  bool _9711 = (NULL != _6044.get());
  if (_9711)
  {
    _9710 = _6044;
  }
  else
  {
    _9710 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6047 = _9710;
  _checked_ptr_1<int> _ptr__6047(_6047 ? _6047->raw() : nullptr,_6047 ? _6047->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9712;
  bool _9713 = (NULL != _6043.get());
  if (_9713)
  {
    _9712 = _6043;
  }
  else
  {
    _9712 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6048 = _9712;
  _checked_ptr_1<int> _ptr__6048(_6048 ? _6048->raw() : nullptr,_6048 ? _6048->size(0) : 0);
  long long _6049 = (long long)((_6048)->size(0));
  if ((((long long)((_6047)->size(0)) != _6049) || ((long long)((_6046)->size(0)) != _6049)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6041,_6042,_6048,_6047,_6046,_6049)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _6055) : RuntimeException(_6055)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _6056) : RuntimeException(_6056)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _6057) : RuntimeException(_6057.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _6058) : RuntimeException(_6058)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _6059) : mosek::fusion::FusionRuntimeException(_6059)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _6060) : mosek::fusion::FusionException(_6060)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _6061) : mosek::fusion::FusionRuntimeException(_6061)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _6062) : mosek::fusion::FusionRuntimeException(_6062)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _6063) : mosek::fusion::FusionRuntimeException(_6063)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _6064) : mosek::fusion::FusionRuntimeException(_6064)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _6065) : mosek::fusion::FusionRuntimeException(_6065)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _6066) : mosek::fusion::FusionRuntimeException(_6066)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _6067) : mosek::fusion::FusionRuntimeException(_6067)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _6068) : mosek::fusion::FusionRuntimeException(_6068)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _6069) : mosek::fusion::FusionRuntimeException(_6069)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _6070) : mosek::fusion::FusionRuntimeException(_6070)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _6071) : mosek::fusion::FusionRuntimeException(_6071)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _6072) : mosek::fusion::FusionRuntimeException(_6072)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _6073) : mosek::fusion::FusionRuntimeException(_6073)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _6074) : mosek::fusion::FusionRuntimeException(_6074)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _6075) : mosek::fusion::FusionRuntimeException(_6075)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _6076) : RuntimeException(_6076)  {
    msg = _6076;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _6077) : Exception(_6077)  {
    msg = _6077;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _6078){ return new mosek::fusion::LinkedBlocks(_6078); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _6078) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_6078); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _6078){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_6078);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6079){ return new mosek::fusion::LinkedBlocks(_6079); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6079) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_6079); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _6079){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_6079)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_6079)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_6079)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_6079)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _6080) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_6080); }void mosek::fusion::p_LinkedBlocks::free(int _6080){
  int _6081 = ((*bfirst)(_6080));
  ints->free(_6080,((*bsize)(_6080)));
  ((*bsize)(_6080)) = (-(int)1);
  ((*bfirst)(_6080)) = (-(int)1);
  blocks->free(_6081,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _6082) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_6082); }int mosek::fusion::p_LinkedBlocks::alloc(int _6082){
  int _9714;
  bool _9715 = (_6082 > (int)0);
  if (_9715)
  {
    _9714 = ints->alloc(_6082);
  }
  else
  {
    _9714 = (-(int)1);
  }
  int _6083 = _9714;
  int _6084 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _6085 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6085(_6085 ? _6085->raw() : nullptr,_6085 ? _6085->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6086 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6086(_6086 ? _6086->raw() : nullptr,_6086 ? _6086->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_6085,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_6086,(int)0,(int)((bfirst)->size(0)));
      bsize = _6085;
      bfirst = _6086;
    }
  }
  {}
  ((*bfirst)(_6084)) = _6083;
  ((*bsize)(_6084)) = _6082;
  return _6084;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _6087) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_6087); }int mosek::fusion::p_LinkedBlocks::maxidx(int _6087){
  return ints->maxidx(((*bfirst)(_6087)),((*bsize)(_6087)));
}
void mosek::fusion::LinkedBlocks :: get(int _6088,std::shared_ptr< monty::ndarray< int,1 > > _6089,int _6090) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_6088,_6089,_6090); }void mosek::fusion::p_LinkedBlocks::get(int _6088,std::shared_ptr< monty::ndarray< int,1 > > _6089,int _6090){
  _checked_ptr_1<int> _ptr__6089(_6089 ? _6089->raw() : nullptr, _6089 ? _6089->size(0) : 0);
  ints->get(((*bfirst)(_6088)),((*bsize)(_6088)),_6089,_6090);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _6091) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_6091); }int mosek::fusion::p_LinkedBlocks::blocksize(int _6091){
  return ((*bsize)(_6091));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _6092){ return new mosek::fusion::LinkedInts(_6092); }mosek::fusion::LinkedInts::LinkedInts  (int _6092) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6092); }void mosek::fusion::p_LinkedInts::_initialize  (int _6092){monty::rc_reserve __reserve_this(_pubthis);   {
    int _9716;
    bool _9717 = (_6092 > (int)0);
    if (_9717)
    {
      _9716 = _6092;
    }
    else
    {
      _9716 = (int)128;
    }
    int _6093 = _9716;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6093)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6093)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_6093 - (int)1);
    int _9718 = (int)1;
    int _9719 = _6093;
    for (int _6094 = _9718; _6094 < _9719; ++_6094)
    {
      {
        ((*prev)(_6094)) = (_6094 - (int)1);
        ((*next)((_6094 - (int)1))) = _6094;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_6093 - (int)1))) = (-(int)1);
    nfree = _6093;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6095){ return new mosek::fusion::LinkedInts(_6095); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6095) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6095); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6095){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6095)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6095)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_6095)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_6095)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_6095)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_6095)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _6096,int _6097) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_6096,_6097); }void mosek::fusion::p_LinkedInts::free(int _6096,int _6097){
  int _6098 = _6096;
  int _6099 = _6098;
  int _9720 = (int)0;
  int _9721 = (_6097 - (int)1);
  for (int _6100 = _9720; _6100 < _9721; ++_6100)
  {
    {
      _6099 = ((*next)(_6099));
    }
  }
  int _6101 = ((*prev)(_6098));
  int _6102 = ((*next)(_6099));
  if ((_6101 >= (int)0))
  {
    {
      ((*next)(_6101)) = _6102;
    }
  }
  {}
  if ((_6102 >= (int)0))
  {
    {
      ((*prev)(_6102)) = _6101;
    }
  }
  {}
  ((*prev)(_6098)) = (-(int)1);
  ((*next)(_6099)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _6099;
    }
  }
  {}
  first_free = _6098;
  nfree += _6097;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _6103) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6103); }int mosek::fusion::p_LinkedInts::alloc(int _6103){
  return allocblock(_6103);
}
void mosek::fusion::LinkedInts :: alloc(int _6104,std::shared_ptr< monty::ndarray< int,1 > > _6105,int _6106) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6104,_6105,_6106); }void mosek::fusion::p_LinkedInts::alloc(int _6104,std::shared_ptr< monty::ndarray< int,1 > > _6105,int _6106){
  _checked_ptr_1<int> _ptr__6105(_6105 ? _6105->raw() : nullptr, _6105 ? _6105->size(0) : 0);
  int _6107 = allocblock(_6104);
  int _9722 = (int)0;
  int _9723 = _6104;
  for (int _6108 = _9722; _6108 < _9723; ++_6108)
  {
    {
      _ptr__6105[safe_add( _6108,_6106 )] = _6107;
      _6107 = ((*next)(_6107));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _6109,int _6110,std::shared_ptr< monty::ndarray< int,1 > > _6111,int _6112) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_6109,_6110,_6111,_6112); }void mosek::fusion::p_LinkedInts::get(int _6109,int _6110,std::shared_ptr< monty::ndarray< int,1 > > _6111,int _6112){
  _checked_ptr_1<int> _ptr__6111(_6111 ? _6111->raw() : nullptr, _6111 ? _6111->size(0) : 0);
  int _6113 = _6109;
  int _9724 = (int)0;
  int _9725 = _6110;
  for (int _6114 = _9724; _6114 < _9725; ++_6114)
  {
    {
      _ptr__6111[safe_add( _6114,_6112 )] = _6113;
      _6113 = ((*next)(_6113));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _6115,int _6116) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_6115,_6116); }int mosek::fusion::p_LinkedInts::maxidx(int _6115,int _6116){
  int _6117 = _6115;
  int _6118 = _6115;
  int _9726 = (int)1;
  int _9727 = _6116;
  for (int _6119 = _9726; _6119 < _9727; ++_6119)
  {
    {
      _6118 = ((*next)(_6118));
      if ((_6117 < _6118))
      {
        {
          _6117 = _6118;
        }
      }
      {}
    }
  }
  return _6117;
}
int mosek::fusion::p_LinkedInts::allocblock(int _6120){
  int _6121 = (int)((next)->size(0));
  if ((nfree < _6120))
  {
    {
      int _6122 = (_6120 - nfree);
      if ((_6122 < _6121))
      {
        {
          _6122 = _6121;
        }
      }
      {}
      recap(safe_add( _6122,_6121 ));
    }
  }
  {}
  int _6123 = first_free;
  int _6124 = _6123;
  int _9728 = (int)0;
  int _9729 = (_6120 - (int)1);
  for (int _6125 = _9728; _6125 < _9729; ++_6125)
  {
    {
      _6124 = ((*next)(_6124));
    }
  }
  first_free = ((*next)(_6124));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_6124)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _6124;
    }
  }
  {}
  first_used = _6123;
  nfree -= _6120;
  return _6123;
}
void mosek::fusion::p_LinkedInts::recap(int _6126){
  int _6127 = (int)((next)->size(0));
  if ((_6126 > _6127))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_6126);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_6126);
      int _9730 = _6127;
      int _9731 = (_6126 - (int)1);
      for (int _6128 = _9730; _6128 < _9731; ++_6128)
      {
        {
          ((*next)(_6128)) = safe_add( _6128,(int)1 );
          ((*prev)(safe_add( _6128,(int)1 ))) = _6128;
        }
      }
      ((*next)((_6126 - (int)1))) = (-(int)1);
      ((*prev)(_6127)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _6127;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _6127;
        }
      }
      last_free = (_6126 - (int)1);
      nfree += (_6126 - _6127);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _6129 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _6130 = first_used;
  while ( (_6130 >= (int)0) )
  {
    {
      ((*_6129)(_6130)) = true;
      _6130 = ((*next)(_6130));
      if (((_6130 >= (int)0) && ((*_6129)(_6130))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _6130 = first_free;
  int _6131 = (int)0;
  while ( (_6130 >= (int)0) )
  {
    {
      ++ _6131;
      ((*_6129)(_6130)) = true;
      _6130 = ((*next)(_6130));
      if (((_6130 >= (int)0) && ((*_6129)(_6130))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6131 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _9732 = (int)0;
  int _9733 = (int)((_6129)->size(0));
  for (int _6132 = _9732; _6132 < _9733; ++_6132)
  {
    {
      if ((!((*_6129)(_6130))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _9734 = (int)0;
  int _9735 = (int)((_6129)->size(0));
  for (int _6133 = _9734; _6133 < _9735; ++_6133)
  {
    {
      ((*_6129)(_6133)) = false;
    }
  }
  _6130 = last_free;
  int _6134 = (int)0;
  while ( (_6130 >= (int)0) )
  {
    {
      ++ _6134;
      ((*_6129)(_6130)) = true;
      _6130 = ((*prev)(_6130));
      if (((_6130 >= (int)0) && ((*_6129)(_6130))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6134 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6135,    const std::string & _6136,    double _6137) { mosek::fusion::p_Parameters::setParameter(_6135,_6136,_6137); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6135,const std::string & _6136,double _6137){
  if (false)
  {
    {
    }
  }
  else if((_6136 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6136 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6136 == std::string ("numThreads")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6138 = _6137;
          if (((int)0 <= _6138))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6138);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6136 == std::string ("mtSpincount")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6139 = _6137;
          if ((((int)0 <= _6139) && (_6139 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6139);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6136 == std::string ("biMaxIterations")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6140 = _6137;
          if (((int)0 <= _6140))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6140);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6141 = _6137;
          if (((int)0 <= _6141))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6141);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6142 = _6137;
          if (((int)0 <= _6142))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6142);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logResponse")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6143 = _6137;
          if (((int)0 <= _6143))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6143);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6136 == std::string ("logBi")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6144 = _6137;
          if (((int)0 <= _6144))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6144);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logBiFreq")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6145 = _6137;
          if (((int)0 <= _6145))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6145);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6136 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6136 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6136 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6136 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6136 == std::string ("logIntpnt")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6146 = _6137;
          if (((int)0 <= _6146))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6146);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6147 = _6137;
          if (((int)0 <= _6147))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6147);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6148 = _6137;
          if (((int)0 <= _6148))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6148);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6136 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6149 = _6137;
          if (((int)0 <= _6149))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6149);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6136 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6136 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6136 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6150 = _6137;
          if (((-(int)1) <= _6150))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6150);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6136 == std::string ("presolveLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6151 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6151);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logPresolve")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6152 = _6137;
          if (((int)0 <= _6152))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6152);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6136 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6153 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6153);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6154 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6154);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6155 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6155);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simPrimalCrash")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6156 = _6137;
          if (((int)0 <= _6156))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6156);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logSim")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6157 = _6137;
          if (((int)0 <= _6157))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6157);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logSimMinor")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6158 = _6137;
          if (((int)0 <= _6158))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6158);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logSimFreq")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6159 = _6137;
          if (((int)0 <= _6159))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6159);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6160 = _6137;
          if ((((int)0 <= _6160) && (_6160 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6160);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6136 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6161 = _6137;
          if ((((int)0 <= _6161) && (_6161 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6161);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6136 == std::string ("simMaxIterations")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6162 = _6137;
          if (((int)0 <= _6162))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6162);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6136 == std::string ("simRefactorFreq")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6163 = _6137;
          if (((int)0 <= _6163))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6163);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simSeed")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6164 = _6137;
          if ((((int)0 <= _6164) && (_6164 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6164);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6136 == std::string ("logMio")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6165 = _6137;
          if (((int)0 <= _6165))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6165);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logMioFreq")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6166 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6166);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6167 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6167);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6168 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6168);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6169 = _6137;
          if (((int)0 <= _6169))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6169);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6170 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6170);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6136 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6171 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6171);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioProbingLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6172 = _6137;
          if ((((-(int)1) <= _6172) && (_6172 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6172);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6173 = _6137;
          if ((((-(int)1) <= _6173) && (_6173 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6173);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6174 = _6137;
          if ((((-(int)1) <= _6174) && (_6174 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6174);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6136 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6136 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6136 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6136 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6136 == std::string ("mioSeed")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6175 = _6137;
          if (((int)0 <= _6175))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6175);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6136 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6136 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6176 = _6137;
          if (((int)40 <= _6176))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6176);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6177 = _6137;
          if (((int)0 <= _6177))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6177);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6136 == std::string ("logInfeasAna")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6178 = _6137;
          if (((int)0 <= _6178))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6178);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6136 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6136 == std::string ("licensePauseTime")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6179 = _6137;
          if ((((int)0 <= _6179) && (_6179 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6179);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6136 == std::string ("log")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6180 = _6137;
          if (((int)0 <= _6180))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6180);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logExpand")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6181 = _6137;
          if (((int)0 <= _6181))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6181);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logFile")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6182 = _6137;
          if (((int)0 <= _6182))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6182);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("logOrder")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6183 = _6137;
          if (((int)0 <= _6183))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6183);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6136 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6136 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6184 = _6137;
          if ((((int)0 <= _6184) && (_6184 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6184);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6185 = _6137;
          if ((((int)0 <= _6185) && (_6185 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6185);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6186 = _6137;
          if (((int)0 <= _6186))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6186);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6136 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6136 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6136 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6136 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6136 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6136 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6136 == std::string ("simDualCrash")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6187 = _6137;
          if (((int)0 <= _6187))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6187);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6136 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6188 = _6137;
          if ((((-(int)1) <= _6188) && (_6188 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6188);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6136 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6136 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6136 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6136 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6136 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6189 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6189);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6190 = _6137;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6190);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6136 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6136 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6136 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6136 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6191 = _6137;
          if (((-(int)1) <= _6191))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6191);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_6137 - (int)_6137) == 0.0))
      {
        {
          double _6192 = _6137;
          if ((((-(int)1) <= _6192) && (_6192 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6192);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("optimizerMaxTime")))
  {
    {
      double _6193 = _6137;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6193);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("lowerObjCut")))
  {
    {
      double _6194 = _6137;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6194);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("upperObjCut")))
  {
    {
      double _6195 = _6137;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6195);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6196 = _6137;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6196);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6197 = _6137;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6197);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolRelGap")))
  {
    {
      double _6198 = _6137;
      if ((1.000000e-14 <= _6198))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6198);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolStepSize")))
  {
    {
      double _6199 = _6137;
      if (((0.000000e+00 <= _6199) && (_6199 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6199);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6200 = _6137;
      if (((1.000000e-06 <= _6200) && (_6200 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6200);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolRelStep")))
  {
    {
      double _6201 = _6137;
      if (((1.000000e-04 <= _6201) && (_6201 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6201);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolPath")))
  {
    {
      double _6202 = _6137;
      if (((0.000000e+00 <= _6202) && (_6202 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6202);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolPfeas")))
  {
    {
      double _6203 = _6137;
      if (((0.000000e+00 <= _6203) && (_6203 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6203);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolDfeas")))
  {
    {
      double _6204 = _6137;
      if (((0.000000e+00 <= _6204) && (_6204 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6204);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolMuRed")))
  {
    {
      double _6205 = _6137;
      if (((0.000000e+00 <= _6205) && (_6205 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6205);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolInfeas")))
  {
    {
      double _6206 = _6137;
      if (((0.000000e+00 <= _6206) && (_6206 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6206);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6207 = _6137;
      if (((0.000000e+00 <= _6207) && (_6207 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6207);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6208 = _6137;
      if (((0.000000e+00 <= _6208) && (_6208 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6208);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6209 = _6137;
      if (((0.000000e+00 <= _6209) && (_6209 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6209);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6210 = _6137;
      if (((0.000000e+00 <= _6210) && (_6210 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6210);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6211 = _6137;
      if ((1.000000e+00 <= _6211))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6211);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6212 = _6137;
      if (((0.000000e+00 <= _6212) && (_6212 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6212);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolPsafe")))
  {
    {
      double _6213 = _6137;
      if ((1.000000e-04 <= _6213))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6213);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("intpntTolDsafe")))
  {
    {
      double _6214 = _6137;
      if ((1.000000e-04 <= _6214))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6214);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioMaxTime")))
  {
    {
      double _6215 = _6137;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6215);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioRelGapConst")))
  {
    {
      double _6216 = _6137;
      if ((1.000000e-15 <= _6216))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6216);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioTolRelGap")))
  {
    {
      double _6217 = _6137;
      if ((0.000000e+00 <= _6217))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6217);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioTolAbsGap")))
  {
    {
      double _6218 = _6137;
      if ((0.000000e+00 <= _6218))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6218);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6219 = _6137;
      if ((1.000000e-09 <= _6219))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6219);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("basisTolX")))
  {
    {
      double _6220 = _6137;
      if ((1.000000e-09 <= _6220))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6220);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("basisTolS")))
  {
    {
      double _6221 = _6137;
      if ((1.000000e-09 <= _6221))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6221);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("basisRelTolS")))
  {
    {
      double _6222 = _6137;
      if ((0.000000e+00 <= _6222))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6222);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveTolX")))
  {
    {
      double _6223 = _6137;
      if ((0.000000e+00 <= _6223))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6223);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveTolS")))
  {
    {
      double _6224 = _6137;
      if ((0.000000e+00 <= _6224))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6224);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveTolAij")))
  {
    {
      double _6225 = _6137;
      if ((1.000000e-15 <= _6225))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6225);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6226 = _6137;
      if ((0.000000e+00 <= _6226))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6226);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6227 = _6137;
      if ((0.000000e+00 <= _6227))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6227);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6228 = _6137;
      if ((1.000000e-12 <= _6228))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6228);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioTolFeas")))
  {
    {
      double _6229 = _6137;
      if (((1.000000e-09 <= _6229) && (_6229 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6229);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6136 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6230 = _6137;
      if (((0.000000e+00 <= _6230) && (_6230 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6135.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6230);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6136 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6136 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6136 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6136 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6136 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6136 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6231,    const std::string & _6232,    int _6233) { mosek::fusion::p_Parameters::setParameter(_6231,_6232,_6233); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6231,const std::string & _6232,int _6233){
  if (false)
  {
    {
    }
  }
  else if((_6232 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6232 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6232 == std::string ("numThreads")))
  {
    {
      int _6234 = _6233;
      if (((int)0 <= _6234))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6234);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6232 == std::string ("mtSpincount")))
  {
    {
      int _6235 = _6233;
      if ((((int)0 <= _6235) && (_6235 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6235);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6232 == std::string ("biMaxIterations")))
  {
    {
      int _6236 = _6233;
      if (((int)0 <= _6236))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6236);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _6237 = _6233;
      if (((int)0 <= _6237))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6237);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logCutSecondOpt")))
  {
    {
      int _6238 = _6233;
      if (((int)0 <= _6238))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6238);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logResponse")))
  {
    {
      int _6239 = _6233;
      if (((int)0 <= _6239))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6239);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6232 == std::string ("logBi")))
  {
    {
      int _6240 = _6233;
      if (((int)0 <= _6240))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6240);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logBiFreq")))
  {
    {
      int _6241 = _6233;
      if (((int)0 <= _6241))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6241);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6232 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6232 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6232 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6232 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6232 == std::string ("logIntpnt")))
  {
    {
      int _6242 = _6233;
      if (((int)0 <= _6242))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6242);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntMaxIterations")))
  {
    {
      int _6243 = _6233;
      if (((int)0 <= _6243))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6243);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntOffColTrh")))
  {
    {
      int _6244 = _6233;
      if (((int)0 <= _6244))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6244);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6232 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _6245 = _6233;
      if (((int)0 <= _6245))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6245);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6232 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6232 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6232 == std::string ("intpntMaxNumCor")))
  {
    {
      int _6246 = _6233;
      if (((-(int)1) <= _6246))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6246);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6232 == std::string ("presolveLevel")))
  {
    {
      int _6247 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6247);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logPresolve")))
  {
    {
      int _6248 = _6233;
      if (((int)0 <= _6248))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6248);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6232 == std::string ("presolveMaxNumPass")))
  {
    {
      int _6249 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6249);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _6250 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6250);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _6251 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6251);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simPrimalCrash")))
  {
    {
      int _6252 = _6233;
      if (((int)0 <= _6252))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6252);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logSim")))
  {
    {
      int _6253 = _6233;
      if (((int)0 <= _6253))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6253);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logSimMinor")))
  {
    {
      int _6254 = _6233;
      if (((int)0 <= _6254))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6254);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logSimFreq")))
  {
    {
      int _6255 = _6233;
      if (((int)0 <= _6255))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6255);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _6256 = _6233;
      if ((((int)0 <= _6256) && (_6256 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6256);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6232 == std::string ("simDualRestrictSelection")))
  {
    {
      int _6257 = _6233;
      if ((((int)0 <= _6257) && (_6257 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6257);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6232 == std::string ("simMaxIterations")))
  {
    {
      int _6258 = _6233;
      if (((int)0 <= _6258))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6258);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6232 == std::string ("simRefactorFreq")))
  {
    {
      int _6259 = _6233;
      if (((int)0 <= _6259))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6259);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simSeed")))
  {
    {
      int _6260 = _6233;
      if ((((int)0 <= _6260) && (_6260 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6260);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6232 == std::string ("logMio")))
  {
    {
      int _6261 = _6233;
      if (((int)0 <= _6261))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6261);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logMioFreq")))
  {
    {
      int _6262 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6262);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _6263 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6263);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioMaxNumBranches")))
  {
    {
      int _6264 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6264);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _6265 = _6233;
      if (((int)0 <= _6265))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6265);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _6266 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6266);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6232 == std::string ("mioHeuristicLevel")))
  {
    {
      int _6267 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6267);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioProbingLevel")))
  {
    {
      int _6268 = _6233;
      if ((((-(int)1) <= _6268) && (_6268 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6268);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _6269 = _6233;
      if ((((-(int)1) <= _6269) && (_6269 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6269);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _6270 = _6233;
      if ((((-(int)1) <= _6270) && (_6270 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6270);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6232 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6232 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6232 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6232 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6232 == std::string ("mioSeed")))
  {
    {
      int _6271 = _6233;
      if (((int)0 <= _6271))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6271);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6232 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6232 == std::string ("writeLpLineWidth")))
  {
    {
      int _6272 = _6233;
      if (((int)40 <= _6272))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6272);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _6273 = _6233;
      if (((int)0 <= _6273))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6273);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6232 == std::string ("logInfeasAna")))
  {
    {
      int _6274 = _6233;
      if (((int)0 <= _6274))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6274);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6232 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6232 == std::string ("licensePauseTime")))
  {
    {
      int _6275 = _6233;
      if ((((int)0 <= _6275) && (_6275 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6275);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6232 == std::string ("log")))
  {
    {
      int _6276 = _6233;
      if (((int)0 <= _6276))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6276);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logExpand")))
  {
    {
      int _6277 = _6233;
      if (((int)0 <= _6277))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6277);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logFile")))
  {
    {
      int _6278 = _6233;
      if (((int)0 <= _6278))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6278);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("logOrder")))
  {
    {
      int _6279 = _6233;
      if (((int)0 <= _6279))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6279);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6232 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6232 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _6280 = _6233;
      if ((((int)0 <= _6280) && (_6280 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6280);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _6281 = _6233;
      if ((((int)0 <= _6281) && (_6281 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6281);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _6282 = _6233;
      if (((int)0 <= _6282))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6282);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6232 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6232 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6232 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6232 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6232 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6232 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6232 == std::string ("simDualCrash")))
  {
    {
      int _6283 = _6233;
      if (((int)0 <= _6283))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6283);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6232 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _6284 = _6233;
      if ((((-(int)1) <= _6284) && (_6284 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6284);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6232 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6232 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6232 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6232 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6232 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _6285 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6285);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _6286 = _6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6286);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6232 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6232 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6232 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6232 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _6287 = _6233;
      if (((-(int)1) <= _6287))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6287);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _6288 = _6233;
      if ((((-(int)1) <= _6288) && (_6288 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6288);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("optimizerMaxTime")))
  {
    {
      double _6289 = (double)_6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6289);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("lowerObjCut")))
  {
    {
      double _6290 = (double)_6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6290);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("upperObjCut")))
  {
    {
      double _6291 = (double)_6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6291);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6292 = (double)_6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6292);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6293 = (double)_6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6293);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolRelGap")))
  {
    {
      double _6294 = (double)_6233;
      if ((1.000000e-14 <= _6294))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6294);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolStepSize")))
  {
    {
      double _6295 = (double)_6233;
      if (((0.000000e+00 <= _6295) && (_6295 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6295);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6296 = (double)_6233;
      if (((1.000000e-06 <= _6296) && (_6296 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6296);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolRelStep")))
  {
    {
      double _6297 = (double)_6233;
      if (((1.000000e-04 <= _6297) && (_6297 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6297);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolPath")))
  {
    {
      double _6298 = (double)_6233;
      if (((0.000000e+00 <= _6298) && (_6298 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6298);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolPfeas")))
  {
    {
      double _6299 = (double)_6233;
      if (((0.000000e+00 <= _6299) && (_6299 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6299);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolDfeas")))
  {
    {
      double _6300 = (double)_6233;
      if (((0.000000e+00 <= _6300) && (_6300 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6300);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolMuRed")))
  {
    {
      double _6301 = (double)_6233;
      if (((0.000000e+00 <= _6301) && (_6301 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6301);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolInfeas")))
  {
    {
      double _6302 = (double)_6233;
      if (((0.000000e+00 <= _6302) && (_6302 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6302);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6303 = (double)_6233;
      if (((0.000000e+00 <= _6303) && (_6303 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6303);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6304 = (double)_6233;
      if (((0.000000e+00 <= _6304) && (_6304 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6304);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6305 = (double)_6233;
      if (((0.000000e+00 <= _6305) && (_6305 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6305);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6306 = (double)_6233;
      if (((0.000000e+00 <= _6306) && (_6306 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6306);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6307 = (double)_6233;
      if ((1.000000e+00 <= _6307))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6307);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6308 = (double)_6233;
      if (((0.000000e+00 <= _6308) && (_6308 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6308);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolPsafe")))
  {
    {
      double _6309 = (double)_6233;
      if ((1.000000e-04 <= _6309))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6309);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("intpntTolDsafe")))
  {
    {
      double _6310 = (double)_6233;
      if ((1.000000e-04 <= _6310))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6310);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioMaxTime")))
  {
    {
      double _6311 = (double)_6233;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6311);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioRelGapConst")))
  {
    {
      double _6312 = (double)_6233;
      if ((1.000000e-15 <= _6312))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6312);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioTolRelGap")))
  {
    {
      double _6313 = (double)_6233;
      if ((0.000000e+00 <= _6313))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6313);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioTolAbsGap")))
  {
    {
      double _6314 = (double)_6233;
      if ((0.000000e+00 <= _6314))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6314);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6315 = (double)_6233;
      if ((1.000000e-09 <= _6315))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6315);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("basisTolX")))
  {
    {
      double _6316 = (double)_6233;
      if ((1.000000e-09 <= _6316))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6316);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("basisTolS")))
  {
    {
      double _6317 = (double)_6233;
      if ((1.000000e-09 <= _6317))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6317);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("basisRelTolS")))
  {
    {
      double _6318 = (double)_6233;
      if ((0.000000e+00 <= _6318))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6318);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveTolX")))
  {
    {
      double _6319 = (double)_6233;
      if ((0.000000e+00 <= _6319))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6319);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveTolS")))
  {
    {
      double _6320 = (double)_6233;
      if ((0.000000e+00 <= _6320))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6320);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveTolAij")))
  {
    {
      double _6321 = (double)_6233;
      if ((1.000000e-15 <= _6321))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6321);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6322 = (double)_6233;
      if ((0.000000e+00 <= _6322))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6322);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6323 = (double)_6233;
      if ((0.000000e+00 <= _6323))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6323);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6324 = (double)_6233;
      if ((1.000000e-12 <= _6324))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6324);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioTolFeas")))
  {
    {
      double _6325 = (double)_6233;
      if (((1.000000e-09 <= _6325) && (_6325 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6325);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6232 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6326 = (double)_6233;
      if (((0.000000e+00 <= _6326) && (_6326 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6231.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6326);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6232 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6232 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6232 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6232 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6232 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6232 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6327,    const std::string & _6328,    const std::string & _6329) { mosek::fusion::p_Parameters::setParameter(_6327,_6328,_6329); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6327,const std::string & _6328,const std::string & _6329){
  if (false)
  {
    {
    }
  }
  {}
  if ((_6328 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _6330 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6330 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_6330);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("removeUnusedSolutions")))
  {
    {
      int _6331 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6331 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_6331);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _6333 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6333))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6333);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6332)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntMultiThread")))
  {
    {
      int _6334 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6334 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_6334);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _6336 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6336) && (_6336 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6336);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6335)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("optimizer")))
  {
    {
      int _6337 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6329);
      if ((_6337 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_6337);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _6339 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6339))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6339);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6338)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _6341 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6341))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6341);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6340)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _6343 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6343))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6343);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6342)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _6345 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6345))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6345);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6344)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logLocalInfo")))
  {
    {
      int _6346 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6346 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_6346);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _6348 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6348))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6348);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6347)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _6350 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6350))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6350);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6349)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("biCleanOptimizer")))
  {
    {
      int _6351 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6329);
      if ((_6351 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_6351);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntStartingPoint")))
  {
    {
      int _6352 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_6329);
      if ((_6352 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_6352);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntDiffStep")))
  {
    {
      int _6353 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6353 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_6353);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntScaling")))
  {
    {
      int _6354 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6329);
      if ((_6354 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_6354);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntSolveForm")))
  {
    {
      int _6355 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6329);
      if ((_6355 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_6355);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _6357 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6357))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6357);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6356)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _6359 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6359))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6359);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6358)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _6361 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6361))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6361);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6360)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntOrderMethod")))
  {
    {
      int _6362 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_6329);
      if ((_6362 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_6362);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _6364 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6364))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6364);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6363)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntBasis")))
  {
    {
      int _6365 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_6329);
      if ((_6365 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_6365);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _6366 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6366 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_6366);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("biIgnoreNumError")))
  {
    {
      int _6367 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6367 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_6367);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _6369 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((-(int)1) <= _6369))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6369);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6368)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveUse")))
  {
    {
      int _6370 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_6329);
      if ((_6370 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_6370);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _6372 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6372);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6371)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _6374 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6374))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6374);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6373)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveLindepUse")))
  {
    {
      int _6375 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6375 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_6375);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _6377 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6377);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6376)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _6379 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6379);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6378)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _6381 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6381);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6380)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _6383 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6383))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6383);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6382)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _6385 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6385))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6385);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6384)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _6387 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6387))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6387);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6386)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _6389 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6389))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6389);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6388)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _6391 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6391) && (_6391 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6391);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6390)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simPrimalSelection")))
  {
    {
      int _6392 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6329);
      if ((_6392 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_6392);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _6394 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6394) && (_6394 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6394);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6393)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simDualSelection")))
  {
    {
      int _6395 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6329);
      if ((_6395 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_6395);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _6397 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6397))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6397);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6396)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simHotstartLu")))
  {
    {
      int _6398 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6398 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_6398);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _6400 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6400))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6400);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6399)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _6402 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6402) && (_6402 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6402);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6401)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioMode")))
  {
    {
      int _6403 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_6329);
      if ((_6403 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_6403);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _6405 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6405))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6405);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6404)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _6407 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6407);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6406)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _6409 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6409);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6408)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _6411 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6411);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6410)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _6413 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6413))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6413);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6412)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _6415 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6415);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6414)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioNodeSelection")))
  {
    {
      int _6416 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_6329);
      if ((_6416 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_6416);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _6418 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6418);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6417)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _6420 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((-(int)1) <= _6420) && (_6420 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6420);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6419)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _6422 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((-(int)1) <= _6422) && (_6422 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6422);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6421)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _6424 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((-(int)1) <= _6424) && (_6424 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6424);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6423)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioBranchDir")))
  {
    {
      int _6425 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_6329);
      if ((_6425 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_6425);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioRootOptimizer")))
  {
    {
      int _6426 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6329);
      if ((_6426 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_6426);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioNodeOptimizer")))
  {
    {
      int _6427 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6329);
      if ((_6427 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_6427);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _6428 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6428 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_6428);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _6429 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6429 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_6429);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _6431 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6431))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6431);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6430)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _6432 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6432 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_6432);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("writeLpQuotedNames")))
  {
    {
      int _6433 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6433 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_6433);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _6435 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)40 <= _6435))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6435);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6434)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _6437 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6437))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6437);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6436)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("writeLpFullObj")))
  {
    {
      int _6438 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6438 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_6438);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _6440 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6440))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6440);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6439)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("licenseWait")))
  {
    {
      int _6441 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6441 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_6441);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _6442 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6442 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_6442);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _6444 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6444) && (_6444 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6444);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6443)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("licenseDebug")))
  {
    {
      int _6445 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6445 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_6445);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("log")))
  {
    {
      try
      {
        {
          int _6447 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6447))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6447);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6446)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _6449 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6449))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6449);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6448)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _6451 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6451))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6451);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6450)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _6453 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6453))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6453);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6452)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simScaling")))
  {
    {
      int _6454 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6329);
      if ((_6454 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_6454);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simScalingMethod")))
  {
    {
      int _6455 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_6329);
      if ((_6455 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_6455);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6457 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6457) && (_6457 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6457);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6456)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6459 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((int)0 <= _6459) && (_6459 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6459);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6458)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _6461 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6461))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6461);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6460)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simHotstart")))
  {
    {
      int _6462 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_6329);
      if ((_6462 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_6462);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simBasisFactorUse")))
  {
    {
      int _6463 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6463 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_6463);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simDegen")))
  {
    {
      int _6464 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_6329);
      if ((_6464 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_6464);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simReformulation")))
  {
    {
      int _6465 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_6329);
      if ((_6465 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_6465);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simExploitDupvec")))
  {
    {
      int _6466 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_6329);
      if ((_6466 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_6466);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simSaveLu")))
  {
    {
      int _6467 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6467 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_6467);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simNonSingular")))
  {
    {
      int _6468 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6468 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_6468);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _6470 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((int)0 <= _6470))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6470);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6469)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("infeasPreferPrimal")))
  {
    {
      int _6471 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6471 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_6471);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _6473 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((-(int)1) <= _6473) && (_6473 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6473);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6472)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioCutCmir")))
  {
    {
      int _6474 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6474 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_6474);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioCutClique")))
  {
    {
      int _6475 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6475 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_6475);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioCutImpliedBound")))
  {
    {
      int _6476 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6476 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_6476);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _6477 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6477 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_6477);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioCutGmi")))
  {
    {
      int _6478 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6478 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_6478);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _6480 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6480);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6479)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _6482 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6482);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6481)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("cacheLicense")))
  {
    {
      int _6483 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6483 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_6483);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intpntRegularizationUse")))
  {
    {
      int _6484 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6484 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_6484);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simSolveForm")))
  {
    {
      int _6485 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6329);
      if ((_6485 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_6485);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("simSwitchOptimizer")))
  {
    {
      int _6486 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6329);
      if ((_6486 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_6486);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _6488 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if (((-(int)1) <= _6488))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6488);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6487)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _6490 = ::mosek::fusion::Utils::Tools::toInt(_6329);
          if ((((-(int)1) <= _6490) && (_6490 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6490);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6489)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _6492 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6492);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6491)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _6494 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6494);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6493)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _6496 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6496);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6495)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6498 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6498);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6497)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6500 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6500);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6499)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _6502 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-14 <= _6502))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6502);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6501)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _6504 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6504) && (_6504 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6504);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6503)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _6506 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((1.000000e-06 <= _6506) && (_6506 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6506);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6505)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _6508 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((1.000000e-04 <= _6508) && (_6508 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6508);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6507)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _6510 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6510) && (_6510 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6510);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6509)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _6512 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6512) && (_6512 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6512);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6511)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _6514 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6514) && (_6514 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6514);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6513)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _6516 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6516) && (_6516 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6516);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6515)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _6518 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6518) && (_6518 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6518);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6517)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _6520 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6520) && (_6520 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6520);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6519)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _6522 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6522) && (_6522 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6522);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6521)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _6524 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6524) && (_6524 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6524);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6523)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _6526 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6526) && (_6526 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6526);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6525)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _6528 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e+00 <= _6528))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6528);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6527)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _6530 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6530) && (_6530 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6530);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6529)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _6532 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-04 <= _6532))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6532);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6531)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _6534 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-04 <= _6534))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6534);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6533)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _6536 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6536);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6535)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _6538 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-15 <= _6538))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6538);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6537)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _6540 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6540))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6540);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6539)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _6542 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6542))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6542);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6541)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _6544 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-09 <= _6544))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6544);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6543)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _6546 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-09 <= _6546))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6546);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6545)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _6548 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-09 <= _6548))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6548);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6547)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _6550 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6550))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6550);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6549)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _6552 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6552))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6552);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6551)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _6554 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6554))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6554);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6553)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _6556 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-15 <= _6556))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6556);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6555)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _6558 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6558))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6558);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6557)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _6560 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((0.000000e+00 <= _6560))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6560);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6559)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _6562 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if ((1.000000e-12 <= _6562))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6562);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6561)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _6564 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((1.000000e-09 <= _6564) && (_6564 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6564);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6563)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _6566 = ::mosek::fusion::Utils::Tools::toDouble(_6329);
          if (((0.000000e+00 <= _6566) && (_6566 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6566);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6565)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_6328 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_6329);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_6329);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_6329);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_6329);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_6329);
      return;
    }
  }
  {}
  if ((_6328 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6327.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_6329);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _6567){
  if ((_6567 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6567 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _6568){
  if ((_6568 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_6568 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _6569){
  if ((_6569 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6569 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6569 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6569 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _6570){
  if ((_6570 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6570 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6570 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6570 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _6571){
  if ((_6571 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6571 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6571 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6571 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6571 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6571 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6571 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _6572){
  if ((_6572 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6572 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6572 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6572 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6572 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6572 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6572 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6572 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6572 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6572 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6572 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6572 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6572 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6572 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6572 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6572 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6572 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6572 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6572 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6572 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6572 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6572 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6572 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6572 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _6573){
  if ((_6573 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6573 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6573 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _6574){
  if ((_6574 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6574 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6574 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _6575){
  if ((_6575 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6575 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6575 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6575 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6575 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6575 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6575 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6575 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6575 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6575 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _6576){
  if ((_6576 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6576 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6576 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6576 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6576 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6576 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6576 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6576 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _6577){
  if ((_6577 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6577 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6577 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6577 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6577 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6577 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _6578){
  if ((_6578 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _6579){
  if ((_6579 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6579 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _6580){
  if ((_6580 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6580 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6580 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6580 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _6581){
  if ((_6581 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6581 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6581 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6581 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6581 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _6582){
  if ((_6582 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6582 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6582 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6582 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6582 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6582 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6582 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6582 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6582 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_6582 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_6582 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_6582 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_6582 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_6582 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_6582 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_6582 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_6582 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_6582 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_6582 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_6582 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_6582 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_6582 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_6582 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_6582 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_6582 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_6582 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_6582 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_6582 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_6582 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_6582 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_6582 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_6582 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_6582 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_6582 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_6582 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_6582 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_6582 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_6582 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_6582 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_6582 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_6582 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_6582 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_6582 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_6582 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_6582 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_6582 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_6582 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_6582 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_6582 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_6582 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_6582 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_6582 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_6582 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_6582 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_6582 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_6582 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_6582 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_6582 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_6582 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_6582 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_6582 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_6582 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_6582 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_6582 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_6582 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_6582 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_6582 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_6582 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_6582 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_6582 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_6582 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_6582 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_6582 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_6582 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_6582 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_6582 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_6582 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_6582 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_6582 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_6582 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_6582 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_6582 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_6582 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_6582 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_6582 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_6582 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_6582 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_6582 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_6582 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_6582 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_6582 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_6582 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_6582 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_6582 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_6582 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_6582 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_6582 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_6582 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_6582 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_6582 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_6582 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_6582 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_6582 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_6582 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_6582 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_6582 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_6582 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_6582 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_6582 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_6582 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_6582 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_6582 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_6582 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_6582 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_6582 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_6582 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_6582 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_6582 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_6582 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_6582 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_6582 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_6582 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_6582 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_6582 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_6582 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_6582 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_6582 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_6582 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_6582 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_6582 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_6582 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_6582 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_6582 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_6582 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_6582 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_6582 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_6582 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_6582 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_6582 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_6582 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_6582 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_6582 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_6582 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_6582 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_6582 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_6582 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_6582 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_6582 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_6582 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_6582 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_6582 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_6582 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_6582 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_6582 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_6582 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_6582 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_6582 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_6582 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_6582 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_6582 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_6582 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_6582 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_6582 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_6582 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_6582 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_6582 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_6582 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_6582 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_6582 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_6582 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_6582 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_6582 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_6582 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_6582 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_6582 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_6582 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_6582 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_6582 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_6582 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_6582 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_6582 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_6582 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_6582 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_6582 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_6582 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_6582 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_6582 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_6582 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_6582 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_6582 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_6582 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_6582 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_6582 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_6582 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_6582 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_6582 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_6582 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_6582 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_6582 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_6582 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_6582 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_6582 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_6582 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_6582 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_6582 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_6582 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_6582 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_6582 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_6582 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_6582 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_6582 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_6582 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_6582 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_6582 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_6582 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_6582 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_6582 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_6582 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_6582 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_6582 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_6582 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_6582 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_6582 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_6582 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_6582 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_6582 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_6582 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_6582 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_6582 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_6582 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_6582 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_6582 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_6582 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_6582 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_6582 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_6582 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_6582 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_6582 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_6582 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_6582 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_6582 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_6582 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_6582 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_6582 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_6582 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_6582 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_6582 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_6582 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_6582 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_6582 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_6582 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_6582 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_6582 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_6582 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_6582 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_6582 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_6582 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_6582 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_6582 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_6582 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_6582 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_6582 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_6582 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_6582 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_6582 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_6582 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_6582 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_6582 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_6582 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_6582 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_6582 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_6582 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_6582 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_6582 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_6582 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_6582 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_6582 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_6582 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_6582 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_6582 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_6582 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_6582 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_6582 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_6582 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_6582 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_6582 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_6582 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_6582 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_6582 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_6582 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_6582 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_6582 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_6582 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_6582 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_6582 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_6582 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_6582 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_6582 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_6582 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_6582 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_6582 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_6582 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_6582 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_6582 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_6582 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_6582 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_6582 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_6582 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_6582 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_6582 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_6582 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_6582 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_6582 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_6582 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_6582 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_6582 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_6582 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_6582 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_6582 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_6582 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_6582 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_6582 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_6582 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_6582 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_6582 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _6583){
  if ((_6583 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6583 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _6584){
  if ((_6584 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6584 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6584 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6584 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6584 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6584 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6584 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6584 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6584 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _6585){
  if ((_6585 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6585 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6585 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6585 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6585 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _6586){
  if ((_6586 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6586 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6586 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _6587){
  if ((_6587 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6587 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6587 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6587 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _6588){
  if ((_6588 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6588 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6588 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _6589){
  if ((_6589 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6589 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6589 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6589 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6589 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6589 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _6590){
  if ((_6590 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6590 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6590 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6590 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6590 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6590 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6590 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _6591){
  if ((_6591 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6591 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _6592){
  if ((_6592 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6592 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _6593){
  if ((_6593 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6593 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6593 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6593 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _6594){
  if ((_6594 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6594 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6594 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6594 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _6595){
  if ((_6595 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6595 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _6596){
  if ((_6596 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6596 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6596 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6596 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _6597){
  if ((_6597 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6597 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6597 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6597 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6597 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6597 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6597 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6597 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _6598){
  if ((_6598 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6598 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_6598 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6598 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6598 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6598 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6598 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_6598 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6598 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6598 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6598 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6598 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6598 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6598 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6598 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6598 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6598 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6598 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6598 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6598 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6598 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6598 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6598 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6598 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6598 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6598 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6598 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6598 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6598 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6598 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6598 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6598 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6598 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6598 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6598 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_6598 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_6598 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6598 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_6598 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_6598 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_6598 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6598 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_6598 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_6598 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_6598 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6598 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6598 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6598 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_6598 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_6598 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_6598 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_6598 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_6598 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_6598 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_6598 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_6598 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6598 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6598 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6598 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6598 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6598 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6598 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6598 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6598 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6598 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6598 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6598 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6598 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6598 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6598 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6598 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6598 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6598 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6598 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6598 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_6598 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_6598 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_6598 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_6598 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_6598 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_6598 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_6598 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_6598 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_6598 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_6598 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_6598 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_6598 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_6598 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_6598 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_6598 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_6598 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_6598 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_6598 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_6598 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_6598 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_6598 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_6598 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_6598 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_6598 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_6598 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_6598 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_6598 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_6598 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_6598 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_6598 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_6598 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6598 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6598 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6598 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6598 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6598 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6598 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6598 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6598 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_6598 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_6598 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6598 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6598 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6598 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6598 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6598 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6598 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_6598 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_6598 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6598 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6598 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_6598 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_6598 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_6598 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_6598 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_6598 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_6598 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_6598 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_6598 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_6598 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_6598 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_6598 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_6598 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_6598 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_6598 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6598 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6598 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6598 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6598 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_6598 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_6598 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6598 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6598 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6598 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6598 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6598 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6598 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_6598 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_6598 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_6598 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_6598 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6598 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6598 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6598 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_6598 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_6598 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_6598 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6598 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6598 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6598 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_6598 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_6598 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6598 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6598 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6598 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6598 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6598 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _6599){
  if ((_6599 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6599 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6599 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _6600){
  if ((_6600 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6600 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6600 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6600 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6600 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6600 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6600 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6600 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6600 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6600 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6600 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6600 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6600 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6600 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6600 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6600 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6600 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6600 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6600 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6600 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6600 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6600 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6600 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6600 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6600 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6600 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6600 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6600 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6600 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6600 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6600 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6600 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6600 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6600 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6600 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6600 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6600 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6600 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6600 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6600 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6600 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6600 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _6601){
  if ((_6601 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6601 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6601 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6601 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6601 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6601 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6601 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6601 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6601 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6601 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6601 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6601 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6601 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6601 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6601 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6601 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6601 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6601 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6601 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6601 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6601 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6601 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6601 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6601 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6601 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6601 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6601 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6601 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6601 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6601 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6601 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6601 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6601 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6601 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6601 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6601 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6601 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6601 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6601 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6601 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _6602){
  if ((_6602 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6602 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6602 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _6603){
  if ((_6603 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6603 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6603 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6603 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6603 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6603 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6603 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6603 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6603 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6603 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6603 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6603 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6603 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6603 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6603 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6603 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6603 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6603 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6603 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6603 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6603 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6603 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6603 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6603 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6603 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6603 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6603 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6603 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6603 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6603 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6603 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6603 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6603 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6603 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6603 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6603 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6603 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6603 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6603 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6603 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6603 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6603 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6603 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6603 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6603 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6603 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6603 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6603 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _6604){
  if ((_6604 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6604 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6604 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6604 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6604 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6604 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6604 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6604 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _6605){
  if ((_6605 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6605 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6605 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6605 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6605 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6605 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6605 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6605 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6605 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6605 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6605 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6605 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6605 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _6606){
  if ((_6606 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6606 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6606 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6606 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6606 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6606 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6606 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6606 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6606 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6606 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6606 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6606 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6606 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6606 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6606 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6606 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6606 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6606 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6606 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6606 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6606 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6606 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6606 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6606 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6606 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6606 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6606 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6606 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6606 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6606 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6606 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6606 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6606 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6606 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6606 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6606 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6606 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6606 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6606 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6606 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6606 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6606 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6606 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6606 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _6607){
  if ((_6607 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6607 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _6608){
  if ((_6608 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6608 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6608 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6608 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6608 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6608 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6608 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6608 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6608 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6608 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6608 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6608 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6608 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6608 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6608 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6608 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6608 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6608 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6608 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6608 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6608 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6608 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6608 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6608 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6608 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6608 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6608 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6608 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6608 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6608 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6608 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6608 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6608 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6608 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6608 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6608 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6608 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6608 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6608 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6608 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6608 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6608 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6608 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6608 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6608 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6608 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6608 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6608 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6608 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6608 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6608 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6608 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6608 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6608 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6608 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6608 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6608 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6608 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6608 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6608 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6608 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6608 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6608 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6608 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6608 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6608 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6608 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6608 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6608 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6608 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6608 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6608 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6608 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6608 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _6609){
  if ((_6609 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6609 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6609 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6609 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6609 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6609 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6609 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6609 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6609 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _6610){
  if ((_6610 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _6611){
  if ((_6611 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6611 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6611 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6611 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6611 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _6612){
  if ((_6612 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6612 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6612 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _6613){
  if ((_6613 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6613 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6613 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6613 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6613 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6613 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6613 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _6614){
  if ((_6614 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6614 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6614 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6614 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _6615){
  if ((_6615 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6615 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6615 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _6616){
  if ((_6616 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6616 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6616 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6616 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6616 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6616 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6616 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6616 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6616 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6616 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6616 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6616 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6616 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6616 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6616 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6616 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6616 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6616 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6616 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6616 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6616 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6616 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6616 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6616 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6616 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6616 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6616 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6616 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6616 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6616 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6616 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6616 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6616 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6616 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6616 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6616 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6616 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6616 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6616 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6616 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6616 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6616 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6616 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6616 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6616 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6616 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6616 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6616 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6616 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6616 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6616 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6616 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6616 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6616 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6616 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6616 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6616 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6616 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6616 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6616 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6616 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6616 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6616 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6616 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6616 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6616 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6616 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6616 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6616 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6616 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6616 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6616 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6616 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6616 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6616 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6616 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6616 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6616 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6616 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6616 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6616 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6616 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6616 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6616 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6616 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6616 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6616 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6616 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6616 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6616 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6616 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6616 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6616 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _6617){
  if ((_6617 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6617 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6617 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6617 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6617 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _6618){
  if ((_6618 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6618 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6618 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6618 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _6619){
  if ((_6619 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6619 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6619 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _6620){
  if ((_6620 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6620 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6620 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _6621){
  if ((_6621 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6621 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6621 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6621 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _6622){
  if ((_6622 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6622 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _6623){
  if ((_6623 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6623 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _6624){
  if ((_6624 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6624 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6624 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6624 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6624 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _6625){
  if ((_6625 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6625 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _6626){
  if ((_6626 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6626 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6626 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6626 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6626 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _6627){
  if ((_6627 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6627 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6627 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6627 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6627 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _6628){
  if ((_6628 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6628 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }